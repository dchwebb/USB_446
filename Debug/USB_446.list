
USB_446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08001cb0  08001cb0  00011cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08001d78  08001d78  00011d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d80  08001d80  00011d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000694  20000014  08001d98  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200006a8  08001d98  000206a8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005f43  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ff4  00000000  00000000  00025f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001e8  00000000  00000000  00026f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00027168  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000019b2  00000000  00000000  00027308  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001e8b  00000000  00000000  00028cba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002ab45  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000684  00000000  00000000  0002abc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002b248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001c98 	.word	0x08001c98

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08001c98 	.word	0x08001c98

08000204 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800020e:	4909      	ldr	r1, [pc, #36]	; (8000234 <NVIC_EnableIRQ+0x30>)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800021a:	f002 021f 	and.w	r2, r2, #31
 800021e:	2001      	movs	r0, #1
 8000220:	fa00 f202 	lsl.w	r2, r0, r2
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100

08000238 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	6039      	str	r1, [r7, #0]
 8000242:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000248:	2b00      	cmp	r3, #0
 800024a:	da0d      	bge.n	8000268 <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800024c:	490f      	ldr	r1, [pc, #60]	; (800028c <NVIC_SetPriority+0x54>)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	f003 030f 	and.w	r3, r3, #15
 8000258:	3b04      	subs	r3, #4
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	b2d2      	uxtb	r2, r2
 800025e:	0112      	lsls	r2, r2, #4
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	440b      	add	r3, r1
 8000264:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000266:	e00b      	b.n	8000280 <NVIC_SetPriority+0x48>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000268:	4a09      	ldr	r2, [pc, #36]	; (8000290 <NVIC_SetPriority+0x58>)
 800026a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026e:	4618      	mov	r0, r3
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	011b      	lsls	r3, r3, #4
 8000276:	b2d9      	uxtb	r1, r3
 8000278:	1813      	adds	r3, r2, r0
 800027a:	460a      	mov	r2, r1
 800027c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000ed00 	.word	0xe000ed00
 8000290:	e000e100 	.word	0xe000e100

08000294 <_ZSt3minItERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	461a      	mov	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	da01      	bge.n	80002b0 <_ZSt3minItERKT_S2_S2_+0x1c>
	return __b;
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	e000      	b.n	80002b2 <_ZSt3minItERKT_S2_S2_+0x1e>
      return __a;
 80002b0:	687b      	ldr	r3, [r7, #4]
    }
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
	...

080002c0 <_ZN3USB19USBInterruptHandlerEv>:
#include <USB.h>

void USB::USBInterruptHandler() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b090      	sub	sp, #64	; 0x40
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]

	int epnum, ep_intr, epint;

	//int interruptCode = USB_ReadInterrupts();

	if (usbEventNo >= 200) {
 80002c8:	4b96      	ldr	r3, [pc, #600]	; (8000524 <_ZN3USB19USBInterruptHandlerEv+0x264>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2bc7      	cmp	r3, #199	; 0xc7
 80002ce:	dd01      	ble.n	80002d4 <_ZN3USB19USBInterruptHandlerEv+0x14>
		int susp = 1;
 80002d0:	2301      	movs	r3, #1
 80002d2:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	// Handle spurious interrupt
	if ((USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK) == 0)
 80002d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002d8:	695a      	ldr	r2, [r3, #20]
 80002da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4013      	ands	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	bf0c      	ite	eq
 80002e6:	2301      	moveq	r3, #1
 80002e8:	2300      	movne	r3, #0
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	f040 83f6 	bne.w	8000ade <_ZN3USB19USBInterruptHandlerEv+0x81e>
		return;

	// Handle Mode mismatch interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_MMIS)) {
 80002f2:	2102      	movs	r1, #2
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f001 f9eb 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d007      	beq.n	8000310 <_ZN3USB19USBInterruptHandlerEv+0x50>
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_MMIS;
 8000300:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000304:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f003 0302 	and.w	r3, r3, #2
 800030e:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 80000 OEPINT
	// OUT endpoint interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_OEPINT)) {
 8000310:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f001 f9db 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	f000 8105 	beq.w	800052c <_ZN3USB19USBInterruptHandlerEv+0x26c>

		// Read the output endpoint interrupt register to ascertain which endpoint(s) fired an interrupt
		ep_intr = ((USBx_DEVICE->DAINT & USBx_DEVICE->DAINTMSK) & 0xFFFF0000U) >> 16; // FIXME mask unnecessary with shift right?
 8000322:	4b81      	ldr	r3, [pc, #516]	; (8000528 <_ZN3USB19USBInterruptHandlerEv+0x268>)
 8000324:	699a      	ldr	r2, [r3, #24]
 8000326:	4b80      	ldr	r3, [pc, #512]	; (8000528 <_ZN3USB19USBInterruptHandlerEv+0x268>)
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	4013      	ands	r3, r2
 800032c:	0c1b      	lsrs	r3, r3, #16
 800032e:	b29b      	uxth	r3, r3
 8000330:	63fb      	str	r3, [r7, #60]	; 0x3c


		// process each endpoint in turn incrementing the epnum and checking the interrupts (ep_intr) if that endpoint fired
		epnum = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
		while (ep_intr != 0) {
 8000336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000338:	2b00      	cmp	r3, #0
 800033a:	f000 80f7 	beq.w	800052c <_ZN3USB19USBInterruptHandlerEv+0x26c>
			if ((ep_intr & 1) != 0) {
 800033e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	2b00      	cmp	r3, #0
 8000346:	f000 80e5 	beq.w	8000514 <_ZN3USB19USBInterruptHandlerEv+0x254>
				epint = USBx_OUTEP(epnum)->DOEPINT & USBx_DEVICE->DOEPMSK;
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000350:	3358      	adds	r3, #88	; 0x58
 8000352:	015b      	lsls	r3, r3, #5
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	4b74      	ldr	r3, [pc, #464]	; (8000528 <_ZN3USB19USBInterruptHandlerEv+0x268>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4013      	ands	r3, r2
 800035c:	637b      	str	r3, [r7, #52]	; 0x34

				if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC) {		// Transfer completed
 800035e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000360:	f003 0301 	and.w	r3, r3, #1
 8000364:	2b00      	cmp	r3, #0
 8000366:	d01a      	beq.n	800039e <_ZN3USB19USBInterruptHandlerEv+0xde>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_XFRC;				// Clear interrupt
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800036e:	3358      	adds	r3, #88	; 0x58
 8000370:	015b      	lsls	r3, r3, #5
 8000372:	461a      	mov	r2, r3
 8000374:	2301      	movs	r3, #1
 8000376:	6093      	str	r3, [r2, #8]
					//(void)PCD_EP_OutXfrComplete_int(hpcd, epnum);					// Appears to lead to placeholder function, overridable in user program
					//if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
			        // STATUS PHASE completed, update ep0_state to idle
			        ep0_state = USBD_EP0_IDLE;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2200      	movs	r2, #0
 800037c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					//USBD_LL_StallEP(pdev, 0U);
				    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000386:	3358      	adds	r3, #88	; 0x58
 8000388:	015b      	lsls	r3, r3, #5
 800038a:	461a      	mov	r2, r3
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000392:	3358      	adds	r3, #88	; 0x58
 8000394:	015b      	lsls	r3, r3, #5
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800039c:	6013      	str	r3, [r2, #0]
				}

				if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) {		// SETUP phase done
 800039e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f000 808d 	beq.w	80004c4 <_ZN3USB19USBInterruptHandlerEv+0x204>
					//NB psetup refers to hcpd.Setup which is an array[12] named 'setup buffer' filled by USB_OTG_GINTSTS_RXFLVL



					// Parse Setup Request containing data in xfer_buff filled by RXFLVL interrupt
					uint8_t *pdata = (uint8_t*)xfer_buff;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	330c      	adds	r3, #12
 80003ae:	613b      	str	r3, [r7, #16]
					req.mRequest     = *(uint8_t *)  (pdata);
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	781a      	ldrb	r2, [r3, #0]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	701a      	strb	r2, [r3, #0]
					req.Request      = *(uint8_t *)  (pdata +  1);
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	785a      	ldrb	r2, [r3, #1]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	705a      	strb	r2, [r3, #1]
					req.Value        = SWAPBYTE      (pdata +  2);
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	3302      	adds	r3, #2
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	3303      	adds	r3, #3
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	021b      	lsls	r3, r3, #8
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	4413      	add	r3, r2
 80003d6:	b29a      	uxth	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	805a      	strh	r2, [r3, #2]
					req.Index        = SWAPBYTE      (pdata +  4);
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	3304      	adds	r3, #4
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	3305      	adds	r3, #5
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	021b      	lsls	r3, r3, #8
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	4413      	add	r3, r2
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	809a      	strh	r2, [r3, #4]
					req.Length       = SWAPBYTE      (pdata +  6);
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	3306      	adds	r3, #6
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	b29a      	uxth	r2, r3
 8000400:	693b      	ldr	r3, [r7, #16]
 8000402:	3307      	adds	r3, #7
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	b29b      	uxth	r3, r3
 8000408:	021b      	lsls	r3, r3, #8
 800040a:	b29b      	uxth	r3, r3
 800040c:	4413      	add	r3, r2
 800040e:	b29a      	uxth	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	80da      	strh	r2, [r3, #6]

					//pdev->ep0_data_len = pdev->request.wLength;
					ep0_state = USBD_EP0_SETUP;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					switch (req.mRequest & 0x1F) {		// originally USBD_LL_SetupStage
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	f003 031f 	and.w	r3, r3, #31
 8000424:	2b01      	cmp	r3, #1
 8000426:	d00b      	beq.n	8000440 <_ZN3USB19USBInterruptHandlerEv+0x180>
 8000428:	2b02      	cmp	r3, #2
 800042a:	d040      	beq.n	80004ae <_ZN3USB19USBInterruptHandlerEv+0x1ee>
 800042c:	2b00      	cmp	r3, #0
 800042e:	d000      	beq.n	8000432 <_ZN3USB19USBInterruptHandlerEv+0x172>
						//USBD_StdEPReq(pdev, req);
						break;

					default:
						//USBD_LL_StallEP(pdev, (req.mRequest & 0x80U));
						break;
 8000430:	e040      	b.n	80004b4 <_ZN3USB19USBInterruptHandlerEv+0x1f4>
						USBD_StdDevReq(req);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f000 ff71 	bl	8001320 <_ZN3USB14USBD_StdDevReqE10usbRequest>
						break;
 800043e:	e039      	b.n	80004b4 <_ZN3USB19USBInterruptHandlerEv+0x1f4>
						if (req.mRequest == 0x21) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b21      	cmp	r3, #33	; 0x21
 8000446:	d106      	bne.n	8000456 <_ZN3USB19USBInterruptHandlerEv+0x196>
							USB_EP0StartXfer(DIR_IN, 0, 0);		// sends blank request back
 8000448:	2300      	movs	r3, #0
 800044a:	2200      	movs	r2, #0
 800044c:	2101      	movs	r1, #1
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f000 ffe2 	bl	8001418 <_ZN3USB16USB_EP0StartXferEbhm>
						break;
 8000454:	e02d      	b.n	80004b2 <_ZN3USB19USBInterruptHandlerEv+0x1f2>
						} else if (req.mRequest == 0x81) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b81      	cmp	r3, #129	; 0x81
 800045c:	d129      	bne.n	80004b2 <_ZN3USB19USBInterruptHandlerEv+0x1f2>
							if (req.Value >> 8 == 0x22)		// 0x22 = CUSTOM_HID_REPORT_DESC
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	885b      	ldrh	r3, [r3, #2]
 8000462:	121b      	asrs	r3, r3, #8
 8000464:	2b22      	cmp	r3, #34	; 0x22
 8000466:	d124      	bne.n	80004b2 <_ZN3USB19USBInterruptHandlerEv+0x1f2>
								outBuffSize = std::min((uint16_t)0x4A, req.Length);		// 0x4A = USBD_CUSTOM_HID_REPORT_DESC_SIZE
 8000468:	234a      	movs	r3, #74	; 0x4a
 800046a:	837b      	strh	r3, [r7, #26]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	1d9a      	adds	r2, r3, #6
 8000470:	f107 031a 	add.w	r3, r7, #26
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff0c 	bl	8000294 <_ZSt3minItERKT_S2_S2_>
 800047c:	4603      	mov	r3, r0
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	461a      	mov	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
								outBuff = CUSTOM_HID_ReportDesc_FS;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f203 320a 	addw	r2, r3, #778	; 0x30a
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
								ep0_state = USBD_EP0_DATA_IN;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2202      	movs	r2, #2
 8000498:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
								USB_EP0StartXfer(DIR_IN, 0, outBuffSize);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80004a2:	2200      	movs	r2, #0
 80004a4:	2101      	movs	r1, #1
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f000 ffb6 	bl	8001418 <_ZN3USB16USB_EP0StartXferEbhm>
						break;
 80004ac:	e001      	b.n	80004b2 <_ZN3USB19USBInterruptHandlerEv+0x1f2>
						break;
 80004ae:	bf00      	nop
 80004b0:	e000      	b.n	80004b4 <_ZN3USB19USBInterruptHandlerEv+0x1f4>
						break;
 80004b2:	bf00      	nop
					}

					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_STUP;				// Clear interrupt
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80004ba:	3358      	adds	r3, #88	; 0x58
 80004bc:	015b      	lsls	r3, r3, #5
 80004be:	461a      	mov	r2, r3
 80004c0:	2308      	movs	r3, #8
 80004c2:	6093      	str	r3, [r2, #8]
				}

				if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS) {	// OUT token received when endpoint disabled
 80004c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004c6:	f003 0310 	and.w	r3, r3, #16
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d007      	beq.n	80004de <_ZN3USB19USBInterruptHandlerEv+0x21e>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_OTEPDIS;			// Clear interrupt
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80004d4:	3358      	adds	r3, #88	; 0x58
 80004d6:	015b      	lsls	r3, r3, #5
 80004d8:	461a      	mov	r2, r3
 80004da:	2310      	movs	r3, #16
 80004dc:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {	// Status Phase Received interrupt
 80004de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004e0:	f003 0320 	and.w	r3, r3, #32
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d007      	beq.n	80004f8 <_ZN3USB19USBInterruptHandlerEv+0x238>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_OTEPSPR;			// Clear interrupt
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80004ee:	3358      	adds	r3, #88	; 0x58
 80004f0:	015b      	lsls	r3, r3, #5
 80004f2:	461a      	mov	r2, r3
 80004f4:	2320      	movs	r3, #32
 80004f6:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK) {			// OUT NAK interrupt
 80004f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d008      	beq.n	8000514 <_ZN3USB19USBInterruptHandlerEv+0x254>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_NAK;				// Clear interrupt
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000508:	3358      	adds	r3, #88	; 0x58
 800050a:	015b      	lsls	r3, r3, #5
 800050c:	461a      	mov	r2, r3
 800050e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000512:	6093      	str	r3, [r2, #8]
				}
			}
			epnum++;
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3301      	adds	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
			ep_intr >>= 1U;
 800051a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800051c:	105b      	asrs	r3, r3, #1
 800051e:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (ep_intr != 0) {
 8000520:	e709      	b.n	8000336 <_ZN3USB19USBInterruptHandlerEv+0x76>
 8000522:	bf00      	nop
 8000524:	200006a4 	.word	0x200006a4
 8000528:	50000800 	.word	0x50000800

	}

	/////////////////////////////////////////////// 40000 IEPINT
	// IN endpoint interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_IEPINT))
 800052c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f001 f8cd 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	f000 810b 	beq.w	8000754 <_ZN3USB19USBInterruptHandlerEv+0x494>
	{


		// Read in the device interrupt bits [initially 1]
		ep_intr = (USBx_DEVICE->DAINT & USBx_DEVICE->DAINTMSK) & 0xFFFFU;
 800053e:	4bb1      	ldr	r3, [pc, #708]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 8000540:	699a      	ldr	r2, [r3, #24]
 8000542:	4bb0      	ldr	r3, [pc, #704]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4013      	ands	r3, r2
 8000548:	b29b      	uxth	r3, r3
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c

		// process each endpoint in turn incrementing the epnum and checking the interrupts (ep_intr) if that endpoint fired
		epnum = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
		while (ep_intr != 0U) {
 8000550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000552:	2b00      	cmp	r3, #0
 8000554:	f000 80fe 	beq.w	8000754 <_ZN3USB19USBInterruptHandlerEv+0x494>
			if ((ep_intr & 1) != 0) { // In ITR [initially true]
 8000558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	2b00      	cmp	r3, #0
 8000560:	f000 80f1 	beq.w	8000746 <_ZN3USB19USBInterruptHandlerEv+0x486>
				// epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);

				// [initially 0x80]
				epint = USBx_INEP((uint32_t)epnum)->DIEPINT & (USBx_DEVICE->DIEPMSK | (((USBx_DEVICE->DIEPEMPMSK >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7));
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800056a:	3348      	adds	r3, #72	; 0x48
 800056c:	015b      	lsls	r3, r3, #5
 800056e:	689a      	ldr	r2, [r3, #8]
 8000570:	4ba4      	ldr	r3, [pc, #656]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 8000572:	6919      	ldr	r1, [r3, #16]
 8000574:	4ba3      	ldr	r3, [pc, #652]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 8000576:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	f003 030f 	and.w	r3, r3, #15
 800057e:	fa20 f303 	lsr.w	r3, r0, r3
 8000582:	01db      	lsls	r3, r3, #7
 8000584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000588:	430b      	orrs	r3, r1
 800058a:	4013      	ands	r3, r2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34

				if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC) {
 800058e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d05e      	beq.n	8000656 <_ZN3USB19USBInterruptHandlerEv+0x396>
					uint32_t fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	f003 030f 	and.w	r3, r3, #15
 800059e:	2201      	movs	r2, #1
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	633b      	str	r3, [r7, #48]	; 0x30
					USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80005a6:	4997      	ldr	r1, [pc, #604]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 80005a8:	4b96      	ldr	r3, [pc, #600]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 80005aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4013      	ands	r3, r2
 80005b2:	634b      	str	r3, [r1, #52]	; 0x34

					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_XFRC;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80005ba:	3348      	adds	r3, #72	; 0x48
 80005bc:	015b      	lsls	r3, r3, #5
 80005be:	461a      	mov	r2, r3
 80005c0:	2301      	movs	r3, #1
 80005c2:	6093      	str	r3, [r2, #8]


					//HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);

					if (ep0_state == USBD_EP0_DATA_IN) {
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d133      	bne.n	8000636 <_ZN3USB19USBInterruptHandlerEv+0x376>
						if (xfer_rem > 0) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d012      	beq.n	80005fe <_ZN3USB19USBInterruptHandlerEv+0x33e>
							outBuffSize = xfer_rem;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
							xfer_rem = 0;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
							USB_EP0StartXfer(DIR_IN, 0, outBuffSize);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80005f2:	2200      	movs	r2, #0
 80005f4:	2101      	movs	r1, #1
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 ff0e 	bl	8001418 <_ZN3USB16USB_EP0StartXferEbhm>
 80005fc:	e02b      	b.n	8000656 <_ZN3USB19USBInterruptHandlerEv+0x396>
						} else {

							USB_EPSetStall(epnum);
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4619      	mov	r1, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f001 f811 	bl	800162c <_ZN3USB14USB_EPSetStallEh>

							ep0_state = USBD_EP0_STATUS_OUT;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2205      	movs	r2, #5
 800060e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

							//HAL_PCD_EP_Receive
							xfer_rem = 0;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
							xfer_buff[0] = 0;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
							//xfer_count = 0;
							if (epnum == 0) {
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d117      	bne.n	8000656 <_ZN3USB19USBInterruptHandlerEv+0x396>
								USB_EP0StartXfer(DIR_OUT, 0, ep0_maxPacket);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7a1b      	ldrb	r3, [r3, #8]
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 fef2 	bl	8001418 <_ZN3USB16USB_EP0StartXferEbhm>
 8000634:	e00f      	b.n	8000656 <_ZN3USB19USBInterruptHandlerEv+0x396>
							} else {
								//USB_EPStartXfer(false, epnum, nullptr, outBuffSize);
							}
						}
					}
					else if ((ep0_state == USBD_EP0_STATUS_IN) || (ep0_state == USBD_EP0_IDLE))		// second time around
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800063c:	2b04      	cmp	r3, #4
 800063e:	d004      	beq.n	800064a <_ZN3USB19USBInterruptHandlerEv+0x38a>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d105      	bne.n	8000656 <_ZN3USB19USBInterruptHandlerEv+0x396>
					{
						USB_EPSetStall(epnum);
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 ffeb 	bl	800162c <_ZN3USB14USB_EPSetStallEh>
					}
				}


				if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC) {
 8000656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	2b00      	cmp	r3, #0
 800065e:	d007      	beq.n	8000670 <_ZN3USB19USBInterruptHandlerEv+0x3b0>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_TOC;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000666:	3348      	adds	r3, #72	; 0x48
 8000668:	015b      	lsls	r3, r3, #5
 800066a:	461a      	mov	r2, r3
 800066c:	2308      	movs	r3, #8
 800066e:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE) {
 8000670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000672:	f003 0310 	and.w	r3, r3, #16
 8000676:	2b00      	cmp	r3, #0
 8000678:	d007      	beq.n	800068a <_ZN3USB19USBInterruptHandlerEv+0x3ca>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_ITTXFE;
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000680:	3348      	adds	r3, #72	; 0x48
 8000682:	015b      	lsls	r3, r3, #5
 8000684:	461a      	mov	r2, r3
 8000686:	2310      	movs	r3, #16
 8000688:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE) {
 800068a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800068c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000690:	2b00      	cmp	r3, #0
 8000692:	d007      	beq.n	80006a4 <_ZN3USB19USBInterruptHandlerEv+0x3e4>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_INEPNE;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800069a:	3348      	adds	r3, #72	; 0x48
 800069c:	015b      	lsls	r3, r3, #5
 800069e:	461a      	mov	r2, r3
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD) {
 80006a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <_ZN3USB19USBInterruptHandlerEv+0x3fe>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80006b4:	3348      	adds	r3, #72	; 0x48
 80006b6:	015b      	lsls	r3, r3, #5
 80006b8:	461a      	mov	r2, r3
 80006ba:	2302      	movs	r3, #2
 80006bc:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE) {
 80006be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d03e      	beq.n	8000746 <_ZN3USB19USBInterruptHandlerEv+0x486>
					//(void)PCD_WriteEmptyTxFifo(hpcd, epnum);


					uint32_t maxPacket = (epnum == 0 ? ep0_maxPacket : ep_maxPacket);
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d102      	bne.n	80006d4 <_ZN3USB19USBInterruptHandlerEv+0x414>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7a1b      	ldrb	r3, [r3, #8]
 80006d2:	e001      	b.n	80006d8 <_ZN3USB19USBInterruptHandlerEv+0x418>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7a5b      	ldrb	r3, [r3, #9]
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					if (outBuffSize > maxPacket) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80006e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d90b      	bls.n	80006fe <_ZN3USB19USBInterruptHandlerEv+0x43e>
						xfer_rem = outBuffSize - maxPacket;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80006ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ee:	1ad2      	subs	r2, r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
						outBuffSize = maxPacket;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006fa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					}

					USB_WritePacket(outBuff, epnum, (uint16_t)outBuffSize);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	461a      	mov	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800070e:	b29b      	uxth	r3, r3
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 fc11 	bl	8000f38 <_ZN3USB15USB_WritePacketEPhmt>

					outBuff += outBuffSize;		// Move pointer forwards
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000722:	441a      	add	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
					uint32_t fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	f003 030f 	and.w	r3, r3, #15
 8000730:	2201      	movs	r2, #1
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
					USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000738:	4932      	ldr	r1, [pc, #200]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 800073c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000740:	43db      	mvns	r3, r3
 8000742:	4013      	ands	r3, r2
 8000744:	634b      	str	r3, [r1, #52]	; 0x34

				}
			}
			epnum++;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
			ep_intr >>= 1U;
 800074c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800074e:	105b      	asrs	r3, r3, #1
 8000750:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (ep_intr != 0U) {
 8000752:	e6fd      	b.n	8000550 <_ZN3USB19USBInterruptHandlerEv+0x290>

	}

	/////////////////////////////////////////////// 80000000 USB_OTG_GINTSTS_WKUINT
	// Handle Resume Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_WKUINT))
 8000754:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 ffb9 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d00d      	beq.n	8000780 <_ZN3USB19USBInterruptHandlerEv+0x4c0>
	{
		// Clear the Remote Wake-up Signaling
		USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000764:	4a27      	ldr	r2, [pc, #156]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 8000766:	4b27      	ldr	r3, [pc, #156]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f023 0301 	bic.w	r3, r3, #1
 800076e:	6053      	str	r3, [r2, #4]

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_WKUINT;
 8000770:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000774:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800077e:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 800 USBSUSP
	// Handle Suspend Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_USBSUSP))
 8000780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 ffa3 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d018      	beq.n	80007c2 <_ZN3USB19USBInterruptHandlerEv+0x502>
	{

		if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	2b01      	cmp	r3, #1
 800079a:	bf0c      	ite	eq
 800079c:	2301      	moveq	r3, #1
 800079e:	2300      	movne	r3, #0
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d005      	beq.n	80007b2 <_ZN3USB19USBInterruptHandlerEv+0x4f2>
		{
			//USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);		// stores status of suspend pdev->dev_state  = USBD_STATE_SUSPENDED
			USBx_PCGCCTL |= USB_OTG_PCGCCTL_STOPCLK;
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <_ZN3USB19USBInterruptHandlerEv+0x548>)
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <_ZN3USB19USBInterruptHandlerEv+0x548>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6013      	str	r3, [r2, #0]
		}
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_USBSUSP;
 80007b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007c0:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 1000 USB_OTG_GINTSTS_USBRST
	// Handle Reset Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_USBRST))
 80007c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 ff82 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	f000 8098 	beq.w	8000904 <_ZN3USB19USBInterruptHandlerEv+0x644>
	{
		USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <_ZN3USB19USBInterruptHandlerEv+0x544>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	6053      	str	r3, [r2, #4]

		// USB_FlushTxFifo
		USB_OTG_FS->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (0x10 << 6));
 80007e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007e4:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80007e8:	611a      	str	r2, [r3, #16]
		while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80007ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	2b20      	cmp	r3, #32
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d004      	beq.n	800080c <_ZN3USB19USBInterruptHandlerEv+0x54c>
 8000802:	e7f2      	b.n	80007ea <_ZN3USB19USBInterruptHandlerEv+0x52a>
 8000804:	50000800 	.word	0x50000800
 8000808:	50000e00 	.word	0x50000e00

		for (int i = 0; i < 6; i++) {				// hpcd->Init.dev_endpoints
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b05      	cmp	r3, #5
 8000814:	dc33      	bgt.n	800087e <_ZN3USB19USBInterruptHandlerEv+0x5be>
			USBx_INEP(i)->DIEPINT = 0xFB7FU;		// see p1177 for explanation: based on datasheet should be more like 0b10100100111011
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800081c:	3348      	adds	r3, #72	; 0x48
 800081e:	015b      	lsls	r3, r3, #5
 8000820:	461a      	mov	r2, r3
 8000822:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000826:	6093      	str	r3, [r2, #8]
			USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800082e:	3348      	adds	r3, #72	; 0x48
 8000830:	015b      	lsls	r3, r3, #5
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800083a:	3348      	adds	r3, #72	; 0x48
 800083c:	015b      	lsls	r3, r3, #5
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000844:	6013      	str	r3, [r2, #0]
			USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800084c:	3358      	adds	r3, #88	; 0x58
 800084e:	015b      	lsls	r3, r3, #5
 8000850:	461a      	mov	r2, r3
 8000852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000856:	6093      	str	r3, [r2, #8]
			USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800085e:	3358      	adds	r3, #88	; 0x58
 8000860:	015b      	lsls	r3, r3, #5
 8000862:	461a      	mov	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800086a:	3358      	adds	r3, #88	; 0x58
 800086c:	015b      	lsls	r3, r3, #5
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000874:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 6; i++) {				// hpcd->Init.dev_endpoints
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3301      	adds	r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e7c8      	b.n	8000810 <_ZN3USB19USBInterruptHandlerEv+0x550>
		}
		USBx_DEVICE->DAINTMSK |= 0x10001U;
 800087e:	4a9a      	ldr	r2, [pc, #616]	; (8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>)
 8000880:	4b99      	ldr	r3, [pc, #612]	; (8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>)
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000888:	61d3      	str	r3, [r2, #28]

		USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
				USB_OTG_DOEPMSK_XFRCM |
				USB_OTG_DOEPMSK_EPDM |
				USB_OTG_DOEPMSK_OTEPSPRM |
				USB_OTG_DOEPMSK_NAKM;
 800088a:	4a97      	ldr	r2, [pc, #604]	; (8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>)
 800088c:	4b96      	ldr	r3, [pc, #600]	; (8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000894:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
		USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8000898:	6153      	str	r3, [r2, #20]

		USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
				USB_OTG_DIEPMSK_XFRCM |
				USB_OTG_DIEPMSK_EPDM;
 800089a:	4a93      	ldr	r2, [pc, #588]	; (8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>)
 800089c:	4b92      	ldr	r3, [pc, #584]	; (8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>)
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	f043 030b 	orr.w	r3, r3, #11
		USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80008a4:	6113      	str	r3, [r2, #16]

		// Set Default Address to 0
		USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80008a6:	4a90      	ldr	r2, [pc, #576]	; (8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>)
 80008a8:	4b8f      	ldr	r3, [pc, #572]	; (8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80008b0:	6013      	str	r3, [r2, #0]

		// setup EP0 to receive SETUP packets
		if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) != USB_OTG_DOEPCTL_EPENA)	{
 80008b2:	4b8e      	ldr	r3, [pc, #568]	; (8000aec <_ZN3USB19USBInterruptHandlerEv+0x82c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008be:	bf14      	ite	ne
 80008c0:	2301      	movne	r3, #1
 80008c2:	2300      	moveq	r3, #0
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d014      	beq.n	80008f4 <_ZN3USB19USBInterruptHandlerEv+0x634>
			USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80008ca:	4b88      	ldr	r3, [pc, #544]	; (8000aec <_ZN3USB19USBInterruptHandlerEv+0x82c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));		// Set PKTCNT to 1
 80008d0:	4a86      	ldr	r2, [pc, #536]	; (8000aec <_ZN3USB19USBInterruptHandlerEv+0x82c>)
 80008d2:	4b86      	ldr	r3, [pc, #536]	; (8000aec <_ZN3USB19USBInterruptHandlerEv+0x82c>)
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008da:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);									// Set XFRSIZ to 24
 80008dc:	4a83      	ldr	r2, [pc, #524]	; (8000aec <_ZN3USB19USBInterruptHandlerEv+0x82c>)
 80008de:	4b83      	ldr	r3, [pc, #524]	; (8000aec <_ZN3USB19USBInterruptHandlerEv+0x82c>)
 80008e0:	691b      	ldr	r3, [r3, #16]
 80008e2:	f043 0318 	orr.w	r3, r3, #24
 80008e6:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;					// Set STUPCNT to 3
 80008e8:	4a80      	ldr	r2, [pc, #512]	; (8000aec <_ZN3USB19USBInterruptHandlerEv+0x82c>)
 80008ea:	4b80      	ldr	r3, [pc, #512]	; (8000aec <_ZN3USB19USBInterruptHandlerEv+0x82c>)
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80008f2:	6113      	str	r3, [r2, #16]
		}

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_USBRST;
 80008f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000902:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 2000 USB_OTG_GINTSTS_ENUMDNE
	// Handle Enumeration done Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_ENUMDNE))
 8000904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fee1 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d04b      	beq.n	80009ac <_ZN3USB19USBInterruptHandlerEv+0x6ec>
	{
		// Set the MPS of the IN EP based on the enumeration speed
		USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8000914:	4a76      	ldr	r2, [pc, #472]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x830>)
 8000916:	4b76      	ldr	r3, [pc, #472]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x830>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800091e:	f023 0307 	bic.w	r3, r3, #7
 8000922:	6013      	str	r3, [r2, #0]
#define DSTS_ENUMSPD_LS_PHY_6MHZ               (2U << 1)
		if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ) {
 8000924:	4b70      	ldr	r3, [pc, #448]	; (8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	f003 0306 	and.w	r3, r3, #6
 800092c:	2b04      	cmp	r3, #4
 800092e:	bf0c      	ite	eq
 8000930:	2301      	moveq	r3, #1
 8000932:	2300      	movne	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d005      	beq.n	8000946 <_ZN3USB19USBInterruptHandlerEv+0x686>
			USBx_INEP(0U)->DIEPCTL |= 3U;
 800093a:	4a6d      	ldr	r2, [pc, #436]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x830>)
 800093c:	4b6c      	ldr	r3, [pc, #432]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x830>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f043 0303 	orr.w	r3, r3, #3
 8000944:	6013      	str	r3, [r2, #0]
		}
		USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;		//  Clear global IN NAK
 8000946:	4a68      	ldr	r2, [pc, #416]	; (8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>)
 8000948:	4b67      	ldr	r3, [pc, #412]	; (8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000950:	6053      	str	r3, [r2, #4]

		// Assuming Full Speed USB and clock > 32MHz Set USB Turnaround time
		int UsbTrd = 0x6U;
 8000952:	2306      	movs	r3, #6
 8000954:	627b      	str	r3, [r7, #36]	; 0x24

		USB_OTG_FS->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800095a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000964:	60d3      	str	r3, [r2, #12]
		USB_OTG_FS->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8000966:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800096a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	029b      	lsls	r3, r3, #10
 8000974:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8000978:	4313      	orrs	r3, r2
 800097a:	60cb      	str	r3, [r1, #12]

		// Set Speed. pdev->dev_speed = 1

		USB_ActivateEndpoint(0, DIR_OUT, 0);		// Open EP0 OUT
 800097c:	2300      	movs	r3, #0
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 fa2c 	bl	8000de0 <_ZN3USB20USB_ActivateEndpointEmbh>
		USB_ActivateEndpoint(0, DIR_IN, 0);		// Open EP0 IN
 8000988:	2300      	movs	r3, #0
 800098a:	2201      	movs	r2, #1
 800098c:	2100      	movs	r1, #0
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 fa26 	bl	8000de0 <_ZN3USB20USB_ActivateEndpointEmbh>

		ep0_state = USBD_EP0_IDLE;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_ENUMDNE;
 800099c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009aa:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 10 RXFLVL
	// Handle RxQLevel Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_RXFLVL))
 80009ac:	2110      	movs	r1, #16
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 fe8e 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d03e      	beq.n	8000a38 <_ZN3USB19USBInterruptHandlerEv+0x778>
	{

		USB_OTG_FS->GINTMSK &= ~USB_OTG_GINTSTS_RXFLVL;
 80009ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f023 0310 	bic.w	r3, r3, #16
 80009c8:	6193      	str	r3, [r2, #24]

		uint32_t temp = USB_OTG_FS->GRXSTSP;		//OTG receive status debug read/OTG status read and	pop registers (OTG_GRXSTSR/OTG_GRXSTSP) not shown in SFR
 80009ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009ce:	6a1b      	ldr	r3, [r3, #32]
 80009d0:	623b      	str	r3, [r7, #32]

		// Get the endpoint number
		epnum = temp & USB_OTG_GRXSTSP_EPNUM;
 80009d2:	6a3b      	ldr	r3, [r7, #32]
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	617b      	str	r3, [r7, #20]

		if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_DATA_UPDT) {
 80009da:	6a3b      	ldr	r3, [r7, #32]
 80009dc:	0c5b      	lsrs	r3, r3, #17
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d113      	bne.n	8000a0e <_ZN3USB19USBInterruptHandlerEv+0x74e>
			if ((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 80009e6:	6a3a      	ldr	r2, [r7, #32]
 80009e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80009ec:	4013      	ands	r3, r2
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d01a      	beq.n	8000a28 <_ZN3USB19USBInterruptHandlerEv+0x768>
			{
				USB_ReadPacket(xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f103 010c 	add.w	r1, r3, #12
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	091b      	lsrs	r3, r3, #4
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 fa70 	bl	8000eec <_ZN3USB14USB_ReadPacketEPmt>
 8000a0c:	e00c      	b.n	8000a28 <_ZN3USB19USBInterruptHandlerEv+0x768>

				//xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
				//xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
			}
		}
		else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT) {
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	0c5b      	lsrs	r3, r3, #17
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d106      	bne.n	8000a28 <_ZN3USB19USBInterruptHandlerEv+0x768>
			USB_ReadPacket(xfer_buff, 8U);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	330c      	adds	r3, #12
 8000a1e:	2208      	movs	r2, #8
 8000a20:	4619      	mov	r1, r3
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 fa62 	bl	8000eec <_ZN3USB14USB_ReadPacketEPmt>
			//xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
		}

		USB_OTG_FS->GINTMSK |= USB_OTG_GINTSTS_RXFLVL;
 8000a28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6193      	str	r3, [r2, #24]
	}

	/////////////////////////////////////////////// 8 SOF
	// Handle SOF Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_SOF))
 8000a38:	2108      	movs	r1, #8
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 fe48 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d007      	beq.n	8000a56 <_ZN3USB19USBInterruptHandlerEv+0x796>
	{
		// Doesn't seem to do anything
		//HAL_PCD_SOFCallback(hpcd);

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_SOF;
 8000a46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	f003 0308 	and.w	r3, r3, #8
 8000a54:	6153      	str	r3, [r2, #20]
	}

	/* Handle Incomplete ISO IN Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_IISOIXFR))
 8000a56:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 fe38 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d007      	beq.n	8000a76 <_ZN3USB19USBInterruptHandlerEv+0x7b6>
	{
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_IISOIXFR;
 8000a66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a74:	6153      	str	r3, [r2, #20]
	}

	/* Handle Incomplete ISO OUT Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000a76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 fe28 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d007      	beq.n	8000a96 <_ZN3USB19USBInterruptHandlerEv+0x7d6>
	{
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_PXFR_INCOMPISOOUT;
 8000a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a94:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 40000000 SRQINT
	// Handle Connection event Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_SRQINT))
 8000a96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fe18 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d007      	beq.n	8000ab6 <_ZN3USB19USBInterruptHandlerEv+0x7f6>
	{
		//HAL_PCD_ConnectCallback(hpcd);		// this doesn't seem to do anything

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_SRQINT;
 8000aa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000aaa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000ab4:	6153      	str	r3, [r2, #20]
	}

	/* Handle Disconnection event Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_OTGINT))
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 fe09 	bl	80016d0 <_ZN3USB18USB_ReadInterruptsEm>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00d      	beq.n	8000ae0 <_ZN3USB19USBInterruptHandlerEv+0x820>
	{
		uint32_t temp = USB_OTG_FS->GOTGINT;
 8000ac4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	61fb      	str	r3, [r7, #28]
		if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
		{
			//HAL_PCD_DisconnectCallback(hpcd);
			//pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
		}
		USB_OTG_FS->GOTGINT |= temp;
 8000acc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000ad0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	604b      	str	r3, [r1, #4]
 8000adc:	e000      	b.n	8000ae0 <_ZN3USB19USBInterruptHandlerEv+0x820>
		return;
 8000ade:	bf00      	nop
		}
	}
#endif
	 */

}
 8000ae0:	3740      	adds	r7, #64	; 0x40
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	50000800 	.word	0x50000800
 8000aec:	50000b00 	.word	0x50000b00
 8000af0:	50000900 	.word	0x50000900

08000af4 <_ZN3USB7InitUSBEv>:



void USB::InitUSB()
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	// *********************  HAL_PCD_MspInit() in /Src/usbd_conf.c

	// USB_OTG_FS GPIO Configuration: PA8: USB_OTG_FS_SOF; PA9: USB_OTG_FS_VBUS; PA10: USB_OTG_FS_ID; PA11: USB_OTG_FS_DM; PA12: USB_OTG_FS_DP
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000afc:	4ab1      	ldr	r2, [pc, #708]	; (8000dc4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000afe:	4bb1      	ldr	r3, [pc, #708]	; (8000dc4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30

	// PA8, PA10, PA11, PA12 (NB PA9 - VBUS uses default values)
	GPIOA->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1 | GPIO_MODER_MODER12_1;					// 10: Alternate function mode
 8000b08:	4aaf      	ldr	r2, [pc, #700]	; (8000dc8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b0a:	4baf      	ldr	r3, [pc, #700]	; (8000dc8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f043 7328 	orr.w	r3, r3, #44040192	; 0x2a00000
 8000b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b16:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR10 | GPIO_OSPEEDER_OSPEEDR11 | GPIO_OSPEEDER_OSPEEDR12;		// 11: High speed
 8000b18:	4aab      	ldr	r2, [pc, #684]	; (8000dc8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b1a:	4bab      	ldr	r3, [pc, #684]	; (8000dc8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f043 737c 	orr.w	r3, r3, #66060288	; 0x3f00000
 8000b22:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000b26:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[1] |= (10 << 0) | (10 << 8) | (10 << 12) | (10 << 16);															// Alternate Function 10 is OTG_FS
 8000b28:	4aa7      	ldr	r2, [pc, #668]	; (8000dc8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b2a:	4ba7      	ldr	r3, [pc, #668]	; (8000dc8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2e:	f043 130a 	orr.w	r3, r3, #655370	; 0xa000a
 8000b32:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000b36:	6253      	str	r3, [r2, #36]	; 0x24

	RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN;				// USB OTG FS clock enable
 8000b38:	4aa2      	ldr	r2, [pc, #648]	; (8000dc4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000b3a:	4ba2      	ldr	r3, [pc, #648]	; (8000dc4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b42:	6353      	str	r3, [r2, #52]	; 0x34
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;				// Enable system configuration clock: used to manage external interrupt line connection to GPIOs
 8000b44:	4a9f      	ldr	r2, [pc, #636]	; (8000dc4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000b46:	4b9f      	ldr	r3, [pc, #636]	; (8000dc4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4e:	6453      	str	r3, [r2, #68]	; 0x44

	NVIC_SetPriority(OTG_FS_IRQn, 0);
 8000b50:	2100      	movs	r1, #0
 8000b52:	2043      	movs	r0, #67	; 0x43
 8000b54:	f7ff fb70 	bl	8000238 <NVIC_SetPriority>
	NVIC_EnableIRQ(OTG_FS_IRQn);
 8000b58:	2043      	movs	r0, #67	; 0x43
 8000b5a:	f7ff fb53 	bl	8000204 <NVIC_EnableIRQ>

	// *********************  HAL_PCD_Init() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd.c
	USB_OTG_FS->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;		// Disable global interrupts
 8000b5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	f023 0301 	bic.w	r3, r3, #1
 8000b6c:	6093      	str	r3, [r2, #8]

	// *********************  USB_CoreInit in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;		// Select FS interface (embedded Phy)
 8000b6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b7c:	60d3      	str	r3, [r2, #12]

	// *********************  USB_CoreReset() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	// Reset the USB Core (needed after USB clock settings change)
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8000b7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	0fdb      	lsrs	r3, r3, #31
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d000      	beq.n	8000b90 <_ZN3USB7InitUSBEv+0x9c>
 8000b8e:	e7f6      	b.n	8000b7e <_ZN3USB7InitUSBEv+0x8a>
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;		// Core Soft Reset
 8000b90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6113      	str	r3, [r2, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8000ba0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	bf0c      	ite	eq
 8000bae:	2301      	moveq	r3, #1
 8000bb0:	2300      	movne	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d000      	beq.n	8000bba <_ZN3USB7InitUSBEv+0xc6>
 8000bb8:	e7f2      	b.n	8000ba0 <_ZN3USB7InitUSBEv+0xac>


	// *********************  USB_CoreInit() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GCCFG |= USB_OTG_GCCFG_PWRDWN;			// Activate the transceiver in transmission/reception. When reset, the transceiver is kept in power-down. 0 = USB FS transceiver disabled; 1 = USB FS transceiver enabled
 8000bba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc8:	6393      	str	r3, [r2, #56]	; 0x38

	// *********************  USB_SetCurrentMode() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;		// Force USB device mode
 8000bca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000bd8:	60d3      	str	r3, [r2, #12]

	// Not really sure what this is doing?
	// OTG device IN endpoint transmit FIFO size register	(OTG_DIEPTXFx) (x = 1..5[FS] /8[HS], where x is the	FIFO number)
	// Bits 31:16 INEPTXFD[15:0]: IN endpoint Tx FIFO depth
	// Bits 15:0 INEPTXSA[15:0]: IN endpoint FIFOx transmit RAM start address
	for (uint8_t i = 0U; i < 15U; i++) {
 8000bda:	2300      	movs	r3, #0
 8000bdc:	75fb      	strb	r3, [r7, #23]
 8000bde:	7dfb      	ldrb	r3, [r7, #23]
 8000be0:	2b0e      	cmp	r3, #14
 8000be2:	d80b      	bhi.n	8000bfc <_ZN3USB7InitUSBEv+0x108>
		USB_OTG_FS->DIEPTXF[i] = 0U;
 8000be4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000be8:	7dfb      	ldrb	r3, [r7, #23]
 8000bea:	3340      	adds	r3, #64	; 0x40
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0U; i < 15U; i++) {
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	75fb      	strb	r3, [r7, #23]
 8000bfa:	e7f0      	b.n	8000bde <_ZN3USB7InitUSBEv+0xea>
	}


	USB_OTG_FS->GCCFG |= USB_OTG_GCCFG_VBDEN; 			// Enable HW VBUS sensing
 8000bfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0a:	6393      	str	r3, [r2, #56]	; 0x38
	*((uint32_t *)USB_OTG_FS + USB_OTG_PCGCCTL_BASE) &= ~USB_OTG_PCGCCTL_STOPCLK;		// peripheral register not in header - should be something like OTG_FS_PWRCLK->FS_PCGCCTL
 8000c0c:	4a6f      	ldr	r2, [pc, #444]	; (8000dcc <_ZN3USB7InitUSBEv+0x2d8>)
 8000c0e:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <_ZN3USB7InitUSBEv+0x2d8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f023 0301 	bic.w	r3, r3, #1
 8000c16:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_PFIVL;			// default 00: 80% of the frame interval: Indicates time within frame at which application must be notified using end of periodic frame interrupt. This can be used to determine if all the isochronous traffic for that frame is complete.
 8000c18:	4a6d      	ldr	r2, [pc, #436]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c1a:	4b6d      	ldr	r3, [pc, #436]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000c22:	6013      	str	r3, [r2, #0]

	// *********************  USB_SetDevSpeed() in  Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USBx_DEVICE->DCFG |= USB_OTG_DCFG_DSPD;				// 11: Full speed using internal FS PHY
 8000c24:	4a6a      	ldr	r2, [pc, #424]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c26:	4b6a      	ldr	r3, [pc, #424]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f043 0303 	orr.w	r3, r3, #3
 8000c2e:	6013      	str	r3, [r2, #0]

	// *********************  USB_FlushTxFifo() and USB_FlushRxFifo() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_TXFNUM_4;	// Select buffers to flush. 10000: Flush all the transmit FIFOs in device or host mode
 8000c30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3e:	6113      	str	r3, [r2, #16]
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;		// Flush the TX buffers
 8000c40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	f043 0320 	orr.w	r3, r3, #32
 8000c4e:	6113      	str	r3, [r2, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8000c50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	f003 0320 	and.w	r3, r3, #32
 8000c5a:	2b20      	cmp	r3, #32
 8000c5c:	bf0c      	ite	eq
 8000c5e:	2301      	moveq	r3, #1
 8000c60:	2300      	movne	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d000      	beq.n	8000c6a <_ZN3USB7InitUSBEv+0x176>
 8000c68:	e7f2      	b.n	8000c50 <_ZN3USB7InitUSBEv+0x15c>

	USB_OTG_FS->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8000c6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c6e:	2210      	movs	r2, #16
 8000c70:	611a      	str	r2, [r3, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8000c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	bf0c      	ite	eq
 8000c80:	2301      	moveq	r3, #1
 8000c82:	2300      	movne	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d000      	beq.n	8000c8c <_ZN3USB7InitUSBEv+0x198>
 8000c8a:	e7f2      	b.n	8000c72 <_ZN3USB7InitUSBEv+0x17e>

	// ********************* continues USB_DevInit() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	/* Clear all pending Device Interrupts */
	USBx_DEVICE->DIEPMSK = 0U;
 8000c8c:	4b50      	ldr	r3, [pc, #320]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
	USBx_DEVICE->DOEPMSK = 0U;
 8000c92:	4b4f      	ldr	r3, [pc, #316]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
	USBx_DEVICE->DAINTMSK = 0U;
 8000c98:	4b4d      	ldr	r3, [pc, #308]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]

	// Note these following commands do not visibly change anything - some of these appear to affect other registers (see p 1177)
	for (int i = 0U; i < 6; i++) {						// 6 = cfg.dev_endpoints
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	2b05      	cmp	r3, #5
 8000ca6:	dc1c      	bgt.n	8000ce2 <_ZN3USB7InitUSBEv+0x1ee>
		USBx_INEP(i)->DIEPCTL = 0U;						// shown in SFRs as FS_DIEPCTL0, DIEPCTL1, DIEPCTL2, DIEPCTL3 (??DIEPCTL4/5 not shown in SFR)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000cae:	3348      	adds	r3, #72	; 0x48
 8000cb0:	015b      	lsls	r3, r3, #5
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	6013      	str	r3, [r2, #0]
		USBx_INEP(i)->DIEPTSIZ = 0U;
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000cbe:	3348      	adds	r3, #72	; 0x48
 8000cc0:	015b      	lsls	r3, r3, #5
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6113      	str	r3, [r2, #16]
		USBx_INEP(i)->DIEPINT  = 0xFB7FU;				// OTG device IN endpoint x interrupt register
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000cce:	3348      	adds	r3, #72	; 0x48
 8000cd0:	015b      	lsls	r3, r3, #5
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000cd8:	6093      	str	r3, [r2, #8]
	for (int i = 0U; i < 6; i++) {						// 6 = cfg.dev_endpoints
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	e7df      	b.n	8000ca2 <_ZN3USB7InitUSBEv+0x1ae>
	}

	for (int i = 0U; i < 6; i++) {
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	dc1c      	bgt.n	8000d26 <_ZN3USB7InitUSBEv+0x232>
		USBx_OUTEP(i)->DOEPCTL = 0U;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000cf2:	3358      	adds	r3, #88	; 0x58
 8000cf4:	015b      	lsls	r3, r3, #5
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	6013      	str	r3, [r2, #0]
		USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000d02:	3358      	adds	r3, #88	; 0x58
 8000d04:	015b      	lsls	r3, r3, #5
 8000d06:	461a      	mov	r2, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000d12:	3358      	adds	r3, #88	; 0x58
 8000d14:	015b      	lsls	r3, r3, #5
 8000d16:	461a      	mov	r2, r3
 8000d18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000d1c:	6093      	str	r3, [r2, #8]
	for (int i = 0U; i < 6; i++) {
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	e7df      	b.n	8000ce6 <_ZN3USB7InitUSBEv+0x1f2>
	}

	USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);	// NB bit does not appear to be shown in the SFR
 8000d26:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d30:	6113      	str	r3, [r2, #16]

	USB_OTG_FS->GINTMSK = 0U;							// Disable all interrupts.
 8000d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
	USB_OTG_FS->GINTSTS = 0xBFFFFFFFU;					// Clear any pending interrupts
 8000d3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d3e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8000d42:	615a      	str	r2, [r3, #20]
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;		// Enable the Global interrupt: Receive FIFO non-empty mask
 8000d44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	6193      	str	r3, [r2, #24]

	// Enable interrupts matching to the Device mode ONLY
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |	// USB suspend; USB reset
			USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |					// Enumeration done; IN endpoints interrupt
			USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |				// OUT endpoints interrupt; Incomplete isochronous IN transfer
			USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;				// Incomplete isochronous OUT transfer; Resume/remote wakeup detected
 8000d54:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000d58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d5c:	699a      	ldr	r2, [r3, #24]
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <_ZN3USB7InitUSBEv+0x2e0>)
 8000d60:	4313      	orrs	r3, r2
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |	// USB suspend; USB reset
 8000d62:	618b      	str	r3, [r1, #24]

	//USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_SOFM;								// Start of frame
	USB_OTG_FS->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);	// Session request/new session detected; OTG interrupt
 8000d64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6193      	str	r3, [r2, #24]

	// ********************* USB_DevDisconnect() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	// As long as this bit is set, the host does not see that the device is connected, and the device does not receive signals on the USB.
	USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;				// Soft disconnect (not needed: already set by RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN)
 8000d78:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	6053      	str	r3, [r2, #4]
	//HAL_Delay(3U);

	// ********************* HAL_PCDEx_SetRxFiFo() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c
	USB_OTG_FS->GRXFSIZ = 128;		 					// RxFIFO depth
 8000d84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24

	// ********************* HAL_PCDEx_SetTxFiFo() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c
	// OTG_FS non-periodic transmit FIFO size register (Device mode) (FS_GNPTXFSIZ_Device in SFR)
	USB_OTG_FS->DIEPTXF0_HNPTXFSIZ = ((uint32_t)64 << USB_OTG_TX0FD_Pos) |		// Endpoint 0 TxFIFO depth
 8000d8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d90:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2e4>)
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
			((uint32_t)128 << USB_OTG_TX0FSA_Pos);								// Endpoint 0 transmit RAM start  address

    // Multiply Tx_Size by 2 to get higher performance
    USB_OTG_FS->DIEPTXF[0] = ((uint32_t)128 << USB_OTG_DIEPTXF_INEPTXFD_Pos) |	// IN endpoint TxFIFO depth
 8000d94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d98:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <_ZN3USB7InitUSBEv+0x2e8>)
 8000d9a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		int8_t (* OutEvent)      (uint8_t event_idx, uint8_t state);
	} USBD_CUSTOM_HID_ItfTypeDef;
	*/

    // *********************  USB_DevConnect() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
    USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f023 0302 	bic.w	r3, r3, #2
 8000da8:	6053      	str	r3, [r2, #4]

    // *********************  USB_EnableGlobalInt() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
    USB_OTG_FS->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8000daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6093      	str	r3, [r2, #8]
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	50003800 	.word	0x50003800
 8000dd0:	50000800 	.word	0x50000800
 8000dd4:	803c3800 	.word	0x803c3800
 8000dd8:	00400080 	.word	0x00400080
 8000ddc:	008000c0 	.word	0x008000c0

08000de0 <_ZN3USB20USB_ActivateEndpointEmbh>:


void USB::USB_ActivateEndpoint(uint32_t epnum, bool is_in, uint8_t eptype)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	4611      	mov	r1, r2
 8000dec:	461a      	mov	r2, r3
 8000dee:	460b      	mov	r3, r1
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	4613      	mov	r3, r2
 8000df4:	71bb      	strb	r3, [r7, #6]
	uint8_t maxpktsize = (epnum == 0 ? ep0_maxPacket : ep_maxPacket);
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_ZN3USB20USB_ActivateEndpointEmbh+0x22>
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	7a1b      	ldrb	r3, [r3, #8]
 8000e00:	e001      	b.n	8000e06 <_ZN3USB20USB_ActivateEndpointEmbh+0x26>
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	7a5b      	ldrb	r3, [r3, #9]
 8000e06:	75fb      	strb	r3, [r7, #23]

	if (is_in) {
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d034      	beq.n	8000e78 <_ZN3USB20USB_ActivateEndpointEmbh+0x98>
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (epnum & EP_ADDR_MSK));
 8000e0e:	4936      	ldr	r1, [pc, #216]	; (8000ee8 <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000e10:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000e12:	69da      	ldr	r2, [r3, #28]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	fa00 f303 	lsl.w	r3, r0, r3
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61cb      	str	r3, [r1, #28]

		if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e2c:	3348      	adds	r3, #72	; 0x48
 8000e2e:	015b      	lsls	r3, r3, #5
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	bf0c      	ite	eq
 8000e3a:	2301      	moveq	r3, #1
 8000e3c:	2300      	movne	r3, #0
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d04a      	beq.n	8000eda <_ZN3USB20USB_ActivateEndpointEmbh+0xfa>
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
					((uint32_t)eptype << 18) | (epnum << 22) |
					USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
					USB_OTG_DIEPCTL_USBAEP;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e4a:	3348      	adds	r3, #72	; 0x48
 8000e4c:	015b      	lsls	r3, r3, #5
 8000e4e:	4618      	mov	r0, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e56:	3348      	adds	r3, #72	; 0x48
 8000e58:	015b      	lsls	r3, r3, #5
 8000e5a:	681a      	ldr	r2, [r3, #0]
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
 8000e5c:	7df9      	ldrb	r1, [r7, #23]
					((uint32_t)eptype << 18) | (epnum << 22) |
 8000e5e:	79bb      	ldrb	r3, [r7, #6]
 8000e60:	049b      	lsls	r3, r3, #18
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
 8000e62:	4319      	orrs	r1, r3
					((uint32_t)eptype << 18) | (epnum << 22) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	059b      	lsls	r3, r3, #22
 8000e68:	430b      	orrs	r3, r1
					USB_OTG_DIEPCTL_USBAEP;
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
 8000e74:	6003      	str	r3, [r0, #0]
					USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
					USB_OTG_DOEPCTL_USBAEP;
		}
	}

}
 8000e76:	e030      	b.n	8000eda <_ZN3USB20USB_ActivateEndpointEmbh+0xfa>
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (epnum & EP_ADDR_MSK)) << 16);
 8000e78:	491b      	ldr	r1, [pc, #108]	; (8000ee8 <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000e7c:	69da      	ldr	r2, [r3, #28]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f303 	lsl.w	r3, r0, r3
 8000e8a:	041b      	lsls	r3, r3, #16
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61cb      	str	r3, [r1, #28]
		if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e96:	3358      	adds	r3, #88	; 0x58
 8000e98:	015b      	lsls	r3, r3, #5
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d015      	beq.n	8000eda <_ZN3USB20USB_ActivateEndpointEmbh+0xfa>
					USB_OTG_DOEPCTL_USBAEP;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000eb4:	3358      	adds	r3, #88	; 0x58
 8000eb6:	015b      	lsls	r3, r3, #5
 8000eb8:	4618      	mov	r0, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000ec0:	3358      	adds	r3, #88	; 0x58
 8000ec2:	015b      	lsls	r3, r3, #5
 8000ec4:	681a      	ldr	r2, [r3, #0]
			USBx_OUTEP(epnum)->DOEPCTL |= (maxpktsize & USB_OTG_DOEPCTL_MPSIZ) |
 8000ec6:	7df9      	ldrb	r1, [r7, #23]
					((uint32_t)eptype << 18) |
 8000ec8:	79bb      	ldrb	r3, [r7, #6]
 8000eca:	049b      	lsls	r3, r3, #18
			USBx_OUTEP(epnum)->DOEPCTL |= (maxpktsize & USB_OTG_DOEPCTL_MPSIZ) |
 8000ecc:	430b      	orrs	r3, r1
					USB_OTG_DOEPCTL_USBAEP;
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			USBx_OUTEP(epnum)->DOEPCTL |= (maxpktsize & USB_OTG_DOEPCTL_MPSIZ) |
 8000ed8:	6003      	str	r3, [r0, #0]
}
 8000eda:	bf00      	nop
 8000edc:	371c      	adds	r7, #28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	50000800 	.word	0x50000800

08000eec <_ZN3USB14USB_ReadPacketEPmt>:

// USB_ReadPacket : read a packet from the RX FIFO
void USB::USB_ReadPacket(uint32_t *dest, uint16_t len)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	80fb      	strh	r3, [r7, #6]
	uint32_t *pDest = (uint32_t *)dest;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	61fb      	str	r3, [r7, #28]
	uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	3303      	adds	r3, #3
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	617b      	str	r3, [r7, #20]

	for (uint32_t i = 0; i < count32b; i++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d20a      	bcs.n	8000f28 <_ZN3USB14USB_ReadPacketEPmt+0x3c>
	{
		*pDest = USBx_DFIFO(0U);
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <_ZN3USB14USB_ReadPacketEPmt+0x48>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	601a      	str	r2, [r3, #0]
		pDest++;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < count32b; i++)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	3301      	adds	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	e7f0      	b.n	8000f0a <_ZN3USB14USB_ReadPacketEPmt+0x1e>
	}

	//return ((void *)pDest);
}
 8000f28:	bf00      	nop
 8000f2a:	3724      	adds	r7, #36	; 0x24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	50001000 	.word	0x50001000

08000f38 <_ZN3USB15USB_WritePacketEPhmt>:

void USB::USB_WritePacket(uint8_t *src, uint32_t ch_ep_num, uint16_t len)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	807b      	strh	r3, [r7, #2]
	uint32_t *pSrc = (uint32_t *)src;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	61fb      	str	r3, [r7, #28]
	uint32_t count32b, i;

	count32b = ((uint32_t)len + 3U) / 4U;
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	3303      	adds	r3, #3
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	617b      	str	r3, [r7, #20]
	for (i = 0; i < count32b; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d20f      	bcs.n	8000f7e <_ZN3USB15USB_WritePacketEPhmt+0x46>
		USBx_DFIFO(ch_ep_num) = *pSrc;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8000f64:	3301      	adds	r3, #1
 8000f66:	031b      	lsls	r3, r3, #12
 8000f68:	461a      	mov	r2, r3
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6013      	str	r3, [r2, #0]
		pSrc++;
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	3304      	adds	r3, #4
 8000f74:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < count32b; i++) {
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	e7eb      	b.n	8000f56 <_ZN3USB15USB_WritePacketEPhmt+0x1e>
	}


}
 8000f7e:	bf00      	nop
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <_ZSt3minImERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d201      	bcs.n	8000fa4 <_ZSt3minImERKT_S2_S2_+0x1a>
	return __b;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	e000      	b.n	8000fa6 <_ZSt3minImERKT_S2_S2_+0x1c>
      return __a;
 8000fa4:	687b      	ldr	r3, [r7, #4]
    }
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <_ZN3USB18USBD_GetDescriptorE10usbRequest>:


// Descriptors in usbd_desc.c
void USB::USBD_GetDescriptor(usbRequest req)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	e883 0006 	stmia.w	r3, {r1, r2}
	uint16_t len;
	uint8_t *pbuf;
	uint32_t deviceserial0, deviceserial1, deviceserial2;

	if (usbEventNo >= 115) {
 8000fc2:	4b9b      	ldr	r3, [pc, #620]	; (8001230 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x27c>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b72      	cmp	r3, #114	; 0x72
 8000fc8:	dd01      	ble.n	8000fce <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1a>
		int susp = 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
	}

	switch (req.Value >> 8)
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	121b      	asrs	r3, r3, #8
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	2b0e      	cmp	r3, #14
 8000fd6:	f200 8126 	bhi.w	8001226 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x272>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x2c>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	0800101d 	.word	0x0800101d
 8000fe4:	08001033 	.word	0x08001033
 8000fe8:	0800105f 	.word	0x0800105f
 8000fec:	08001227 	.word	0x08001227
 8000ff0:	08001227 	.word	0x08001227
 8000ff4:	08001189 	.word	0x08001189
 8000ff8:	08001227 	.word	0x08001227
 8000ffc:	08001227 	.word	0x08001227
 8001000:	08001227 	.word	0x08001227
 8001004:	08001227 	.word	0x08001227
 8001008:	08001227 	.word	0x08001227
 800100c:	08001227 	.word	0x08001227
 8001010:	08001227 	.word	0x08001227
 8001014:	08001227 	.word	0x08001227
 8001018:	08001049 	.word	0x08001049
	{
	case USB_DESC_TYPE_DEVICE:
		//pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
		outBuff = USBD_FS_DeviceDesc;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f103 02a5 	add.w	r2, r3, #165	; 0xa5
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		outBuffSize = sizeof(USBD_FS_DeviceDesc);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2212      	movs	r2, #18
 800102c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		break;
 8001030:	e0cc      	b.n	80011cc <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x218>

	case USB_DESC_TYPE_CONFIGURATION:

		outBuff = USBD_CUSTOM_HID_CfgFSDesc;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f103 02b7 	add.w	r2, r3, #183	; 0xb7
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		outBuffSize = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2229      	movs	r2, #41	; 0x29
 8001042:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		//pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
		//pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
		break;
 8001046:	e0c1      	b.n	80011cc <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x218>

	case USB_DESC_TYPE_BOS:

		outBuff = USBD_FS_BOSDesc;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		outBuffSize = sizeof(USBD_FS_BOSDesc);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	220c      	movs	r2, #12
 8001058:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

		//pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
		break;
 800105c:	e0b6      	b.n	80011cc <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x218>

	case USB_DESC_TYPE_STRING:
		switch ((uint8_t)(req.Value)) {
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b05      	cmp	r3, #5
 8001064:	d86c      	bhi.n	8001140 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x18c>
 8001066:	a201      	add	r2, pc, #4	; (adr r2, 800106c <_ZN3USB18USBD_GetDescriptorE10usbRequest+0xb8>)
 8001068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106c:	08001085 	.word	0x08001085
 8001070:	0800109b 	.word	0x0800109b
 8001074:	080010c1 	.word	0x080010c1
 8001078:	080010e7 	.word	0x080010e7
 800107c:	08001185 	.word	0x08001185
 8001080:	08001185 	.word	0x08001185
		case USBD_IDX_LANGID_STR:
			outBuff = USBD_LangIDDesc;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f503 7283 	add.w	r2, r3, #262	; 0x106
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			outBuffSize = sizeof(USBD_LangIDDesc);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2204      	movs	r2, #4
 8001094:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			//pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
			break;
 8001098:	e075      	b.n	8001186 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1d2>
		case USBD_IDX_MFC_STR:
			outBuffSize = USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80010a0:	461a      	mov	r2, r3
 80010a2:	4964      	ldr	r1, [pc, #400]	; (8001234 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x280>)
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 f8cf 	bl	8001248 <_ZN3USB14USBD_GetStringEPhS0_>
 80010aa:	4602      	mov	r2, r0
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			outBuff = USBD_StrDesc;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f503 7285 	add.w	r2, r3, #266	; 0x10a
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			//pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
			break;
 80010be:	e062      	b.n	8001186 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1d2>
		case USBD_IDX_PRODUCT_STR:
			outBuffSize = USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80010c6:	461a      	mov	r2, r3
 80010c8:	495b      	ldr	r1, [pc, #364]	; (8001238 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x284>)
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f000 f8bc 	bl	8001248 <_ZN3USB14USBD_GetStringEPhS0_>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			outBuff = USBD_StrDesc;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f503 7285 	add.w	r2, r3, #266	; 0x10a
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			//pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
			break;
 80010e4:	e04f      	b.n	8001186 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1d2>
		case USBD_IDX_SERIAL_STR:
			// STM32 unique device ID (96 bit number starting at UID_BASE)
			deviceserial0 = *(uint32_t *) UID_BASE;
 80010e6:	4b55      	ldr	r3, [pc, #340]	; (800123c <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x288>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	623b      	str	r3, [r7, #32]
			deviceserial1 = *(uint32_t *) UID_BASE + 4;
 80010ec:	4b53      	ldr	r3, [pc, #332]	; (800123c <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x288>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3304      	adds	r3, #4
 80010f2:	61fb      	str	r3, [r7, #28]
			deviceserial2 = *(uint32_t *) UID_BASE + 8;
 80010f4:	4b51      	ldr	r3, [pc, #324]	; (800123c <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x288>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3308      	adds	r3, #8
 80010fa:	61bb      	str	r3, [r7, #24]
			deviceserial0 += deviceserial2;
 80010fc:	6a3a      	ldr	r2, [r7, #32]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4413      	add	r3, r2
 8001102:	623b      	str	r3, [r7, #32]

			if (deviceserial0 != 0)
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00f      	beq.n	800112a <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x176>
			{
				IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f103 02ee 	add.w	r2, r3, #238	; 0xee
 8001110:	2308      	movs	r3, #8
 8001112:	6a39      	ldr	r1, [r7, #32]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 f8c7 	bl	80012a8 <_ZN3USB12IntToUnicodeEmPhh>
				IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f103 02fe 	add.w	r2, r3, #254	; 0xfe
 8001120:	2304      	movs	r3, #4
 8001122:	69f9      	ldr	r1, [r7, #28]
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f8bf 	bl	80012a8 <_ZN3USB12IntToUnicodeEmPhh>
			}
			outBuff = USBD_StringSerial;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			outBuffSize = sizeof(USBD_StringSerial);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	221a      	movs	r2, #26
 800113a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			//pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
			break;
 800113e:	e022      	b.n	8001186 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1d2>
		default:
#if (USBD_SUPPORT_USER_STRING == 1U)
			//pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
			break;
#else
			USBx_INEP(0)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8001140:	4a3f      	ldr	r2, [pc, #252]	; (8001240 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x28c>)
 8001142:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x28c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114a:	6013      	str	r3, [r2, #0]

			USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800114c:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001152:	4a3c      	ldr	r2, [pc, #240]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001154:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800115c:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800115e:	4a39      	ldr	r2, [pc, #228]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	f043 0318 	orr.w	r3, r3, #24
 8001168:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800116a:	4a36      	ldr	r2, [pc, #216]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 800116c:	4b35      	ldr	r3, [pc, #212]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001174:	6113      	str	r3, [r2, #16]

			USBx_OUTEP(0)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001176:	4a33      	ldr	r2, [pc, #204]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001178:	4b32      	ldr	r3, [pc, #200]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001180:	6013      	str	r3, [r2, #0]
			return;
 8001182:	e051      	b.n	8001228 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x274>
			break;
 8001184:	bf00      	nop
#endif
		}
		break;
 8001186:	e021      	b.n	80011cc <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x218>
		case USB_DESC_TYPE_DEVICE_QUALIFIER:
			//USBD_CtlError(pdev , req);
			USBx_INEP(0)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8001188:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x28c>)
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x28c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001192:	6013      	str	r3, [r2, #0]

			USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800119a:	4a2a      	ldr	r2, [pc, #168]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011a4:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80011a6:	4a27      	ldr	r2, [pc, #156]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	f043 0318 	orr.w	r3, r3, #24
 80011b0:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80011b2:	4a24      	ldr	r2, [pc, #144]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80011bc:	6113      	str	r3, [r2, #16]

			USBx_OUTEP(0)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80011be:	4a21      	ldr	r2, [pc, #132]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c8:	6013      	str	r3, [r2, #0]

			return;
 80011ca:	e02d      	b.n	8001228 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x274>
		default:
			//USBD_CtlError(pdev , req);
			return;
	}

	if ((outBuffSize != 0U) && (req.Length != 0U)) {
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01d      	beq.n	8001212 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x25e>
 80011d6:	897b      	ldrh	r3, [r7, #10]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d01a      	beq.n	8001212 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x25e>
		ep0_state = USBD_EP0_DATA_IN;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2202      	movs	r2, #2
 80011e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		outBuffSize = std::min(outBuffSize, (uint32_t)req.Length);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3398      	adds	r3, #152	; 0x98
 80011e8:	897a      	ldrh	r2, [r7, #10]
 80011ea:	617a      	str	r2, [r7, #20]
 80011ec:	f107 0214 	add.w	r2, r7, #20
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fec9 	bl	8000f8a <_ZSt3minImERKT_S2_S2_>
 80011f8:	4603      	mov	r3, r0
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		USB_EP0StartXfer(DIR_IN, 0, outBuffSize);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001208:	2200      	movs	r2, #0
 800120a:	2101      	movs	r1, #1
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 f903 	bl	8001418 <_ZN3USB16USB_EP0StartXferEbhm>
	}

	if (req.Length == 0U) {
 8001212:	897b      	ldrh	r3, [r7, #10]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d107      	bne.n	8001228 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x274>
		USB_EP0StartXfer(DIR_IN, 0, 0);
 8001218:	2300      	movs	r3, #0
 800121a:	2200      	movs	r2, #0
 800121c:	2101      	movs	r1, #1
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 f8fa 	bl	8001418 <_ZN3USB16USB_EP0StartXferEbhm>
 8001224:	e000      	b.n	8001228 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x274>
			return;
 8001226:	bf00      	nop
	}
}
 8001228:	3728      	adds	r7, #40	; 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200006a4 	.word	0x200006a4
 8001234:	08001cb0 	.word	0x08001cb0
 8001238:	08001cbc 	.word	0x08001cbc
 800123c:	1fff7a10 	.word	0x1fff7a10
 8001240:	50000900 	.word	0x50000900
 8001244:	50000b00 	.word	0x50000b00

08001248 <_ZN3USB14USBD_GetStringEPhS0_>:

uint32_t USB::USBD_GetString(uint8_t *desc, uint8_t *unicode)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
	uint32_t idx = 2;
 8001254:	2302      	movs	r3, #2
 8001256:	617b      	str	r3, [r7, #20]

	if (desc != NULL)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d01d      	beq.n	800129a <_ZN3USB14USBD_GetStringEPhS0_+0x52>
	{
		while (*desc != '\0') {
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d011      	beq.n	800128a <_ZN3USB14USBD_GetStringEPhS0_+0x42>
			unicode[idx++] = *desc++;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	617a      	str	r2, [r7, #20]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	441a      	add	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c59      	adds	r1, r3, #1
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	7013      	strb	r3, [r2, #0]
			unicode[idx++] =  0U;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	617a      	str	r2, [r7, #20]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
		while (*desc != '\0') {
 8001288:	e7e9      	b.n	800125e <_ZN3USB14USBD_GetStringEPhS0_+0x16>
		}
		unicode[0] = idx;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	701a      	strb	r2, [r3, #0]
		unicode[1] = USB_DESC_TYPE_STRING;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3301      	adds	r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	701a      	strb	r2, [r3, #0]
	}
	return idx;
 800129a:	697b      	ldr	r3, [r7, #20]
}
 800129c:	4618      	mov	r0, r3
 800129e:	371c      	adds	r7, #28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZN3USB12IntToUnicodeEmPhh>:

void USB::IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	70fb      	strb	r3, [r7, #3]

	for (uint8_t idx = 0; idx < len; idx++) {
 80012b6:	2300      	movs	r3, #0
 80012b8:	75fb      	strb	r3, [r7, #23]
 80012ba:	7dfa      	ldrb	r2, [r7, #23]
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	429a      	cmp	r2, r3
 80012c0:	da28      	bge.n	8001314 <_ZN3USB12IntToUnicodeEmPhh+0x6c>
		if (((value >> 28)) < 0xA) {
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	0f1b      	lsrs	r3, r3, #28
 80012c6:	2b09      	cmp	r3, #9
 80012c8:	d80b      	bhi.n	80012e2 <_ZN3USB12IntToUnicodeEmPhh+0x3a>
			pbuf[2 * idx] = (value >> 28) + '0';
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	0f12      	lsrs	r2, r2, #28
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	3230      	adds	r2, #48	; 0x30
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	e00a      	b.n	80012f8 <_ZN3USB12IntToUnicodeEmPhh+0x50>
		} else {
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	461a      	mov	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	0f12      	lsrs	r2, r2, #28
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	3237      	adds	r2, #55	; 0x37
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
		}

		value = value << 4;
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	60bb      	str	r3, [r7, #8]

		pbuf[2 * idx + 1] = 0;
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	3301      	adds	r3, #1
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
	for (uint8_t idx = 0; idx < len; idx++) {
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	3301      	adds	r3, #1
 8001310:	75fb      	strb	r3, [r7, #23]
 8001312:	e7d2      	b.n	80012ba <_ZN3USB12IntToUnicodeEmPhh+0x12>
	}
}
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_ZN3USB14USBD_StdDevReqE10usbRequest>:

void USB::USBD_StdDevReq(usbRequest req)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	e883 0006 	stmia.w	r3, {r1, r2}

	uint8_t dev_addr;
	switch (req.mRequest & USB_REQ_TYPE_MASK)
 800132e:	793b      	ldrb	r3, [r7, #4]
 8001330:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001334:	2b20      	cmp	r3, #32
 8001336:	d067      	beq.n	8001408 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xe8>
 8001338:	2b40      	cmp	r3, #64	; 0x40
 800133a:	d065      	beq.n	8001408 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xe8>
 800133c:	2b00      	cmp	r3, #0
 800133e:	d000      	beq.n	8001342 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x22>
		}
		break;

		default:
			//USBD_CtlError(pdev, req);
			break;
 8001340:	e063      	b.n	800140a <_ZN3USB14USBD_StdDevReqE10usbRequest+0xea>
		switch (req.Request)
 8001342:	797b      	ldrb	r3, [r7, #5]
 8001344:	2b09      	cmp	r3, #9
 8001346:	d85d      	bhi.n	8001404 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xe4>
 8001348:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x30>)
 800134a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134e:	bf00      	nop
 8001350:	08001405 	.word	0x08001405
 8001354:	08001405 	.word	0x08001405
 8001358:	08001405 	.word	0x08001405
 800135c:	08001405 	.word	0x08001405
 8001360:	08001405 	.word	0x08001405
 8001364:	08001387 	.word	0x08001387
 8001368:	08001379 	.word	0x08001379
 800136c:	08001405 	.word	0x08001405
 8001370:	08001405 	.word	0x08001405
 8001374:	080013c5 	.word	0x080013c5
			USBD_GetDescriptor(req);
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff fe18 	bl	8000fb4 <_ZN3USB18USBD_GetDescriptorE10usbRequest>
			break;
 8001384:	e03f      	b.n	8001406 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xe6>
			dev_addr = (uint8_t)(req.Value) & 0x7FU;
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800138e:	75fb      	strb	r3, [r7, #23]
			USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8001390:	4a20      	ldr	r2, [pc, #128]	; (8001414 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf4>)
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800139a:	6013      	str	r3, [r2, #0]
			USBx_DEVICE->DCFG |= ((uint32_t)dev_addr << 4) & USB_OTG_DCFG_DAD;
 800139c:	491d      	ldr	r1, [pc, #116]	; (8001414 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf4>)
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf4>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
			ep0_state = USBD_EP0_STATUS_IN;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2204      	movs	r2, #4
 80013b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			USB_EP0StartXfer(DIR_IN, 0, 0);
 80013b6:	2300      	movs	r3, #0
 80013b8:	2200      	movs	r2, #0
 80013ba:	2101      	movs	r1, #1
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f000 f82b 	bl	8001418 <_ZN3USB16USB_EP0StartXferEbhm>
			break;
 80013c2:	e020      	b.n	8001406 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xe6>
			USB_ActivateEndpoint(req.Value, true, USBD_EP_TYPE_INTR);		// Activate in endpoint
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	4619      	mov	r1, r3
 80013c8:	2303      	movs	r3, #3
 80013ca:	2201      	movs	r2, #1
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff fd07 	bl	8000de0 <_ZN3USB20USB_ActivateEndpointEmbh>
			USB_ActivateEndpoint(req.Value, false, USBD_EP_TYPE_INTR);		// Activate out endpoint
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	4619      	mov	r1, r3
 80013d6:	2303      	movs	r3, #3
 80013d8:	2200      	movs	r2, #0
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f7ff fd00 	bl	8000de0 <_ZN3USB20USB_ActivateEndpointEmbh>
			USB_EP0StartXfer(DIR_OUT, req.Value, 2);		// FIXME maxpacket is 2 for EP 1: CUSTOM_HID_EPIN_SIZE
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	2302      	movs	r3, #2
 80013e6:	2100      	movs	r1, #0
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f000 f815 	bl	8001418 <_ZN3USB16USB_EP0StartXferEbhm>
			ep0_state = USBD_EP0_STATUS_IN;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2204      	movs	r2, #4
 80013f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			USB_EP0StartXfer(DIR_IN, 0, 0);
 80013f6:	2300      	movs	r3, #0
 80013f8:	2200      	movs	r2, #0
 80013fa:	2101      	movs	r1, #1
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 f80b 	bl	8001418 <_ZN3USB16USB_EP0StartXferEbhm>
			break;
 8001402:	e000      	b.n	8001406 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xe6>
			break;
 8001404:	bf00      	nop
		break;
 8001406:	e000      	b.n	800140a <_ZN3USB14USBD_StdDevReqE10usbRequest+0xea>
		break;
 8001408:	bf00      	nop
	}

}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	50000800 	.word	0x50000800

08001418 <_ZN3USB16USB_EP0StartXferEbhm>:

void USB::USB_EP0StartXfer(bool is_in, uint8_t epnum, uint32_t xfer_len)
{
 8001418:	b480      	push	{r7}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	460b      	mov	r3, r1
 8001424:	72fb      	strb	r3, [r7, #11]
 8001426:	4613      	mov	r3, r2
 8001428:	72bb      	strb	r3, [r7, #10]

	// IN endpoint
	if (is_in)
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a6 	beq.w	800157e <_ZN3USB16USB_EP0StartXferEbhm+0x166>
	{
		// Zero Length Packet?
		if (xfer_len == 0U) {
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d12f      	bne.n	8001498 <_ZN3USB16USB_EP0StartXferEbhm+0x80>
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001438:	7abb      	ldrb	r3, [r7, #10]
 800143a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800143e:	3348      	adds	r3, #72	; 0x48
 8001440:	015b      	lsls	r3, r3, #5
 8001442:	461a      	mov	r2, r3
 8001444:	7abb      	ldrb	r3, [r7, #10]
 8001446:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800144a:	3348      	adds	r3, #72	; 0x48
 800144c:	015b      	lsls	r3, r3, #5
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001454:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8001458:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800145a:	7abb      	ldrb	r3, [r7, #10]
 800145c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001460:	3348      	adds	r3, #72	; 0x48
 8001462:	015b      	lsls	r3, r3, #5
 8001464:	461a      	mov	r2, r3
 8001466:	7abb      	ldrb	r3, [r7, #10]
 8001468:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800146c:	3348      	adds	r3, #72	; 0x48
 800146e:	015b      	lsls	r3, r3, #5
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001476:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001478:	7abb      	ldrb	r3, [r7, #10]
 800147a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800147e:	3348      	adds	r3, #72	; 0x48
 8001480:	015b      	lsls	r3, r3, #5
 8001482:	461a      	mov	r2, r3
 8001484:	7abb      	ldrb	r3, [r7, #10]
 8001486:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800148a:	3348      	adds	r3, #72	; 0x48
 800148c:	015b      	lsls	r3, r3, #5
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	0cdb      	lsrs	r3, r3, #19
 8001492:	04db      	lsls	r3, r3, #19
 8001494:	6113      	str	r3, [r2, #16]
 8001496:	e054      	b.n	8001542 <_ZN3USB16USB_EP0StartXferEbhm+0x12a>
		} else {
			int maxPacket = (epnum == 0 ? ep0_maxPacket : ep_maxPacket);
 8001498:	7abb      	ldrb	r3, [r7, #10]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <_ZN3USB16USB_EP0StartXferEbhm+0x8c>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	7a1b      	ldrb	r3, [r3, #8]
 80014a2:	e001      	b.n	80014a8 <_ZN3USB16USB_EP0StartXferEbhm+0x90>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	7a5b      	ldrb	r3, [r3, #9]
 80014a8:	617b      	str	r3, [r7, #20]
			// Program the transfer size and packet count as follows: xfersize = N * maxpacket + short_packet pktcnt = N + (short_packet exist ? 1 : 0)
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80014aa:	7abb      	ldrb	r3, [r7, #10]
 80014ac:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014b0:	3348      	adds	r3, #72	; 0x48
 80014b2:	015b      	lsls	r3, r3, #5
 80014b4:	461a      	mov	r2, r3
 80014b6:	7abb      	ldrb	r3, [r7, #10]
 80014b8:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014bc:	3348      	adds	r3, #72	; 0x48
 80014be:	015b      	lsls	r3, r3, #5
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	0cdb      	lsrs	r3, r3, #19
 80014c4:	04db      	lsls	r3, r3, #19
 80014c6:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80014c8:	7abb      	ldrb	r3, [r7, #10]
 80014ca:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014ce:	3348      	adds	r3, #72	; 0x48
 80014d0:	015b      	lsls	r3, r3, #5
 80014d2:	461a      	mov	r2, r3
 80014d4:	7abb      	ldrb	r3, [r7, #10]
 80014d6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014da:	3348      	adds	r3, #72	; 0x48
 80014dc:	015b      	lsls	r3, r3, #5
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80014e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80014e8:	6113      	str	r3, [r2, #16]

			if (xfer_len > maxPacket) {		// currently set to 0x40
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d907      	bls.n	8001502 <_ZN3USB16USB_EP0StartXferEbhm+0xea>
				xfer_rem = xfer_len - maxPacket;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	1ad2      	subs	r2, r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				xfer_len = maxPacket;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	607b      	str	r3, [r7, #4]
			}

			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001502:	7abb      	ldrb	r3, [r7, #10]
 8001504:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001508:	3348      	adds	r3, #72	; 0x48
 800150a:	015b      	lsls	r3, r3, #5
 800150c:	461a      	mov	r2, r3
 800150e:	7abb      	ldrb	r3, [r7, #10]
 8001510:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001514:	3348      	adds	r3, #72	; 0x48
 8001516:	015b      	lsls	r3, r3, #5
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800151e:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & xfer_len);
 8001520:	7abb      	ldrb	r3, [r7, #10]
 8001522:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001526:	3348      	adds	r3, #72	; 0x48
 8001528:	015b      	lsls	r3, r3, #5
 800152a:	4619      	mov	r1, r3
 800152c:	7abb      	ldrb	r3, [r7, #10]
 800152e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001532:	3348      	adds	r3, #72	; 0x48
 8001534:	015b      	lsls	r3, r3, #5
 8001536:	691a      	ldr	r2, [r3, #16]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153e:	4313      	orrs	r3, r2
 8001540:	610b      	str	r3, [r1, #16]
		}

		/* EP enable, IN data in FIFO */
		USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001542:	7abb      	ldrb	r3, [r7, #10]
 8001544:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001548:	3348      	adds	r3, #72	; 0x48
 800154a:	015b      	lsls	r3, r3, #5
 800154c:	461a      	mov	r2, r3
 800154e:	7abb      	ldrb	r3, [r7, #10]
 8001550:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001554:	3348      	adds	r3, #72	; 0x48
 8001556:	015b      	lsls	r3, r3, #5
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800155e:	6013      	str	r3, [r2, #0]

		/* Enable the Tx FIFO Empty Interrupt for this EP */
		if (xfer_len > 0U) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d05a      	beq.n	800161c <_ZN3USB16USB_EP0StartXferEbhm+0x204>
			USBx_DEVICE->DIEPEMPMSK |= 1UL << (epnum & EP_ADDR_MSK);
 8001566:	4930      	ldr	r1, [pc, #192]	; (8001628 <_ZN3USB16USB_EP0StartXferEbhm+0x210>)
 8001568:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <_ZN3USB16USB_EP0StartXferEbhm+0x210>)
 800156a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156c:	7abb      	ldrb	r3, [r7, #10]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	2001      	movs	r0, #1
 8001574:	fa00 f303 	lsl.w	r3, r0, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	634b      	str	r3, [r1, #52]	; 0x34

		/* EP enable */
		USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
	}

}
 800157c:	e04e      	b.n	800161c <_ZN3USB16USB_EP0StartXferEbhm+0x204>
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800157e:	7abb      	ldrb	r3, [r7, #10]
 8001580:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001584:	3358      	adds	r3, #88	; 0x58
 8001586:	015b      	lsls	r3, r3, #5
 8001588:	461a      	mov	r2, r3
 800158a:	7abb      	ldrb	r3, [r7, #10]
 800158c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001590:	3358      	adds	r3, #88	; 0x58
 8001592:	015b      	lsls	r3, r3, #5
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	0cdb      	lsrs	r3, r3, #19
 8001598:	04db      	lsls	r3, r3, #19
 800159a:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800159c:	7abb      	ldrb	r3, [r7, #10]
 800159e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015a2:	3358      	adds	r3, #88	; 0x58
 80015a4:	015b      	lsls	r3, r3, #5
 80015a6:	461a      	mov	r2, r3
 80015a8:	7abb      	ldrb	r3, [r7, #10]
 80015aa:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015ae:	3358      	adds	r3, #88	; 0x58
 80015b0:	015b      	lsls	r3, r3, #5
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80015b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80015bc:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80015be:	7abb      	ldrb	r3, [r7, #10]
 80015c0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015c4:	3358      	adds	r3, #88	; 0x58
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	461a      	mov	r2, r3
 80015ca:	7abb      	ldrb	r3, [r7, #10]
 80015cc:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015d0:	3358      	adds	r3, #88	; 0x58
 80015d2:	015b      	lsls	r3, r3, #5
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015da:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & xfer_len);
 80015dc:	7abb      	ldrb	r3, [r7, #10]
 80015de:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015e2:	3358      	adds	r3, #88	; 0x58
 80015e4:	015b      	lsls	r3, r3, #5
 80015e6:	4619      	mov	r1, r3
 80015e8:	7abb      	ldrb	r3, [r7, #10]
 80015ea:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015ee:	3358      	adds	r3, #88	; 0x58
 80015f0:	015b      	lsls	r3, r3, #5
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fa:	4313      	orrs	r3, r2
 80015fc:	610b      	str	r3, [r1, #16]
		USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80015fe:	7abb      	ldrb	r3, [r7, #10]
 8001600:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001604:	3358      	adds	r3, #88	; 0x58
 8001606:	015b      	lsls	r3, r3, #5
 8001608:	461a      	mov	r2, r3
 800160a:	7abb      	ldrb	r3, [r7, #10]
 800160c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001610:	3358      	adds	r3, #88	; 0x58
 8001612:	015b      	lsls	r3, r3, #5
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	371c      	adds	r7, #28
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	50000800 	.word	0x50000800

0800162c <_ZN3USB14USB_EPSetStallEh>:


void USB::USB_EPSetStall(uint8_t epnum) {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
	if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U)) {	//
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800163e:	3348      	adds	r3, #72	; 0x48
 8001640:	015b      	lsls	r3, r3, #5
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db04      	blt.n	8001652 <_ZN3USB14USB_EPSetStallEh+0x26>
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <_ZN3USB14USB_EPSetStallEh+0x26>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <_ZN3USB14USB_EPSetStallEh+0x28>
 8001652:	2300      	movs	r3, #0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00e      	beq.n	8001676 <_ZN3USB14USB_EPSetStallEh+0x4a>
		USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800165e:	3348      	adds	r3, #72	; 0x48
 8001660:	015b      	lsls	r3, r3, #5
 8001662:	461a      	mov	r2, r3
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800166a:	3348      	adds	r3, #72	; 0x48
 800166c:	015b      	lsls	r3, r3, #5
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001674:	6013      	str	r3, [r2, #0]
	}
	USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800167c:	3348      	adds	r3, #72	; 0x48
 800167e:	015b      	lsls	r3, r3, #5
 8001680:	461a      	mov	r2, r3
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001688:	3348      	adds	r3, #72	; 0x48
 800168a:	015b      	lsls	r3, r3, #5
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001692:	6013      	str	r3, [r2, #0]

	// FIXME - cleared in USB_EP0StartXfer?
	//USB_EP0_OutStart
	USBx_OUTEP(0U)->DOEPTSIZ = 0U;			// USB_EP0_OutStart - set STUPCNT=3; PKTCNT=1; XFRSIZ=0x18
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <_ZN3USB14USB_EPSetStallEh+0xa0>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800169a:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <_ZN3USB14USB_EPSetStallEh+0xa0>)
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <_ZN3USB14USB_EPSetStallEh+0xa0>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016a4:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	f043 0318 	orr.w	r3, r3, #24
 80016b0:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80016b2:	4a06      	ldr	r2, [pc, #24]	; (80016cc <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80016bc:	6113      	str	r3, [r2, #16]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	50000b00 	.word	0x50000b00

080016d0 <_ZN3USB18USB_ReadInterruptsEm>:


bool USB::USB_ReadInterrupts(uint32_t interrupt){
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]

	if (((USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK) & interrupt) == interrupt && usbEventNo < 200) {
 80016da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	401a      	ands	r2, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	401a      	ands	r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d105      	bne.n	80016fe <_ZN3USB18USB_ReadInterruptsEm+0x2e>
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2bc7      	cmp	r3, #199	; 0xc7
 80016f8:	dc01      	bgt.n	80016fe <_ZN3USB18USB_ReadInterruptsEm+0x2e>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <_ZN3USB18USB_ReadInterruptsEm+0x30>
 80016fe:	2300      	movs	r3, #0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d012      	beq.n	800172a <_ZN3USB18USB_ReadInterruptsEm+0x5a>
		usbEvents[usbEventNo] = USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK;
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <_ZN3USB18USB_ReadInterruptsEm+0x88>)
 800171a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		usbEventNo++;
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 8001728:	701a      	strb	r2, [r3, #0]
	}

	return ((USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK) & interrupt) == interrupt;
 800172a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	401a      	ands	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	401a      	ands	r2, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	200006a4 	.word	0x200006a4
 8001758:	20000384 	.word	0x20000384

0800175c <_Z18SystemClock_Configv>:
#define PLL_M 4
#define PLL_N 144
#define PLL_P 2		//  Main PLL (PLL) division factor for main system clock can be 2 (PLL_P = 0), 4 (PLL_P = 1), 6 (PLL_P = 2), 8 (PLL_P = 3)
#define PLL_Q 6

void SystemClock_Config(void) {
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;			// Enable Power Control clock
 8001760:	4a35      	ldr	r2, [pc, #212]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 8001762:	4b35      	ldr	r3, [pc, #212]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS_0;					// Enable VOS voltage scaling - allows maximum clock speed
 800176c:	4a33      	ldr	r2, [pc, #204]	; (800183c <_Z18SystemClock_Configv+0xe0>)
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <_Z18SystemClock_Configv+0xe0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001776:	6013      	str	r3, [r2, #0]

	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));// CPACR register: set full access privileges for coprocessors
 8001778:	4a31      	ldr	r2, [pc, #196]	; (8001840 <_Z18SystemClock_Configv+0xe4>)
 800177a:	4b31      	ldr	r3, [pc, #196]	; (8001840 <_Z18SystemClock_Configv+0xe4>)
 800177c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

#ifdef USE_HSE
	RCC->CR |= RCC_CR_HSEON;					// HSE ON
 8001788:	4a2b      	ldr	r2, [pc, #172]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0);		// Wait till HSE is ready
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf0c      	ite	eq
 80017a0:	2301      	moveq	r3, #1
 80017a2:	2300      	movne	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d000      	beq.n	80017ac <_Z18SystemClock_Configv+0x50>
 80017aa:	e7f3      	b.n	8001794 <_Z18SystemClock_Configv+0x38>
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 80017ae:	4a25      	ldr	r2, [pc, #148]	; (8001844 <_Z18SystemClock_Configv+0xe8>)
 80017b0:	605a      	str	r2, [r3, #4]
	RCC->CR |= RCC_CR_HSION;					// HSI ON
	while((RCC->CR & RCC_CR_HSIRDY) == 0);		// Wait till HSI is ready
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);
#endif

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;			// HCLK = SYSCLK / 1
 80017b2:	4a21      	ldr	r2, [pc, #132]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;			// PCLK2 = HCLK / 2
 80017ba:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;			// PCLK1 = HCLK / 4
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80017d0:	6093      	str	r3, [r2, #8]
	RCC->CR |= RCC_CR_PLLON;					// Enable the main PLL
 80017d2:	4a19      	ldr	r2, [pc, #100]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017dc:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);		// Wait till the main PLL is ready
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d000      	beq.n	80017f6 <_Z18SystemClock_Configv+0x9a>
 80017f4:	e7f3      	b.n	80017de <_Z18SystemClock_Configv+0x82>

	// Configure Flash prefetch, Instruction cache, Data cache and wait state
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <_Z18SystemClock_Configv+0xec>)
 80017f8:	f240 7205 	movw	r2, #1797	; 0x705
 80017fc:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 0303 	bic.w	r3, r3, #3
 8001808:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6093      	str	r3, [r2, #8]

	// Wait till the main PLL is used as system clock source
	while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_Z18SystemClock_Configv+0xdc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <_Z18SystemClock_Configv+0xd2>
 800182c:	e7f3      	b.n	8001816 <_Z18SystemClock_Configv+0xba>

}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000
 8001840:	e000ed00 	.word	0xe000ed00
 8001844:	06402404 	.word	0x06402404
 8001848:	40023c00 	.word	0x40023c00

0800184c <_Z10InitBtnLEDv>:

void InitBtnLED()
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;			// reset and clock control - advanced high performance bus - GPIO port B
 8001850:	4a0e      	ldr	r2, [pc, #56]	; (800188c <_Z10InitBtnLEDv+0x40>)
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <_Z10InitBtnLEDv+0x40>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;			// reset and clock control - advanced high performance bus - GPIO port C
 800185c:	4a0b      	ldr	r2, [pc, #44]	; (800188c <_Z10InitBtnLEDv+0x40>)
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <_Z10InitBtnLEDv+0x40>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6313      	str	r3, [r2, #48]	; 0x30

	// configure PC13 blue button
	//GPIOC->PUPDR |= GPIO_PUPDR_PUPDR13_0;			// Set pin to pull up:  01 Pull-up; 10 Pull-down; 11 Reserved

	// PB7 is LD2 Blue
	GPIOB->MODER |= GPIO_MODER_MODER7_0;			// Set to output
 8001868:	4a09      	ldr	r2, [pc, #36]	; (8001890 <_Z10InitBtnLEDv+0x44>)
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <_Z10InitBtnLEDv+0x44>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001872:	6013      	str	r3, [r2, #0]

	// PB14 is LD3 Red
	GPIOB->MODER |= GPIO_MODER_MODER14_0;			// Set to output
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <_Z10InitBtnLEDv+0x44>)
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <_Z10InitBtnLEDv+0x44>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40020400 	.word	0x40020400

08001894 <_ZN3USBC1Ev>:
	uint16_t Length;
};



class USB {
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	721a      	strb	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2202      	movs	r2, #2
 80018a6:	725a      	strb	r2, [r3, #9]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a28      	ldr	r2, [pc, #160]	; (800194c <_ZN3USBC1Ev+0xb8>)
 80018ac:	f103 05a5 	add.w	r5, r3, #165	; 0xa5
 80018b0:	4614      	mov	r4, r2
 80018b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b4:	6028      	str	r0, [r5, #0]
 80018b6:	6069      	str	r1, [r5, #4]
 80018b8:	60aa      	str	r2, [r5, #8]
 80018ba:	60eb      	str	r3, [r5, #12]
 80018bc:	8823      	ldrh	r3, [r4, #0]
 80018be:	822b      	strh	r3, [r5, #16]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a23      	ldr	r2, [pc, #140]	; (8001950 <_ZN3USBC1Ev+0xbc>)
 80018c4:	4614      	mov	r4, r2
 80018c6:	f103 0eb7 	add.w	lr, r3, #183	; 0xb7
 80018ca:	f104 0c20 	add.w	ip, r4, #32
 80018ce:	4675      	mov	r5, lr
 80018d0:	4626      	mov	r6, r4
 80018d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80018d4:	6028      	str	r0, [r5, #0]
 80018d6:	6069      	str	r1, [r5, #4]
 80018d8:	60aa      	str	r2, [r5, #8]
 80018da:	60eb      	str	r3, [r5, #12]
 80018dc:	3410      	adds	r4, #16
 80018de:	f10e 0e10 	add.w	lr, lr, #16
 80018e2:	4564      	cmp	r4, ip
 80018e4:	d1f3      	bne.n	80018ce <_ZN3USBC1Ev+0x3a>
 80018e6:	4672      	mov	r2, lr
 80018e8:	4623      	mov	r3, r4
 80018ea:	cb03      	ldmia	r3!, {r0, r1}
 80018ec:	6010      	str	r0, [r2, #0]
 80018ee:	6051      	str	r1, [r2, #4]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	7213      	strb	r3, [r2, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a17      	ldr	r2, [pc, #92]	; (8001954 <_ZN3USBC1Ev+0xc0>)
 80018f8:	33e0      	adds	r3, #224	; 0xe0
 80018fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80018fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	33ec      	adds	r3, #236	; 0xec
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
 8001910:	615a      	str	r2, [r3, #20]
 8001912:	831a      	strh	r2, [r3, #24]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	221a      	movs	r2, #26
 8001918:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2203      	movs	r2, #3
 8001920:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <_ZN3USBC1Ev+0xc4>)
 8001928:	f503 7383 	add.w	r3, r3, #262	; 0x106
 800192c:	6810      	ldr	r0, [r2, #0]
 800192e:	6018      	str	r0, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <_ZN3USBC1Ev+0xc8>)
 8001934:	f203 330a 	addw	r3, r3, #778	; 0x30a
 8001938:	4611      	mov	r1, r2
 800193a:	224a      	movs	r2, #74	; 0x4a
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f99f 	bl	8001c80 <memcpy>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194c:	08001cdc 	.word	0x08001cdc
 8001950:	08001cf0 	.word	0x08001cf0
 8001954:	08001d1c 	.word	0x08001d1c
 8001958:	08001d28 	.word	0x08001d28
 800195c:	08001d2c 	.word	0x08001d2c

08001960 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	usb.USBInterruptHandler();
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <OTG_FS_IRQHandler+0x10>)
 8001966:	f7fe fcab 	bl	80002c0 <_ZN3USB19USBInterruptHandlerEv>
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000030 	.word	0x20000030

08001974 <NMI_Handler>:

void NMI_Handler(void) {}
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HardFault_Handler>:

void HardFault_Handler(void) {
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
	while (1) {}
 8001986:	e7fe      	b.n	8001986 <HardFault_Handler+0x4>

08001988 <MemManage_Handler>:
}

void MemManage_Handler(void) {
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	while (1) {}
 800198c:	e7fe      	b.n	800198c <MemManage_Handler+0x4>

0800198e <BusFault_Handler>:
}

void BusFault_Handler(void) {
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
	while (1) {}
 8001992:	e7fe      	b.n	8001992 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
	while (1) {}
 8001998:	e7fe      	b.n	8001998 <UsageFault_Handler+0x4>

0800199a <SVC_Handler>:
}

void SVC_Handler(void) {}
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <PendSV_Handler>:

void PendSV_Handler(void) {}
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <SysTick_Handler>:

void SysTick_Handler(void) {}
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <main>:
}


extern uint32_t SystemCoreClock;
int main(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
	SystemInit();							// Activates floating point coprocessor and resets clock
 80019da:	f000 f87b 	bl	8001ad4 <SystemInit>
	SystemClock_Config();					// Configure the clock and PLL - NB Currently done in SystemInit but will need updating for production board
 80019de:	f7ff febd 	bl	800175c <_Z18SystemClock_Configv>
	SystemCoreClockUpdate();				// Update SystemCoreClock (system clock frequency) derived from settings of oscillators, prescalers and PLL
 80019e2:	f000 f8ad 	bl	8001b40 <SystemCoreClockUpdate>
	InitBtnLED();							// PC13 blue button; PB7 is LD2 Blue; PB14 is LD3 Red
 80019e6:	f7ff ff31 	bl	800184c <_Z10InitBtnLEDv>
	usb.InitUSB();
 80019ea:	4813      	ldr	r0, [pc, #76]	; (8001a38 <main+0x64>)
 80019ec:	f7ff f882 	bl	8000af4 <_ZN3USB7InitUSBEv>

	int i = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]

	while (1)
	{
		if (GPIOC->IDR & GPIO_IDR_IDR_13) {
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <main+0x68>)
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf14      	ite	ne
 8001a00:	2301      	movne	r3, #1
 8001a02:	2300      	moveq	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00c      	beq.n	8001a24 <main+0x50>
			GPIOB->BSRR |= GPIO_BSRR_BS_7;
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <main+0x6c>)
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <main+0x6c>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a14:	6193      	str	r3, [r2, #24]
			GPIOB->BSRR |= GPIO_BSRR_BS_14;
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <main+0x6c>)
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <main+0x6c>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6193      	str	r3, [r2, #24]
 8001a22:	e005      	b.n	8001a30 <main+0x5c>
		}
		else
			GPIOB->BSRR |= GPIO_BSRR_BR_7;
 8001a24:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <main+0x6c>)
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <main+0x6c>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a2e:	6193      	str	r3, [r2, #24]
		i++;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3301      	adds	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
		if (GPIOC->IDR & GPIO_IDR_IDR_13) {
 8001a36:	e7dd      	b.n	80019f4 <main+0x20>
 8001a38:	20000030 	.word	0x20000030
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020400 	.word	0x40020400

08001a44 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d107      	bne.n	8001a64 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d102      	bne.n	8001a64 <_Z41__static_initialization_and_destruction_0ii+0x20>
USB usb;
 8001a5e:	4803      	ldr	r0, [pc, #12]	; (8001a6c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001a60:	f7ff ff18 	bl	8001894 <_ZN3USBC1Ev>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000030 	.word	0x20000030

08001a70 <_GLOBAL__sub_I_usb>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7ff ffe3 	bl	8001a44 <_Z41__static_initialization_and_destruction_0ii>
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a86:	e003      	b.n	8001a90 <LoopCopyDataInit>

08001a88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a8e:	3104      	adds	r1, #4

08001a90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a90:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a98:	d3f6      	bcc.n	8001a88 <CopyDataInit>
  ldr  r2, =_sbss
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a9c:	e002      	b.n	8001aa4 <LoopFillZerobss>

08001a9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aa0:	f842 3b04 	str.w	r3, [r2], #4

08001aa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001aa8:	d3f9      	bcc.n	8001a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aaa:	f000 f813 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aae:	f000 f8c3 	bl	8001c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab2:	f7ff ff8f 	bl	80019d4 <main>
  bx  lr    
 8001ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001abc:	08001d84 	.word	0x08001d84
  ldr  r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ac4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001ac8:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001acc:	200006a8 	.word	0x200006a8

08001ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC_IRQHandler>
	...

08001ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <SystemInit+0x60>)
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <SystemInit+0x60>)
 8001adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ae8:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <SystemInit+0x64>)
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <SystemInit+0x64>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <SystemInit+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <SystemInit+0x64>)
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <SystemInit+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <SystemInit+0x64>)
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <SystemInit+0x68>)
 8001b0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b10:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <SystemInit+0x64>)
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <SystemInit+0x64>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <SystemInit+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SystemInit+0x60>)
 8001b24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b28:	609a      	str	r2, [r3, #8]
#endif
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	24003010 	.word	0x24003010

08001b40 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	2302      	movs	r3, #2
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	2302      	movs	r3, #2
 8001b58:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <SystemCoreClockUpdate+0xe4>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d007      	beq.n	8001b7a <SystemCoreClockUpdate+0x3a>
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d009      	beq.n	8001b82 <SystemCoreClockUpdate+0x42>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d13d      	bne.n	8001bee <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <SystemCoreClockUpdate+0xe8>)
 8001b74:	4a2d      	ldr	r2, [pc, #180]	; (8001c2c <SystemCoreClockUpdate+0xec>)
 8001b76:	601a      	str	r2, [r3, #0]
      break;
 8001b78:	e03d      	b.n	8001bf6 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <SystemCoreClockUpdate+0xe8>)
 8001b7c:	4a2c      	ldr	r2, [pc, #176]	; (8001c30 <SystemCoreClockUpdate+0xf0>)
 8001b7e:	601a      	str	r2, [r3, #0]
      break;
 8001b80:	e039      	b.n	8001bf6 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <SystemCoreClockUpdate+0xe4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	0d9b      	lsrs	r3, r3, #22
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b8e:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <SystemCoreClockUpdate+0xe4>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b96:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b9e:	4a24      	ldr	r2, [pc, #144]	; (8001c30 <SystemCoreClockUpdate+0xf0>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4a1f      	ldr	r2, [pc, #124]	; (8001c24 <SystemCoreClockUpdate+0xe4>)
 8001ba8:	6852      	ldr	r2, [r2, #4]
 8001baa:	0992      	lsrs	r2, r2, #6
 8001bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e00b      	b.n	8001bd0 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <SystemCoreClockUpdate+0xec>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <SystemCoreClockUpdate+0xe4>)
 8001bc2:	6852      	ldr	r2, [r2, #4]
 8001bc4:	0992      	lsrs	r2, r2, #6
 8001bc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <SystemCoreClockUpdate+0xe4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <SystemCoreClockUpdate+0xe8>)
 8001bea:	6013      	str	r3, [r2, #0]
      break;
 8001bec:	e003      	b.n	8001bf6 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <SystemCoreClockUpdate+0xe8>)
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <SystemCoreClockUpdate+0xec>)
 8001bf2:	601a      	str	r2, [r3, #0]
      break;
 8001bf4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <SystemCoreClockUpdate+0xe4>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <SystemCoreClockUpdate+0xf4>)
 8001c02:	5cd3      	ldrb	r3, [r2, r3]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <SystemCoreClockUpdate+0xe8>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <SystemCoreClockUpdate+0xe8>)
 8001c14:	6013      	str	r3, [r2, #0]
}
 8001c16:	bf00      	nop
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	00f42400 	.word	0x00f42400
 8001c30:	007a1200 	.word	0x007a1200
 8001c34:	20000004 	.word	0x20000004

08001c38 <__libc_init_array>:
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	4e0d      	ldr	r6, [pc, #52]	; (8001c70 <__libc_init_array+0x38>)
 8001c3c:	4c0d      	ldr	r4, [pc, #52]	; (8001c74 <__libc_init_array+0x3c>)
 8001c3e:	1ba4      	subs	r4, r4, r6
 8001c40:	10a4      	asrs	r4, r4, #2
 8001c42:	2500      	movs	r5, #0
 8001c44:	42a5      	cmp	r5, r4
 8001c46:	d109      	bne.n	8001c5c <__libc_init_array+0x24>
 8001c48:	4e0b      	ldr	r6, [pc, #44]	; (8001c78 <__libc_init_array+0x40>)
 8001c4a:	4c0c      	ldr	r4, [pc, #48]	; (8001c7c <__libc_init_array+0x44>)
 8001c4c:	f000 f824 	bl	8001c98 <_init>
 8001c50:	1ba4      	subs	r4, r4, r6
 8001c52:	10a4      	asrs	r4, r4, #2
 8001c54:	2500      	movs	r5, #0
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d105      	bne.n	8001c66 <__libc_init_array+0x2e>
 8001c5a:	bd70      	pop	{r4, r5, r6, pc}
 8001c5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c60:	4798      	blx	r3
 8001c62:	3501      	adds	r5, #1
 8001c64:	e7ee      	b.n	8001c44 <__libc_init_array+0xc>
 8001c66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c6a:	4798      	blx	r3
 8001c6c:	3501      	adds	r5, #1
 8001c6e:	e7f2      	b.n	8001c56 <__libc_init_array+0x1e>
 8001c70:	08001d78 	.word	0x08001d78
 8001c74:	08001d78 	.word	0x08001d78
 8001c78:	08001d78 	.word	0x08001d78
 8001c7c:	08001d80 	.word	0x08001d80

08001c80 <memcpy>:
 8001c80:	b510      	push	{r4, lr}
 8001c82:	1e43      	subs	r3, r0, #1
 8001c84:	440a      	add	r2, r1
 8001c86:	4291      	cmp	r1, r2
 8001c88:	d100      	bne.n	8001c8c <memcpy+0xc>
 8001c8a:	bd10      	pop	{r4, pc}
 8001c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c94:	e7f7      	b.n	8001c86 <memcpy+0x6>
	...

08001c98 <_init>:
 8001c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9a:	bf00      	nop
 8001c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9e:	bc08      	pop	{r3}
 8001ca0:	469e      	mov	lr, r3
 8001ca2:	4770      	bx	lr

08001ca4 <_fini>:
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca6:	bf00      	nop
 8001ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001caa:	bc08      	pop	{r3}
 8001cac:	469e      	mov	lr, r3
 8001cae:	4770      	bx	lr
