
USB_446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b70  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08001d34  08001d34  00011d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08001df0  08001df0  00011df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001df8  08001df8  00011df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000504  20000014  08001e10  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000518  08001e10  00020518  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005fad  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ffd  00000000  00000000  00025ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001e8  00000000  00000000  00026ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000271d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000019f9  00000000  00000000  00027390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001e94  00000000  00000000  00028d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002ac1d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000688  00000000  00000000  0002ac9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002b324  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001d1c 	.word	0x08001d1c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08001d1c 	.word	0x08001d1c

08000204 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800020e:	4909      	ldr	r1, [pc, #36]	; (8000234 <NVIC_EnableIRQ+0x30>)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800021a:	f002 021f 	and.w	r2, r2, #31
 800021e:	2001      	movs	r0, #1
 8000220:	fa00 f202 	lsl.w	r2, r0, r2
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100

08000238 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	6039      	str	r1, [r7, #0]
 8000242:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000248:	2b00      	cmp	r3, #0
 800024a:	da0d      	bge.n	8000268 <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800024c:	490f      	ldr	r1, [pc, #60]	; (800028c <NVIC_SetPriority+0x54>)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	f003 030f 	and.w	r3, r3, #15
 8000258:	3b04      	subs	r3, #4
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	b2d2      	uxtb	r2, r2
 800025e:	0112      	lsls	r2, r2, #4
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	440b      	add	r3, r1
 8000264:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000266:	e00b      	b.n	8000280 <NVIC_SetPriority+0x48>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000268:	4a09      	ldr	r2, [pc, #36]	; (8000290 <NVIC_SetPriority+0x58>)
 800026a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026e:	4618      	mov	r0, r3
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	011b      	lsls	r3, r3, #4
 8000276:	b2d9      	uxtb	r1, r3
 8000278:	1813      	adds	r3, r2, r0
 800027a:	460a      	mov	r2, r1
 800027c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000ed00 	.word	0xe000ed00
 8000290:	e000e100 	.word	0xe000e100

08000294 <_ZSt3minItERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	461a      	mov	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	da01      	bge.n	80002b0 <_ZSt3minItERKT_S2_S2_+0x1c>
	return __b;
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	e000      	b.n	80002b2 <_ZSt3minItERKT_S2_S2_+0x1e>
      return __a;
 80002b0:	687b      	ldr	r3, [r7, #4]
    }
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_ZSt3minImERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80002be:	b480      	push	{r7}
 80002c0:	b083      	sub	sp, #12
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
 80002c6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d201      	bcs.n	80002d8 <_ZSt3minImERKT_S2_S2_+0x1a>
	return __b;
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	e000      	b.n	80002da <_ZSt3minImERKT_S2_S2_+0x1c>
      return __a;
 80002d8:	687b      	ldr	r3, [r7, #4]
    }
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
	...

080002e8 <_ZN3USB19USBInterruptHandlerEv>:
#include <USB.h>

void USB::USBInterruptHandler() {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b096      	sub	sp, #88	; 0x58
 80002ec:	af02      	add	r7, sp, #8
 80002ee:	6078      	str	r0, [r7, #4]

	int epnum, ep_intr, epint;

	//int interruptCode = USB_ReadInterrupts();

	if (usbEventNo >= 100) {
 80002f0:	4b9d      	ldr	r3, [pc, #628]	; (8000568 <_ZN3USB19USBInterruptHandlerEv+0x280>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b63      	cmp	r3, #99	; 0x63
 80002f6:	dd01      	ble.n	80002fc <_ZN3USB19USBInterruptHandlerEv+0x14>
		int susp = 1;
 80002f8:	2301      	movs	r3, #1
 80002fa:	647b      	str	r3, [r7, #68]	; 0x44
	}

	// Handle spurious interrupt
	if ((USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK) == 0)
 80002fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000300:	695a      	ldr	r2, [r3, #20]
 8000302:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4013      	ands	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	bf0c      	ite	eq
 800030e:	2301      	moveq	r3, #1
 8000310:	2300      	movne	r3, #0
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2b00      	cmp	r3, #0
 8000316:	f040 8466 	bne.w	8000be6 <_ZN3USB19USBInterruptHandlerEv+0x8fe>
		return;

	// Handle Mode mismatch interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_MMIS)) {
 800031a:	2102      	movs	r1, #2
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f001 fa19 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d007      	beq.n	8000338 <_ZN3USB19USBInterruptHandlerEv+0x50>
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_MMIS;
 8000328:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800032c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f003 0302 	and.w	r3, r3, #2
 8000336:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 80000 OEPINT
	// OUT endpoint interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_OEPINT)) {
 8000338:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f001 fa09 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	f000 8113 	beq.w	8000570 <_ZN3USB19USBInterruptHandlerEv+0x288>

		// Read the output endpoint interrupt register to ascertain which endpoint(s) fired an interrupt
		ep_intr = ((USBx_DEVICE->DAINT & USBx_DEVICE->DAINTMSK) & 0xFFFF0000U) >> 16; // FIXME mask unnecessary with shift right?
 800034a:	4b88      	ldr	r3, [pc, #544]	; (800056c <_ZN3USB19USBInterruptHandlerEv+0x284>)
 800034c:	699a      	ldr	r2, [r3, #24]
 800034e:	4b87      	ldr	r3, [pc, #540]	; (800056c <_ZN3USB19USBInterruptHandlerEv+0x284>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4013      	ands	r3, r2
 8000354:	0c1b      	lsrs	r3, r3, #16
 8000356:	b29b      	uxth	r3, r3
 8000358:	64fb      	str	r3, [r7, #76]	; 0x4c

		// process each endpoint in turn incrementing the epnum and checking the interrupts (ep_intr) if that endpoint fired
		epnum = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
		while (ep_intr != 0) {
 800035e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000360:	2b00      	cmp	r3, #0
 8000362:	f000 8105 	beq.w	8000570 <_ZN3USB19USBInterruptHandlerEv+0x288>
			if ((ep_intr & 1) != 0) {
 8000366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	2b00      	cmp	r3, #0
 800036e:	f000 80f4 	beq.w	800055a <_ZN3USB19USBInterruptHandlerEv+0x272>
				epint = USBx_OUTEP(epnum)->DOEPINT & USBx_DEVICE->DOEPMSK;
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000378:	3358      	adds	r3, #88	; 0x58
 800037a:	015b      	lsls	r3, r3, #5
 800037c:	689a      	ldr	r2, [r3, #8]
 800037e:	4b7b      	ldr	r3, [pc, #492]	; (800056c <_ZN3USB19USBInterruptHandlerEv+0x284>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4013      	ands	r3, r2
 8000384:	643b      	str	r3, [r7, #64]	; 0x40

				if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC) {		// Transfer completed
 8000386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000388:	f003 0301 	and.w	r3, r3, #1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d01a      	beq.n	80003c6 <_ZN3USB19USBInterruptHandlerEv+0xde>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_XFRC;				// Clear interrupt
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000396:	3358      	adds	r3, #88	; 0x58
 8000398:	015b      	lsls	r3, r3, #5
 800039a:	461a      	mov	r2, r3
 800039c:	2301      	movs	r3, #1
 800039e:	6093      	str	r3, [r2, #8]
					//(void)PCD_EP_OutXfrComplete_int(hpcd, epnum);					// Appears to lead to placeholder function, overridable in user program
					//if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
			        // STATUS PHASE completed, update ep0_state to idle
			        ep0_state = USBD_EP0_IDLE;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2200      	movs	r2, #0
 80003a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					//USBD_LL_StallEP(pdev, 0U);
				    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80003ae:	3358      	adds	r3, #88	; 0x58
 80003b0:	015b      	lsls	r3, r3, #5
 80003b2:	461a      	mov	r2, r3
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80003ba:	3358      	adds	r3, #88	; 0x58
 80003bc:	015b      	lsls	r3, r3, #5
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c4:	6013      	str	r3, [r2, #0]
				}

				if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) {		// SETUP phase done
 80003c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003c8:	f003 0308 	and.w	r3, r3, #8
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	f000 809c 	beq.w	800050a <_ZN3USB19USBInterruptHandlerEv+0x222>
					//NB psetup refers to hcpd.Setup which is an array[12] named 'setup buffer' filled by USB_OTG_GINTSTS_RXFLVL



					// Parse Setup Request containing data in xfer_buff filled by RXFLVL interrupt
					uint8_t *pdata = (uint8_t*)xfer_buff;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	330c      	adds	r3, #12
 80003d6:	613b      	str	r3, [r7, #16]
					req.mRequest     = *(uint8_t *)  (pdata);
 80003d8:	693b      	ldr	r3, [r7, #16]
 80003da:	781a      	ldrb	r2, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	701a      	strb	r2, [r3, #0]
					req.Request      = *(uint8_t *)  (pdata +  1);
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	785a      	ldrb	r2, [r3, #1]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	705a      	strb	r2, [r3, #1]
					req.Value        = SWAPBYTE      (pdata +  2);
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	3302      	adds	r3, #2
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	3303      	adds	r3, #3
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	021b      	lsls	r3, r3, #8
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	4413      	add	r3, r2
 80003fe:	b29a      	uxth	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	805a      	strh	r2, [r3, #2]
					req.Index        = SWAPBYTE      (pdata +  4);
 8000404:	693b      	ldr	r3, [r7, #16]
 8000406:	3304      	adds	r3, #4
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	b29a      	uxth	r2, r3
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	3305      	adds	r3, #5
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b29b      	uxth	r3, r3
 8000414:	021b      	lsls	r3, r3, #8
 8000416:	b29b      	uxth	r3, r3
 8000418:	4413      	add	r3, r2
 800041a:	b29a      	uxth	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	809a      	strh	r2, [r3, #4]
					req.Length       = SWAPBYTE      (pdata +  6);
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	3306      	adds	r3, #6
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b29a      	uxth	r2, r3
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	3307      	adds	r3, #7
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	b29b      	uxth	r3, r3
 8000430:	021b      	lsls	r3, r3, #8
 8000432:	b29b      	uxth	r3, r3
 8000434:	4413      	add	r3, r2
 8000436:	b29a      	uxth	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	80da      	strh	r2, [r3, #6]

					if (usbEventNo > 78) {
 800043c:	4b4a      	ldr	r3, [pc, #296]	; (8000568 <_ZN3USB19USBInterruptHandlerEv+0x280>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b4e      	cmp	r3, #78	; 0x4e
 8000442:	dd01      	ble.n	8000448 <_ZN3USB19USBInterruptHandlerEv+0x160>
						int susp = 1;
 8000444:	2301      	movs	r3, #1
 8000446:	63fb      	str	r3, [r7, #60]	; 0x3c
					}

					//pdev->ep0_data_len = pdev->request.wLength;
					ep0_state = USBD_EP0_SETUP;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2201      	movs	r2, #1
 800044c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					switch (req.mRequest & 0x1F)		// originally USBD_LL_SetupStage
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	f003 031f 	and.w	r3, r3, #31
 8000458:	2b01      	cmp	r3, #1
 800045a:	d00b      	beq.n	8000474 <_ZN3USB19USBInterruptHandlerEv+0x18c>
 800045c:	2b02      	cmp	r3, #2
 800045e:	d049      	beq.n	80004f4 <_ZN3USB19USBInterruptHandlerEv+0x20c>
 8000460:	2b00      	cmp	r3, #0
 8000462:	d000      	beq.n	8000466 <_ZN3USB19USBInterruptHandlerEv+0x17e>
						//USBD_StdEPReq(pdev, req);
						break;

					default:
						//USBD_LL_StallEP(pdev, (req.mRequest & 0x80U));
						break;
 8000464:	e049      	b.n	80004fa <_ZN3USB19USBInterruptHandlerEv+0x212>
						USBD_StdDevReq(req);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	e893 0006 	ldmia.w	r3, {r1, r2}
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 ff8f 	bl	8001390 <_ZN3USB14USBD_StdDevReqE10usbRequest>
						break;
 8000472:	e042      	b.n	80004fa <_ZN3USB19USBInterruptHandlerEv+0x212>
						if (req.mRequest == 0x21) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b21      	cmp	r3, #33	; 0x21
 800047a:	d108      	bne.n	800048e <_ZN3USB19USBInterruptHandlerEv+0x1a6>
							USB_EP0StartXfer(DIR_IN, 0, nullptr, 0);		// sends blank request back
 800047c:	2300      	movs	r3, #0
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2300      	movs	r3, #0
 8000482:	2200      	movs	r2, #0
 8000484:	2101      	movs	r1, #1
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f001 f806 	bl	8001498 <_ZN3USB16USB_EP0StartXferEbhPhm>
						break;
 800048c:	e034      	b.n	80004f8 <_ZN3USB19USBInterruptHandlerEv+0x210>
						} else if (req.mRequest == 0x81) {
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b81      	cmp	r3, #129	; 0x81
 8000494:	d130      	bne.n	80004f8 <_ZN3USB19USBInterruptHandlerEv+0x210>
							if (req.Value >> 8 == 0x22)		// 0x22 = CUSTOM_HID_REPORT_DESC
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	885b      	ldrh	r3, [r3, #2]
 800049a:	121b      	asrs	r3, r3, #8
 800049c:	2b22      	cmp	r3, #34	; 0x22
 800049e:	d12b      	bne.n	80004f8 <_ZN3USB19USBInterruptHandlerEv+0x210>
								outBuffSize = std::min((uint16_t)0x4A, req.Length);		// 0x4A = USBD_CUSTOM_HID_REPORT_DESC_SIZE
 80004a0:	234a      	movs	r3, #74	; 0x4a
 80004a2:	837b      	strh	r3, [r7, #26]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	1d9a      	adds	r2, r3, #6
 80004a8:	f107 031a 	add.w	r3, r7, #26
 80004ac:	4611      	mov	r1, r2
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fef0 	bl	8000294 <_ZSt3minItERKT_S2_S2_>
 80004b4:	4603      	mov	r3, r0
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
								outBuff = CUSTOM_HID_ReportDesc_FS;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f203 320a 	addw	r2, r3, #778	; 0x30a
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
								ep0_state = USBD_EP0_DATA_IN;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2202      	movs	r2, #2
 80004d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
								USB_EP0StartXfer(DIR_IN, 0, outBuff, outBuffSize);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	4613      	mov	r3, r2
 80004e4:	2200      	movs	r2, #0
 80004e6:	2101      	movs	r1, #1
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f000 ffd5 	bl	8001498 <_ZN3USB16USB_EP0StartXferEbhPhm>
								int susp = 1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	63bb      	str	r3, [r7, #56]	; 0x38
						break;
 80004f2:	e001      	b.n	80004f8 <_ZN3USB19USBInterruptHandlerEv+0x210>
						break;
 80004f4:	bf00      	nop
 80004f6:	e000      	b.n	80004fa <_ZN3USB19USBInterruptHandlerEv+0x212>
						break;
 80004f8:	bf00      	nop
					}

					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_STUP;				// Clear interrupt
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000500:	3358      	adds	r3, #88	; 0x58
 8000502:	015b      	lsls	r3, r3, #5
 8000504:	461a      	mov	r2, r3
 8000506:	2308      	movs	r3, #8
 8000508:	6093      	str	r3, [r2, #8]
				}

				if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS) {	// OUT token received when endpoint disabled
 800050a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800050c:	f003 0310 	and.w	r3, r3, #16
 8000510:	2b00      	cmp	r3, #0
 8000512:	d007      	beq.n	8000524 <_ZN3USB19USBInterruptHandlerEv+0x23c>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_OTEPDIS;			// Clear interrupt
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800051a:	3358      	adds	r3, #88	; 0x58
 800051c:	015b      	lsls	r3, r3, #5
 800051e:	461a      	mov	r2, r3
 8000520:	2310      	movs	r3, #16
 8000522:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {	// Status Phase Received interrupt
 8000524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000526:	f003 0320 	and.w	r3, r3, #32
 800052a:	2b00      	cmp	r3, #0
 800052c:	d007      	beq.n	800053e <_ZN3USB19USBInterruptHandlerEv+0x256>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_OTEPSPR;			// Clear interrupt
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000534:	3358      	adds	r3, #88	; 0x58
 8000536:	015b      	lsls	r3, r3, #5
 8000538:	461a      	mov	r2, r3
 800053a:	2320      	movs	r3, #32
 800053c:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK) {			// OUT NAK interrupt
 800053e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d008      	beq.n	800055a <_ZN3USB19USBInterruptHandlerEv+0x272>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_NAK;				// Clear interrupt
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800054e:	3358      	adds	r3, #88	; 0x58
 8000550:	015b      	lsls	r3, r3, #5
 8000552:	461a      	mov	r2, r3
 8000554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000558:	6093      	str	r3, [r2, #8]
				}
			}
			epnum++;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	3301      	adds	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
			ep_intr >>= 1U;
 8000560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000562:	105b      	asrs	r3, r3, #1
 8000564:	64fb      	str	r3, [r7, #76]	; 0x4c
		while (ep_intr != 0) {
 8000566:	e6fa      	b.n	800035e <_ZN3USB19USBInterruptHandlerEv+0x76>
 8000568:	20000514 	.word	0x20000514
 800056c:	50000800 	.word	0x50000800

	}

	/////////////////////////////////////////////// 40000 IEPINT
	// IN endpoint interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_IEPINT))
 8000570:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f001 f8ed 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	f000 8153 	beq.w	8000828 <_ZN3USB19USBInterruptHandlerEv+0x540>
	{

		// Read in the device interrupt bits [initially 1]
		ep_intr = (USBx_DEVICE->DAINT & USBx_DEVICE->DAINTMSK) & 0xFFFFU;
 8000582:	4ba8      	ldr	r3, [pc, #672]	; (8000824 <_ZN3USB19USBInterruptHandlerEv+0x53c>)
 8000584:	699a      	ldr	r2, [r3, #24]
 8000586:	4ba7      	ldr	r3, [pc, #668]	; (8000824 <_ZN3USB19USBInterruptHandlerEv+0x53c>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4013      	ands	r3, r2
 800058c:	b29b      	uxth	r3, r3
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c

		// process each endpoint in turn incrementing the epnum and checking the interrupts (ep_intr) if that endpoint fired
		epnum = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
		while (ep_intr != 0U) {
 8000594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000596:	2b00      	cmp	r3, #0
 8000598:	f000 8146 	beq.w	8000828 <_ZN3USB19USBInterruptHandlerEv+0x540>
			if ((ep_intr & 0x1) != 0) { // In ITR [initially true]
 800059c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	f000 8137 	beq.w	8000816 <_ZN3USB19USBInterruptHandlerEv+0x52e>
				// epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);

				// [initially 0x80]
				epint = USBx_INEP((uint32_t)epnum)->DIEPINT & (USBx_DEVICE->DIEPMSK | (((USBx_DEVICE->DIEPEMPMSK >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7));
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80005ae:	3348      	adds	r3, #72	; 0x48
 80005b0:	015b      	lsls	r3, r3, #5
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	4b9b      	ldr	r3, [pc, #620]	; (8000824 <_ZN3USB19USBInterruptHandlerEv+0x53c>)
 80005b6:	6919      	ldr	r1, [r3, #16]
 80005b8:	4b9a      	ldr	r3, [pc, #616]	; (8000824 <_ZN3USB19USBInterruptHandlerEv+0x53c>)
 80005ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	fa20 f303 	lsr.w	r3, r0, r3
 80005c6:	01db      	lsls	r3, r3, #7
 80005c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005cc:	430b      	orrs	r3, r1
 80005ce:	4013      	ands	r3, r2
 80005d0:	643b      	str	r3, [r7, #64]	; 0x40

				if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC) {
 80005d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d04c      	beq.n	8000676 <_ZN3USB19USBInterruptHandlerEv+0x38e>
					uint32_t fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	2201      	movs	r2, #1
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34
					USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80005ea:	498e      	ldr	r1, [pc, #568]	; (8000824 <_ZN3USB19USBInterruptHandlerEv+0x53c>)
 80005ec:	4b8d      	ldr	r3, [pc, #564]	; (8000824 <_ZN3USB19USBInterruptHandlerEv+0x53c>)
 80005ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4013      	ands	r3, r2
 80005f6:	634b      	str	r3, [r1, #52]	; 0x34

					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_XFRC;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80005fe:	3348      	adds	r3, #72	; 0x48
 8000600:	015b      	lsls	r3, r3, #5
 8000602:	461a      	mov	r2, r3
 8000604:	2301      	movs	r3, #1
 8000606:	6093      	str	r3, [r2, #8]


					//HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);

					if (ep0_state == USBD_EP0_DATA_IN) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800060e:	2b02      	cmp	r3, #2
 8000610:	d121      	bne.n	8000656 <_ZN3USB19USBInterruptHandlerEv+0x36e>

						USB_EPSetStall(epnum);
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f001 f849 	bl	80016b0 <_ZN3USB14USB_EPSetStallEh>

						ep0_state = USBD_EP0_STATUS_OUT;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2205      	movs	r2, #5
 8000622:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

						//HAL_PCD_EP_Receive
						xfer_buff[0] = 0;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
						//xfer_len = 0;
						outCount = 0;		// FIXME - outCount and xfer_count confusing
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
						xfer_count = 0;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						if (epnum == 0) {
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d119      	bne.n	8000676 <_ZN3USB19USBInterruptHandlerEv+0x38e>
							USB_EP0StartXfer(DIR_OUT, 0, nullptr, ep0_maxPacket);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7a1b      	ldrb	r3, [r3, #8]
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 ff22 	bl	8001498 <_ZN3USB16USB_EP0StartXferEbhPhm>
 8000654:	e00f      	b.n	8000676 <_ZN3USB19USBInterruptHandlerEv+0x38e>
						} else {
							//USB_EPStartXfer(false, epnum, nullptr, outBuffSize);
						}
					}
					else if ((ep0_state == USBD_EP0_STATUS_IN) || (ep0_state == USBD_EP0_IDLE))		// second time around
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800065c:	2b04      	cmp	r3, #4
 800065e:	d004      	beq.n	800066a <_ZN3USB19USBInterruptHandlerEv+0x382>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d105      	bne.n	8000676 <_ZN3USB19USBInterruptHandlerEv+0x38e>
					{
						USB_EPSetStall(epnum);
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f001 f81d 	bl	80016b0 <_ZN3USB14USB_EPSetStallEh>
					}
				}


				if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC) {
 8000676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000678:	f003 0308 	and.w	r3, r3, #8
 800067c:	2b00      	cmp	r3, #0
 800067e:	d007      	beq.n	8000690 <_ZN3USB19USBInterruptHandlerEv+0x3a8>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_TOC;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000686:	3348      	adds	r3, #72	; 0x48
 8000688:	015b      	lsls	r3, r3, #5
 800068a:	461a      	mov	r2, r3
 800068c:	2308      	movs	r3, #8
 800068e:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE) {
 8000690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000692:	f003 0310 	and.w	r3, r3, #16
 8000696:	2b00      	cmp	r3, #0
 8000698:	d007      	beq.n	80006aa <_ZN3USB19USBInterruptHandlerEv+0x3c2>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_ITTXFE;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80006a0:	3348      	adds	r3, #72	; 0x48
 80006a2:	015b      	lsls	r3, r3, #5
 80006a4:	461a      	mov	r2, r3
 80006a6:	2310      	movs	r3, #16
 80006a8:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE) {
 80006aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d007      	beq.n	80006c4 <_ZN3USB19USBInterruptHandlerEv+0x3dc>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_INEPNE;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80006ba:	3348      	adds	r3, #72	; 0x48
 80006bc:	015b      	lsls	r3, r3, #5
 80006be:	461a      	mov	r2, r3
 80006c0:	2340      	movs	r3, #64	; 0x40
 80006c2:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD) {
 80006c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d007      	beq.n	80006de <_ZN3USB19USBInterruptHandlerEv+0x3f6>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80006d4:	3348      	adds	r3, #72	; 0x48
 80006d6:	015b      	lsls	r3, r3, #5
 80006d8:	461a      	mov	r2, r3
 80006da:	2302      	movs	r3, #2
 80006dc:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE) {
 80006de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	f000 8096 	beq.w	8000816 <_ZN3USB19USBInterruptHandlerEv+0x52e>
					//(void)PCD_WriteEmptyTxFifo(hpcd, epnum);

					uint32_t len, len32b;
					if (outCount > outBuffSize) {			// Error
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80006f6:	429a      	cmp	r2, r3
 80006f8:	f200 8277 	bhi.w	8000bea <_ZN3USB19USBInterruptHandlerEv+0x902>
						return;
					}

					len = outBuffSize - outCount;		// outBuffSize is number of bytes to transfer; outCount is number transferred
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	60fb      	str	r3, [r7, #12]
					len = std::min(len, (uint32_t)(epnum == 0 ? ep0_maxPacket : ep_maxPacket));
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d102      	bne.n	8000718 <_ZN3USB19USBInterruptHandlerEv+0x430>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7a1b      	ldrb	r3, [r3, #8]
 8000716:	e001      	b.n	800071c <_ZN3USB19USBInterruptHandlerEv+0x434>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7a5b      	ldrb	r3, [r3, #9]
 800071c:	61fb      	str	r3, [r7, #28]
 800071e:	f107 021c 	add.w	r2, r7, #28
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4611      	mov	r1, r2
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fdc8 	bl	80002be <_ZSt3minImERKT_S2_S2_>
 800072e:	4603      	mov	r3, r0
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	60fb      	str	r3, [r7, #12]
					len32b = (len + 3U) / 4U;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3303      	adds	r3, #3
 8000738:	089b      	lsrs	r3, r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48

					while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (outCount < outBuffSize) && (outBuffSize != 0U))
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000742:	3348      	adds	r3, #72	; 0x48
 8000744:	015b      	lsls	r3, r3, #5
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	b29a      	uxth	r2, r3
 800074a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800074c:	429a      	cmp	r2, r3
 800074e:	d30e      	bcc.n	800076e <_ZN3USB19USBInterruptHandlerEv+0x486>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800075c:	429a      	cmp	r2, r3
 800075e:	d206      	bcs.n	800076e <_ZN3USB19USBInterruptHandlerEv+0x486>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_ZN3USB19USBInterruptHandlerEv+0x486>
 800076a:	2301      	movs	r3, #1
 800076c:	e000      	b.n	8000770 <_ZN3USB19USBInterruptHandlerEv+0x488>
 800076e:	2300      	movs	r3, #0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d03a      	beq.n	80007ea <_ZN3USB19USBInterruptHandlerEv+0x502>
					{
						// Write to the FIFO
						len = outBuffSize - outCount;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	60fb      	str	r3, [r7, #12]
						len = std::min(len, (uint32_t)(epnum == 0 ? ep0_maxPacket : ep_maxPacket));
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d102      	bne.n	8000790 <_ZN3USB19USBInterruptHandlerEv+0x4a8>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	7a1b      	ldrb	r3, [r3, #8]
 800078e:	e001      	b.n	8000794 <_ZN3USB19USBInterruptHandlerEv+0x4ac>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7a5b      	ldrb	r3, [r3, #9]
 8000794:	623b      	str	r3, [r7, #32]
 8000796:	f107 0220 	add.w	r2, r7, #32
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd8c 	bl	80002be <_ZSt3minImERKT_S2_S2_>
 80007a6:	4603      	mov	r3, r0
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	60fb      	str	r3, [r7, #12]
						len32b = (len + 3U) / 4U;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	3303      	adds	r3, #3
 80007b0:	089b      	lsrs	r3, r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48

						USB_WritePacket(outBuff, epnum, (uint16_t)len);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	461a      	mov	r2, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 fc38 	bl	8001038 <_ZN3USB15USB_WritePacketEPhmt>

						outBuff  += len;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	441a      	add	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
						outCount += len;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	441a      	add	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (outCount < outBuffSize) && (outBuffSize != 0U))
 80007e8:	e7a8      	b.n	800073c <_ZN3USB19USBInterruptHandlerEv+0x454>
					}

					if (outBuffSize <= outCount) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d80d      	bhi.n	8000816 <_ZN3USB19USBInterruptHandlerEv+0x52e>
						uint32_t fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	f003 030f 	and.w	r3, r3, #15
 8000800:	2201      	movs	r2, #1
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
						USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000808:	4906      	ldr	r1, [pc, #24]	; (8000824 <_ZN3USB19USBInterruptHandlerEv+0x53c>)
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <_ZN3USB19USBInterruptHandlerEv+0x53c>)
 800080c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000810:	43db      	mvns	r3, r3
 8000812:	4013      	ands	r3, r2
 8000814:	634b      	str	r3, [r1, #52]	; 0x34
					}


				}
			}
			epnum++;
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3301      	adds	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
			ep_intr >>= 1U;
 800081c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800081e:	105b      	asrs	r3, r3, #1
 8000820:	64fb      	str	r3, [r7, #76]	; 0x4c
		while (ep_intr != 0U) {
 8000822:	e6b7      	b.n	8000594 <_ZN3USB19USBInterruptHandlerEv+0x2ac>
 8000824:	50000800 	.word	0x50000800

	}

	/////////////////////////////////////////////// 80000000 USB_OTG_GINTSTS_WKUINT
	// Handle Resume Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_WKUINT))
 8000828:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 ff91 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00d      	beq.n	8000854 <_ZN3USB19USBInterruptHandlerEv+0x56c>
	{
		// Clear the Remote Wake-up Signaling
		USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000838:	4aad      	ldr	r2, [pc, #692]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 800083a:	4bad      	ldr	r3, [pc, #692]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f023 0301 	bic.w	r3, r3, #1
 8000842:	6053      	str	r3, [r2, #4]

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_WKUINT;
 8000844:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000848:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000852:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 800 USBSUSP
	// Handle Suspend Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_USBSUSP))
 8000854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 ff7b 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d018      	beq.n	8000896 <_ZN3USB19USBInterruptHandlerEv+0x5ae>
	{

		if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000864:	4ba2      	ldr	r3, [pc, #648]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b01      	cmp	r3, #1
 800086e:	bf0c      	ite	eq
 8000870:	2301      	moveq	r3, #1
 8000872:	2300      	movne	r3, #0
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d005      	beq.n	8000886 <_ZN3USB19USBInterruptHandlerEv+0x59e>
		{
			//USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);		// stores status of suspend pdev->dev_state  = USBD_STATE_SUSPENDED
			USBx_PCGCCTL |= USB_OTG_PCGCCTL_STOPCLK;
 800087a:	4a9e      	ldr	r2, [pc, #632]	; (8000af4 <_ZN3USB19USBInterruptHandlerEv+0x80c>)
 800087c:	4b9d      	ldr	r3, [pc, #628]	; (8000af4 <_ZN3USB19USBInterruptHandlerEv+0x80c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6013      	str	r3, [r2, #0]
		}
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_USBSUSP;
 8000886:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800088a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000894:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 1000 USB_OTG_GINTSTS_USBRST
	// Handle Reset Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_USBRST))
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 ff5a 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f000 8094 	beq.w	80009d0 <_ZN3USB19USBInterruptHandlerEv+0x6e8>
	{
		USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80008a8:	4a91      	ldr	r2, [pc, #580]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 80008aa:	4b91      	ldr	r3, [pc, #580]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f023 0301 	bic.w	r3, r3, #1
 80008b2:	6053      	str	r3, [r2, #4]

		// USB_FlushTxFifo
		USB_OTG_FS->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (0x10 << 6));
 80008b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008b8:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80008bc:	611a      	str	r2, [r3, #16]
		while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80008be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008c2:	691b      	ldr	r3, [r3, #16]
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	2b20      	cmp	r3, #32
 80008ca:	bf0c      	ite	eq
 80008cc:	2301      	moveq	r3, #1
 80008ce:	2300      	movne	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d000      	beq.n	80008d8 <_ZN3USB19USBInterruptHandlerEv+0x5f0>
 80008d6:	e7f2      	b.n	80008be <_ZN3USB19USBInterruptHandlerEv+0x5d6>

		for (int i = 0; i < 6; i++) {				// hpcd->Init.dev_endpoints
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	2b05      	cmp	r3, #5
 80008e0:	dc33      	bgt.n	800094a <_ZN3USB19USBInterruptHandlerEv+0x662>
			USBx_INEP(i)->DIEPINT = 0xFB7FU;		// see p1177 for explanation: based on datasheet should be more like 0b10100100111011
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80008e8:	3348      	adds	r3, #72	; 0x48
 80008ea:	015b      	lsls	r3, r3, #5
 80008ec:	461a      	mov	r2, r3
 80008ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80008f2:	6093      	str	r3, [r2, #8]
			USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80008fa:	3348      	adds	r3, #72	; 0x48
 80008fc:	015b      	lsls	r3, r3, #5
 80008fe:	461a      	mov	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000906:	3348      	adds	r3, #72	; 0x48
 8000908:	015b      	lsls	r3, r3, #5
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000910:	6013      	str	r3, [r2, #0]
			USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000918:	3358      	adds	r3, #88	; 0x58
 800091a:	015b      	lsls	r3, r3, #5
 800091c:	461a      	mov	r2, r3
 800091e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000922:	6093      	str	r3, [r2, #8]
			USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800092a:	3358      	adds	r3, #88	; 0x58
 800092c:	015b      	lsls	r3, r3, #5
 800092e:	461a      	mov	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000936:	3358      	adds	r3, #88	; 0x58
 8000938:	015b      	lsls	r3, r3, #5
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000940:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 6; i++) {				// hpcd->Init.dev_endpoints
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	3301      	adds	r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	e7c8      	b.n	80008dc <_ZN3USB19USBInterruptHandlerEv+0x5f4>
		}
		USBx_DEVICE->DAINTMSK |= 0x10001U;
 800094a:	4a69      	ldr	r2, [pc, #420]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 800094c:	4b68      	ldr	r3, [pc, #416]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000954:	61d3      	str	r3, [r2, #28]

		USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
				USB_OTG_DOEPMSK_XFRCM |
				USB_OTG_DOEPMSK_EPDM |
				USB_OTG_DOEPMSK_OTEPSPRM |
				USB_OTG_DOEPMSK_NAKM;
 8000956:	4a66      	ldr	r2, [pc, #408]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 8000958:	4b65      	ldr	r3, [pc, #404]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000960:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
		USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8000964:	6153      	str	r3, [r2, #20]

		USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
				USB_OTG_DIEPMSK_XFRCM |
				USB_OTG_DIEPMSK_EPDM;
 8000966:	4a62      	ldr	r2, [pc, #392]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 8000968:	4b61      	ldr	r3, [pc, #388]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	f043 030b 	orr.w	r3, r3, #11
		USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8000970:	6113      	str	r3, [r2, #16]

		// Set Default Address to 0
		USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000972:	4a5f      	ldr	r2, [pc, #380]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 8000974:	4b5e      	ldr	r3, [pc, #376]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800097c:	6013      	str	r3, [r2, #0]

		// setup EP0 to receive SETUP packets
		if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) != USB_OTG_DOEPCTL_EPENA)	{
 800097e:	4b5e      	ldr	r3, [pc, #376]	; (8000af8 <_ZN3USB19USBInterruptHandlerEv+0x810>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800098a:	bf14      	ite	ne
 800098c:	2301      	movne	r3, #1
 800098e:	2300      	moveq	r3, #0
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d014      	beq.n	80009c0 <_ZN3USB19USBInterruptHandlerEv+0x6d8>
			USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8000996:	4b58      	ldr	r3, [pc, #352]	; (8000af8 <_ZN3USB19USBInterruptHandlerEv+0x810>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));		// Set PKTCNT to 1
 800099c:	4a56      	ldr	r2, [pc, #344]	; (8000af8 <_ZN3USB19USBInterruptHandlerEv+0x810>)
 800099e:	4b56      	ldr	r3, [pc, #344]	; (8000af8 <_ZN3USB19USBInterruptHandlerEv+0x810>)
 80009a0:	691b      	ldr	r3, [r3, #16]
 80009a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009a6:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);									// Set XFRSIZ to 24
 80009a8:	4a53      	ldr	r2, [pc, #332]	; (8000af8 <_ZN3USB19USBInterruptHandlerEv+0x810>)
 80009aa:	4b53      	ldr	r3, [pc, #332]	; (8000af8 <_ZN3USB19USBInterruptHandlerEv+0x810>)
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	f043 0318 	orr.w	r3, r3, #24
 80009b2:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;					// Set STUPCNT to 3
 80009b4:	4a50      	ldr	r2, [pc, #320]	; (8000af8 <_ZN3USB19USBInterruptHandlerEv+0x810>)
 80009b6:	4b50      	ldr	r3, [pc, #320]	; (8000af8 <_ZN3USB19USBInterruptHandlerEv+0x810>)
 80009b8:	691b      	ldr	r3, [r3, #16]
 80009ba:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80009be:	6113      	str	r3, [r2, #16]
		}

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_USBRST;
 80009c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ce:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 2000 USB_OTG_GINTSTS_ENUMDNE
	// Handle Enumeration done Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_ENUMDNE))
 80009d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 febd 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d04b      	beq.n	8000a78 <_ZN3USB19USBInterruptHandlerEv+0x790>
	{
		// Set the MPS of the IN EP based on the enumeration speed
		USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80009e0:	4a46      	ldr	r2, [pc, #280]	; (8000afc <_ZN3USB19USBInterruptHandlerEv+0x814>)
 80009e2:	4b46      	ldr	r3, [pc, #280]	; (8000afc <_ZN3USB19USBInterruptHandlerEv+0x814>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80009ea:	f023 0307 	bic.w	r3, r3, #7
 80009ee:	6013      	str	r3, [r2, #0]
#define DSTS_ENUMSPD_LS_PHY_6MHZ               (2U << 1)
		if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ) {
 80009f0:	4b3f      	ldr	r3, [pc, #252]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f003 0306 	and.w	r3, r3, #6
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	bf0c      	ite	eq
 80009fc:	2301      	moveq	r3, #1
 80009fe:	2300      	movne	r3, #0
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d005      	beq.n	8000a12 <_ZN3USB19USBInterruptHandlerEv+0x72a>
			USBx_INEP(0U)->DIEPCTL |= 3U;
 8000a06:	4a3d      	ldr	r2, [pc, #244]	; (8000afc <_ZN3USB19USBInterruptHandlerEv+0x814>)
 8000a08:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <_ZN3USB19USBInterruptHandlerEv+0x814>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f043 0303 	orr.w	r3, r3, #3
 8000a10:	6013      	str	r3, [r2, #0]
		}
		USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;		//  Clear global IN NAK
 8000a12:	4a37      	ldr	r2, [pc, #220]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 8000a14:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <_ZN3USB19USBInterruptHandlerEv+0x808>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1c:	6053      	str	r3, [r2, #4]

		// Assuming Full Speed USB and clock > 32MHz Set USB Turnaround time
		int UsbTrd = 0x6U;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c

		USB_OTG_FS->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000a22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000a30:	60d3      	str	r3, [r2, #12]
		USB_OTG_FS->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8000a32:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000a36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3e:	029b      	lsls	r3, r3, #10
 8000a40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8000a44:	4313      	orrs	r3, r2
 8000a46:	60cb      	str	r3, [r1, #12]

		// Set Speed. pdev->dev_speed = 1

		USB_ActivateEndpoint(0, DIR_OUT, 0);		// Open EP0 OUT
 8000a48:	2300      	movs	r3, #0
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 fa46 	bl	8000ee0 <_ZN3USB20USB_ActivateEndpointEmbh>
		USB_ActivateEndpoint(0, DIR_IN, 0);		// Open EP0 IN
 8000a54:	2300      	movs	r3, #0
 8000a56:	2201      	movs	r2, #1
 8000a58:	2100      	movs	r1, #0
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 fa40 	bl	8000ee0 <_ZN3USB20USB_ActivateEndpointEmbh>

		ep0_state = USBD_EP0_IDLE;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_ENUMDNE;
 8000a68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a76:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 10 RXFLVL
	// Handle RxQLevel Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_RXFLVL))
 8000a78:	2110      	movs	r1, #16
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 fe6a 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d05c      	beq.n	8000b40 <_ZN3USB19USBInterruptHandlerEv+0x858>
	{

		USB_OTG_FS->GINTMSK &= ~USB_OTG_GINTSTS_RXFLVL;
 8000a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f023 0310 	bic.w	r3, r3, #16
 8000a94:	6193      	str	r3, [r2, #24]

		uint32_t temp = USB_OTG_FS->GRXSTSP;		//OTG receive status debug read/OTG status read and	pop registers (OTG_GRXSTSR/OTG_GRXSTSP) not shown in SFR
 8000a96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a9a:	6a1b      	ldr	r3, [r3, #32]
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28

		// Get the endpoint number
		epnum = temp & USB_OTG_GRXSTSP_EPNUM;
 8000a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	617b      	str	r3, [r7, #20]

		if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_DATA_UPDT) {
 8000aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa8:	0c5b      	lsrs	r3, r3, #17
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d126      	bne.n	8000b00 <_ZN3USB19USBInterruptHandlerEv+0x818>
			if ((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8000ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ab4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d038      	beq.n	8000b30 <_ZN3USB19USBInterruptHandlerEv+0x848>
			{
				USB_ReadPacket(xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f103 010c 	add.w	r1, r3, #12
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 fa8a 	bl	8000fec <_ZN3USB14USB_ReadPacketEPmt>

				//xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
				xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae0:	091b      	lsrs	r3, r3, #4
 8000ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ae6:	441a      	add	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000aee:	e01f      	b.n	8000b30 <_ZN3USB19USBInterruptHandlerEv+0x848>
 8000af0:	50000800 	.word	0x50000800
 8000af4:	50000e00 	.word	0x50000e00
 8000af8:	50000b00 	.word	0x50000b00
 8000afc:	50000900 	.word	0x50000900
			}
		}
		else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT) {
 8000b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b02:	0c5b      	lsrs	r3, r3, #17
 8000b04:	f003 030f 	and.w	r3, r3, #15
 8000b08:	2b06      	cmp	r3, #6
 8000b0a:	d111      	bne.n	8000b30 <_ZN3USB19USBInterruptHandlerEv+0x848>
			USB_ReadPacket(xfer_buff, 8U);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	330c      	adds	r3, #12
 8000b10:	2208      	movs	r2, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 fa69 	bl	8000fec <_ZN3USB14USB_ReadPacketEPmt>
			xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b22:	091b      	lsrs	r3, r3, #4
 8000b24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b28:	441a      	add	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		}

		USB_OTG_FS->GINTMSK |= USB_OTG_GINTSTS_RXFLVL;
 8000b30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	6193      	str	r3, [r2, #24]
	}

	/////////////////////////////////////////////// 8 SOF
	// Handle SOF Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_SOF))
 8000b40:	2108      	movs	r1, #8
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 fe06 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d007      	beq.n	8000b5e <_ZN3USB19USBInterruptHandlerEv+0x876>
	{
		// Doesn't seem to do anything
		//HAL_PCD_SOFCallback(hpcd);

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_SOF;
 8000b4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	6153      	str	r3, [r2, #20]
	}

	/* Handle Incomplete ISO IN Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_IISOIXFR))
 8000b5e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fdf6 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d007      	beq.n	8000b7e <_ZN3USB19USBInterruptHandlerEv+0x896>
	{
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_IISOIXFR;
 8000b6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7c:	6153      	str	r3, [r2, #20]
	}

	/* Handle Incomplete ISO OUT Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000b7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 fde6 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d007      	beq.n	8000b9e <_ZN3USB19USBInterruptHandlerEv+0x8b6>
	{
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_PXFR_INCOMPISOOUT;
 8000b8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9c:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 40000000 SRQINT
	// Handle Connection event Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_SRQINT))
 8000b9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 fdd6 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d007      	beq.n	8000bbe <_ZN3USB19USBInterruptHandlerEv+0x8d6>
	{
		//HAL_PCD_ConnectCallback(hpcd);		// this doesn't seem to do anything

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_SRQINT;
 8000bae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bbc:	6153      	str	r3, [r2, #20]
	}

	/* Handle Disconnection event Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_OTGINT))
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 fdc7 	bl	8001754 <_ZN3USB18USB_ReadInterruptsEm>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00f      	beq.n	8000bec <_ZN3USB19USBInterruptHandlerEv+0x904>
	{
		uint32_t temp = USB_OTG_FS->GOTGINT;
 8000bcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
		if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
		{
			//HAL_PCD_DisconnectCallback(hpcd);
			//pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
		}
		USB_OTG_FS->GOTGINT |= temp;
 8000bd4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000bd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	4313      	orrs	r3, r2
 8000be2:	604b      	str	r3, [r1, #4]
 8000be4:	e002      	b.n	8000bec <_ZN3USB19USBInterruptHandlerEv+0x904>
		return;
 8000be6:	bf00      	nop
 8000be8:	e000      	b.n	8000bec <_ZN3USB19USBInterruptHandlerEv+0x904>
						return;
 8000bea:	bf00      	nop
		}
	}
#endif
	 */

}
 8000bec:	3750      	adds	r7, #80	; 0x50
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop

08000bf4 <_ZN3USB7InitUSBEv>:



void USB::InitUSB()
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	// *********************  HAL_PCD_MspInit() in /Src/usbd_conf.c

	// USB_OTG_FS GPIO Configuration: PA8: USB_OTG_FS_SOF; PA9: USB_OTG_FS_VBUS; PA10: USB_OTG_FS_ID; PA11: USB_OTG_FS_DM; PA12: USB_OTG_FS_DP
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000bfc:	4ab1      	ldr	r2, [pc, #708]	; (8000ec4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000bfe:	4bb1      	ldr	r3, [pc, #708]	; (8000ec4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30

	// PA8, PA10, PA11, PA12 (NB PA9 - VBUS uses default values)
	GPIOA->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1 | GPIO_MODER_MODER12_1;					// 10: Alternate function mode
 8000c08:	4aaf      	ldr	r2, [pc, #700]	; (8000ec8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000c0a:	4baf      	ldr	r3, [pc, #700]	; (8000ec8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f043 7328 	orr.w	r3, r3, #44040192	; 0x2a00000
 8000c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c16:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR10 | GPIO_OSPEEDER_OSPEEDR11 | GPIO_OSPEEDER_OSPEEDR12;		// 11: High speed
 8000c18:	4aab      	ldr	r2, [pc, #684]	; (8000ec8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000c1a:	4bab      	ldr	r3, [pc, #684]	; (8000ec8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f043 737c 	orr.w	r3, r3, #66060288	; 0x3f00000
 8000c22:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000c26:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[1] |= (10 << 0) | (10 << 8) | (10 << 12) | (10 << 16);															// Alternate Function 10 is OTG_FS
 8000c28:	4aa7      	ldr	r2, [pc, #668]	; (8000ec8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000c2a:	4ba7      	ldr	r3, [pc, #668]	; (8000ec8 <_ZN3USB7InitUSBEv+0x2d4>)
 8000c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2e:	f043 130a 	orr.w	r3, r3, #655370	; 0xa000a
 8000c32:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000c36:	6253      	str	r3, [r2, #36]	; 0x24

	RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN;				// USB OTG FS clock enable
 8000c38:	4aa2      	ldr	r2, [pc, #648]	; (8000ec4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000c3a:	4ba2      	ldr	r3, [pc, #648]	; (8000ec4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c42:	6353      	str	r3, [r2, #52]	; 0x34
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;				// Enable system configuration clock: used to manage external interrupt line connection to GPIOs
 8000c44:	4a9f      	ldr	r2, [pc, #636]	; (8000ec4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000c46:	4b9f      	ldr	r3, [pc, #636]	; (8000ec4 <_ZN3USB7InitUSBEv+0x2d0>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4e:	6453      	str	r3, [r2, #68]	; 0x44

	NVIC_SetPriority(OTG_FS_IRQn, 0);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2043      	movs	r0, #67	; 0x43
 8000c54:	f7ff faf0 	bl	8000238 <NVIC_SetPriority>
	NVIC_EnableIRQ(OTG_FS_IRQn);
 8000c58:	2043      	movs	r0, #67	; 0x43
 8000c5a:	f7ff fad3 	bl	8000204 <NVIC_EnableIRQ>

	// *********************  HAL_PCD_Init() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd.c
	USB_OTG_FS->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;		// Disable global interrupts
 8000c5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 0301 	bic.w	r3, r3, #1
 8000c6c:	6093      	str	r3, [r2, #8]

	// *********************  USB_CoreInit in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;		// Select FS interface (embedded Phy)
 8000c6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7c:	60d3      	str	r3, [r2, #12]

	// *********************  USB_CoreReset() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	// Reset the USB Core (needed after USB clock settings change)
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8000c7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	0fdb      	lsrs	r3, r3, #31
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d000      	beq.n	8000c90 <_ZN3USB7InitUSBEv+0x9c>
 8000c8e:	e7f6      	b.n	8000c7e <_ZN3USB7InitUSBEv+0x8a>
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;		// Core Soft Reset
 8000c90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6113      	str	r3, [r2, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8000ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	bf0c      	ite	eq
 8000cae:	2301      	moveq	r3, #1
 8000cb0:	2300      	movne	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d000      	beq.n	8000cba <_ZN3USB7InitUSBEv+0xc6>
 8000cb8:	e7f2      	b.n	8000ca0 <_ZN3USB7InitUSBEv+0xac>


	// *********************  USB_CoreInit() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GCCFG |= USB_OTG_GCCFG_PWRDWN;			// Activate the transceiver in transmission/reception. When reset, the transceiver is kept in power-down. 0 = USB FS transceiver disabled; 1 = USB FS transceiver enabled
 8000cba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc8:	6393      	str	r3, [r2, #56]	; 0x38

	// *********************  USB_SetCurrentMode() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;		// Force USB device mode
 8000cca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000cd8:	60d3      	str	r3, [r2, #12]

	// Not really sure what this is doing?
	// OTG device IN endpoint transmit FIFO size register	(OTG_DIEPTXFx) (x = 1..5[FS] /8[HS], where x is the	FIFO number)
	// Bits 31:16 INEPTXFD[15:0]: IN endpoint Tx FIFO depth
	// Bits 15:0 INEPTXSA[15:0]: IN endpoint FIFOx transmit RAM start address
	for (uint8_t i = 0U; i < 15U; i++) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	75fb      	strb	r3, [r7, #23]
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	2b0e      	cmp	r3, #14
 8000ce2:	d80b      	bhi.n	8000cfc <_ZN3USB7InitUSBEv+0x108>
		USB_OTG_FS->DIEPTXF[i] = 0U;
 8000ce4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	3340      	adds	r3, #64	; 0x40
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0U; i < 15U; i++) {
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	75fb      	strb	r3, [r7, #23]
 8000cfa:	e7f0      	b.n	8000cde <_ZN3USB7InitUSBEv+0xea>
	}


	USB_OTG_FS->GCCFG |= USB_OTG_GCCFG_VBDEN; 			// Enable HW VBUS sensing
 8000cfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0a:	6393      	str	r3, [r2, #56]	; 0x38
	*((uint32_t *)USB_OTG_FS + USB_OTG_PCGCCTL_BASE) &= ~USB_OTG_PCGCCTL_STOPCLK;		// peripheral register not in header - should be something like OTG_FS_PWRCLK->FS_PCGCCTL
 8000d0c:	4a6f      	ldr	r2, [pc, #444]	; (8000ecc <_ZN3USB7InitUSBEv+0x2d8>)
 8000d0e:	4b6f      	ldr	r3, [pc, #444]	; (8000ecc <_ZN3USB7InitUSBEv+0x2d8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 0301 	bic.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_PFIVL;			// default 00: 80% of the frame interval: Indicates time within frame at which application must be notified using end of periodic frame interrupt. This can be used to determine if all the isochronous traffic for that frame is complete.
 8000d18:	4a6d      	ldr	r2, [pc, #436]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d1a:	4b6d      	ldr	r3, [pc, #436]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d22:	6013      	str	r3, [r2, #0]

	// *********************  USB_SetDevSpeed() in  Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USBx_DEVICE->DCFG |= USB_OTG_DCFG_DSPD;				// 11: Full speed using internal FS PHY
 8000d24:	4a6a      	ldr	r2, [pc, #424]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d26:	4b6a      	ldr	r3, [pc, #424]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f043 0303 	orr.w	r3, r3, #3
 8000d2e:	6013      	str	r3, [r2, #0]

	// *********************  USB_FlushTxFifo() and USB_FlushRxFifo() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_TXFNUM_4;	// Select buffers to flush. 10000: Flush all the transmit FIFOs in device or host mode
 8000d30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3e:	6113      	str	r3, [r2, #16]
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;		// Flush the TX buffers
 8000d40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	f043 0320 	orr.w	r3, r3, #32
 8000d4e:	6113      	str	r3, [r2, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8000d50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	f003 0320 	and.w	r3, r3, #32
 8000d5a:	2b20      	cmp	r3, #32
 8000d5c:	bf0c      	ite	eq
 8000d5e:	2301      	moveq	r3, #1
 8000d60:	2300      	movne	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d000      	beq.n	8000d6a <_ZN3USB7InitUSBEv+0x176>
 8000d68:	e7f2      	b.n	8000d50 <_ZN3USB7InitUSBEv+0x15c>

	USB_OTG_FS->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8000d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d6e:	2210      	movs	r2, #16
 8000d70:	611a      	str	r2, [r3, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8000d72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	2b10      	cmp	r3, #16
 8000d7e:	bf0c      	ite	eq
 8000d80:	2301      	moveq	r3, #1
 8000d82:	2300      	movne	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d000      	beq.n	8000d8c <_ZN3USB7InitUSBEv+0x198>
 8000d8a:	e7f2      	b.n	8000d72 <_ZN3USB7InitUSBEv+0x17e>

	// ********************* continues USB_DevInit() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	/* Clear all pending Device Interrupts */
	USBx_DEVICE->DIEPMSK = 0U;
 8000d8c:	4b50      	ldr	r3, [pc, #320]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
	USBx_DEVICE->DOEPMSK = 0U;
 8000d92:	4b4f      	ldr	r3, [pc, #316]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
	USBx_DEVICE->DAINTMSK = 0U;
 8000d98:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]

	// Note these following commands do not visibly change anything - some of these appear to affect other registers (see p 1177)
	for (int i = 0U; i < 6; i++) {						// 6 = cfg.dev_endpoints
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	dc1c      	bgt.n	8000de2 <_ZN3USB7InitUSBEv+0x1ee>
		USBx_INEP(i)->DIEPCTL = 0U;						// shown in SFRs as FS_DIEPCTL0, DIEPCTL1, DIEPCTL2, DIEPCTL3 (??DIEPCTL4/5 not shown in SFR)
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000dae:	3348      	adds	r3, #72	; 0x48
 8000db0:	015b      	lsls	r3, r3, #5
 8000db2:	461a      	mov	r2, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	6013      	str	r3, [r2, #0]
		USBx_INEP(i)->DIEPTSIZ = 0U;
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000dbe:	3348      	adds	r3, #72	; 0x48
 8000dc0:	015b      	lsls	r3, r3, #5
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	6113      	str	r3, [r2, #16]
		USBx_INEP(i)->DIEPINT  = 0xFB7FU;				// OTG device IN endpoint x interrupt register
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000dce:	3348      	adds	r3, #72	; 0x48
 8000dd0:	015b      	lsls	r3, r3, #5
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000dd8:	6093      	str	r3, [r2, #8]
	for (int i = 0U; i < 6; i++) {						// 6 = cfg.dev_endpoints
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	e7df      	b.n	8000da2 <_ZN3USB7InitUSBEv+0x1ae>
	}

	for (int i = 0U; i < 6; i++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	dc1c      	bgt.n	8000e26 <_ZN3USB7InitUSBEv+0x232>
		USBx_OUTEP(i)->DOEPCTL = 0U;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000df2:	3358      	adds	r3, #88	; 0x58
 8000df4:	015b      	lsls	r3, r3, #5
 8000df6:	461a      	mov	r2, r3
 8000df8:	2300      	movs	r3, #0
 8000dfa:	6013      	str	r3, [r2, #0]
		USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e02:	3358      	adds	r3, #88	; 0x58
 8000e04:	015b      	lsls	r3, r3, #5
 8000e06:	461a      	mov	r2, r3
 8000e08:	2300      	movs	r3, #0
 8000e0a:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e12:	3358      	adds	r3, #88	; 0x58
 8000e14:	015b      	lsls	r3, r3, #5
 8000e16:	461a      	mov	r2, r3
 8000e18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000e1c:	6093      	str	r3, [r2, #8]
	for (int i = 0U; i < 6; i++) {
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3301      	adds	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e7df      	b.n	8000de6 <_ZN3USB7InitUSBEv+0x1f2>
	}

	USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);	// NB bit does not appear to be shown in the SFR
 8000e26:	4a2a      	ldr	r2, [pc, #168]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e30:	6113      	str	r3, [r2, #16]

	USB_OTG_FS->GINTMSK = 0U;							// Disable all interrupts.
 8000e32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
	USB_OTG_FS->GINTSTS = 0xBFFFFFFFU;					// Clear any pending interrupts
 8000e3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e3e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8000e42:	615a      	str	r2, [r3, #20]
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;		// Enable the Global interrupt: Receive FIFO non-empty mask
 8000e44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	6193      	str	r3, [r2, #24]

	// Enable interrupts matching to the Device mode ONLY
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |	// USB suspend; USB reset
			USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |					// Enumeration done; IN endpoints interrupt
			USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |				// OUT endpoints interrupt; Incomplete isochronous IN transfer
			USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;				// Incomplete isochronous OUT transfer; Resume/remote wakeup detected
 8000e54:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000e58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e5c:	699a      	ldr	r2, [r3, #24]
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <_ZN3USB7InitUSBEv+0x2e0>)
 8000e60:	4313      	orrs	r3, r2
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |	// USB suspend; USB reset
 8000e62:	618b      	str	r3, [r1, #24]

	//USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_SOFM;								// Start of frame
	USB_OTG_FS->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);	// Session request/new session detected; OTG interrupt
 8000e64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6193      	str	r3, [r2, #24]

	// ********************* USB_DevDisconnect() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	// As long as this bit is set, the host does not see that the device is connected, and the device does not receive signals on the USB.
	USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;				// Soft disconnect (not needed: already set by RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN)
 8000e78:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	6053      	str	r3, [r2, #4]
	//HAL_Delay(3U);

	// ********************* HAL_PCDEx_SetRxFiFo() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c
	USB_OTG_FS->GRXFSIZ = 128;		 					// RxFIFO depth
 8000e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24

	// ********************* HAL_PCDEx_SetTxFiFo() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c
	// OTG_FS non-periodic transmit FIFO size register (Device mode) (FS_GNPTXFSIZ_Device in SFR)
	USB_OTG_FS->DIEPTXF0_HNPTXFSIZ = ((uint32_t)64 << USB_OTG_TX0FD_Pos) |		// Endpoint 0 TxFIFO depth
 8000e8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e90:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <_ZN3USB7InitUSBEv+0x2e4>)
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
			((uint32_t)128 << USB_OTG_TX0FSA_Pos);								// Endpoint 0 transmit RAM start  address

    // Multiply Tx_Size by 2 to get higher performance
    USB_OTG_FS->DIEPTXF[0] = ((uint32_t)128 << USB_OTG_DIEPTXF_INEPTXFD_Pos) |	// IN endpoint TxFIFO depth
 8000e94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <_ZN3USB7InitUSBEv+0x2e8>)
 8000e9a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		int8_t (* OutEvent)      (uint8_t event_idx, uint8_t state);
	} USBD_CUSTOM_HID_ItfTypeDef;
	*/

    // *********************  USB_DevConnect() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
    USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8000e9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <_ZN3USB7InitUSBEv+0x2dc>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f023 0302 	bic.w	r3, r3, #2
 8000ea8:	6053      	str	r3, [r2, #4]

    // *********************  USB_EnableGlobalInt() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
    USB_OTG_FS->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8000eaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6093      	str	r3, [r2, #8]
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	50003800 	.word	0x50003800
 8000ed0:	50000800 	.word	0x50000800
 8000ed4:	803c3800 	.word	0x803c3800
 8000ed8:	00400080 	.word	0x00400080
 8000edc:	008000c0 	.word	0x008000c0

08000ee0 <_ZN3USB20USB_ActivateEndpointEmbh>:


void USB::USB_ActivateEndpoint(uint32_t epnum, bool is_in, uint8_t eptype)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	4611      	mov	r1, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	460b      	mov	r3, r1
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	71bb      	strb	r3, [r7, #6]
	uint8_t maxpktsize = (epnum == 0 ? ep0_maxPacket : ep_maxPacket);
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_ZN3USB20USB_ActivateEndpointEmbh+0x22>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	7a1b      	ldrb	r3, [r3, #8]
 8000f00:	e001      	b.n	8000f06 <_ZN3USB20USB_ActivateEndpointEmbh+0x26>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	7a5b      	ldrb	r3, [r3, #9]
 8000f06:	75fb      	strb	r3, [r7, #23]

	if (is_in) {
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d034      	beq.n	8000f78 <_ZN3USB20USB_ActivateEndpointEmbh+0x98>
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (epnum & EP_ADDR_MSK));
 8000f0e:	4936      	ldr	r1, [pc, #216]	; (8000fe8 <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000f10:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000f12:	69da      	ldr	r2, [r3, #28]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	fa00 f303 	lsl.w	r3, r0, r3
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61cb      	str	r3, [r1, #28]

		if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000f2c:	3348      	adds	r3, #72	; 0x48
 8000f2e:	015b      	lsls	r3, r3, #5
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf0c      	ite	eq
 8000f3a:	2301      	moveq	r3, #1
 8000f3c:	2300      	movne	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d04a      	beq.n	8000fda <_ZN3USB20USB_ActivateEndpointEmbh+0xfa>
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
					((uint32_t)eptype << 18) | (epnum << 22) |
					USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
					USB_OTG_DIEPCTL_USBAEP;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000f4a:	3348      	adds	r3, #72	; 0x48
 8000f4c:	015b      	lsls	r3, r3, #5
 8000f4e:	4618      	mov	r0, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000f56:	3348      	adds	r3, #72	; 0x48
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	681a      	ldr	r2, [r3, #0]
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
 8000f5c:	7df9      	ldrb	r1, [r7, #23]
					((uint32_t)eptype << 18) | (epnum << 22) |
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	049b      	lsls	r3, r3, #18
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
 8000f62:	4319      	orrs	r1, r3
					((uint32_t)eptype << 18) | (epnum << 22) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	059b      	lsls	r3, r3, #22
 8000f68:	430b      	orrs	r3, r1
					USB_OTG_DIEPCTL_USBAEP;
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
 8000f74:	6003      	str	r3, [r0, #0]
					USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
					USB_OTG_DOEPCTL_USBAEP;
		}
	}

}
 8000f76:	e030      	b.n	8000fda <_ZN3USB20USB_ActivateEndpointEmbh+0xfa>
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (epnum & EP_ADDR_MSK)) << 16);
 8000f78:	491b      	ldr	r1, [pc, #108]	; (8000fe8 <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000f7c:	69da      	ldr	r2, [r3, #28]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f303 	lsl.w	r3, r0, r3
 8000f8a:	041b      	lsls	r3, r3, #16
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61cb      	str	r3, [r1, #28]
		if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000f96:	3358      	adds	r3, #88	; 0x58
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf0c      	ite	eq
 8000fa4:	2301      	moveq	r3, #1
 8000fa6:	2300      	movne	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d015      	beq.n	8000fda <_ZN3USB20USB_ActivateEndpointEmbh+0xfa>
					USB_OTG_DOEPCTL_USBAEP;
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000fb4:	3358      	adds	r3, #88	; 0x58
 8000fb6:	015b      	lsls	r3, r3, #5
 8000fb8:	4618      	mov	r0, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000fc0:	3358      	adds	r3, #88	; 0x58
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	681a      	ldr	r2, [r3, #0]
			USBx_OUTEP(epnum)->DOEPCTL |= (maxpktsize & USB_OTG_DOEPCTL_MPSIZ) |
 8000fc6:	7df9      	ldrb	r1, [r7, #23]
					((uint32_t)eptype << 18) |
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	049b      	lsls	r3, r3, #18
			USBx_OUTEP(epnum)->DOEPCTL |= (maxpktsize & USB_OTG_DOEPCTL_MPSIZ) |
 8000fcc:	430b      	orrs	r3, r1
					USB_OTG_DOEPCTL_USBAEP;
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			USBx_OUTEP(epnum)->DOEPCTL |= (maxpktsize & USB_OTG_DOEPCTL_MPSIZ) |
 8000fd8:	6003      	str	r3, [r0, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	371c      	adds	r7, #28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	50000800 	.word	0x50000800

08000fec <_ZN3USB14USB_ReadPacketEPmt>:

// USB_ReadPacket : read a packet from the RX FIFO
void USB::USB_ReadPacket(uint32_t *dest, uint16_t len)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	80fb      	strh	r3, [r7, #6]
	uint32_t *pDest = (uint32_t *)dest;
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	61fb      	str	r3, [r7, #28]
	uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	3303      	adds	r3, #3
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	617b      	str	r3, [r7, #20]

	for (uint32_t i = 0; i < count32b; i++)
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	429a      	cmp	r2, r3
 8001010:	d20a      	bcs.n	8001028 <_ZN3USB14USB_ReadPacketEPmt+0x3c>
	{
		*pDest = USBx_DFIFO(0U);
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_ZN3USB14USB_ReadPacketEPmt+0x48>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	601a      	str	r2, [r3, #0]
		pDest++;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < count32b; i++)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	3301      	adds	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	e7f0      	b.n	800100a <_ZN3USB14USB_ReadPacketEPmt+0x1e>
	}

	//return ((void *)pDest);
}
 8001028:	bf00      	nop
 800102a:	3724      	adds	r7, #36	; 0x24
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	50001000 	.word	0x50001000

08001038 <_ZN3USB15USB_WritePacketEPhmt>:

void USB::USB_WritePacket(uint8_t *src, uint32_t ch_ep_num, uint16_t len)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	807b      	strh	r3, [r7, #2]
	uint32_t *pSrc = (uint32_t *)src;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	61fb      	str	r3, [r7, #28]
	uint32_t count32b, i;

	count32b = ((uint32_t)len + 3U) / 4U;
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	3303      	adds	r3, #3
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	617b      	str	r3, [r7, #20]
	for (i = 0; i < count32b; i++) {
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	429a      	cmp	r2, r3
 800105c:	d20f      	bcs.n	800107e <_ZN3USB15USB_WritePacketEPhmt+0x46>
		USBx_DFIFO(ch_ep_num) = *pSrc;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8001064:	3301      	adds	r3, #1
 8001066:	031b      	lsls	r3, r3, #12
 8001068:	461a      	mov	r2, r3
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6013      	str	r3, [r2, #0]
		pSrc++;
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	3304      	adds	r3, #4
 8001074:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < count32b; i++) {
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	3301      	adds	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	e7eb      	b.n	8001056 <_ZN3USB15USB_WritePacketEPhmt+0x1e>
	}


}
 800107e:	bf00      	nop
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <_ZN3USB18USBD_GetDescriptorE10usbRequest>:


// Descriptors in usbd_desc.c
void USB::USBD_GetDescriptor(usbRequest req)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af02      	add	r7, sp, #8
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t *pbuf;
	uint32_t deviceserial0, deviceserial1, deviceserial2;



	switch (req.Value >> 8)
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	121b      	asrs	r3, r3, #8
 800109e:	3b01      	subs	r3, #1
 80010a0:	2b0e      	cmp	r3, #14
 80010a2:	f200 80fa 	bhi.w	800129a <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x20e>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x20>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010e9 	.word	0x080010e9
 80010b0:	080010ff 	.word	0x080010ff
 80010b4:	0800112b 	.word	0x0800112b
 80010b8:	0800129b 	.word	0x0800129b
 80010bc:	0800129b 	.word	0x0800129b
 80010c0:	080011ef 	.word	0x080011ef
 80010c4:	0800129b 	.word	0x0800129b
 80010c8:	0800129b 	.word	0x0800129b
 80010cc:	0800129b 	.word	0x0800129b
 80010d0:	0800129b 	.word	0x0800129b
 80010d4:	0800129b 	.word	0x0800129b
 80010d8:	0800129b 	.word	0x0800129b
 80010dc:	0800129b 	.word	0x0800129b
 80010e0:	0800129b 	.word	0x0800129b
 80010e4:	08001115 	.word	0x08001115
	{
	case USB_DESC_TYPE_DEVICE:
		//pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
		outBuff = USBD_FS_DeviceDesc;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f103 02a5 	add.w	r2, r3, #165	; 0xa5
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		outBuffSize = sizeof(USBD_FS_DeviceDesc);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2212      	movs	r2, #18
 80010f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		break;
 80010fc:	e099      	b.n	8001232 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1a6>

	case USB_DESC_TYPE_CONFIGURATION:

		outBuff = USBD_CUSTOM_HID_CfgFSDesc;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f103 02b7 	add.w	r2, r3, #183	; 0xb7
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		outBuffSize = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2229      	movs	r2, #41	; 0x29
 800110e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		//pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
		//pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
		break;
 8001112:	e08e      	b.n	8001232 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1a6>

	case USB_DESC_TYPE_BOS:

		outBuff = USBD_FS_BOSDesc;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		outBuffSize = sizeof(USBD_FS_BOSDesc);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	220c      	movs	r2, #12
 8001124:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

		//pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
		break;
 8001128:	e083      	b.n	8001232 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1a6>

	case USB_DESC_TYPE_STRING:
		switch ((uint8_t)(req.Value)) {
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b05      	cmp	r3, #5
 8001130:	f200 80b5 	bhi.w	800129e <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x212>
 8001134:	a201      	add	r2, pc, #4	; (adr r2, 800113c <_ZN3USB18USBD_GetDescriptorE10usbRequest+0xb0>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	08001155 	.word	0x08001155
 8001140:	080011eb 	.word	0x080011eb
 8001144:	0800116b 	.word	0x0800116b
 8001148:	08001191 	.word	0x08001191
 800114c:	080011eb 	.word	0x080011eb
 8001150:	080011eb 	.word	0x080011eb
		case USBD_IDX_LANGID_STR:
			outBuff = USBD_LangIDDesc;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f503 7283 	add.w	r2, r3, #262	; 0x106
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			outBuffSize = sizeof(USBD_LangIDDesc);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2204      	movs	r2, #4
 8001164:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			//pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
			break;
 8001168:	e040      	b.n	80011ec <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x160>
		case USBD_IDX_MFC_STR:
			//pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
			break;
		case USBD_IDX_PRODUCT_STR:
			outBuffSize = USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8001170:	461a      	mov	r2, r3
 8001172:	494d      	ldr	r1, [pc, #308]	; (80012a8 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x21c>)
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 f89f 	bl	80012b8 <_ZN3USB14USBD_GetStringEPhS0_>
 800117a:	4602      	mov	r2, r0
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			outBuff = USBD_StrDesc;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f503 7285 	add.w	r2, r3, #266	; 0x10a
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			//pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
			break;
 800118e:	e02d      	b.n	80011ec <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x160>
		case USBD_IDX_SERIAL_STR:
			// STM32 unique device ID (96 bit number starting at UID_BASE)
			deviceserial0 = *(uint32_t *) UID_BASE;
 8001190:	4b46      	ldr	r3, [pc, #280]	; (80012ac <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x220>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61fb      	str	r3, [r7, #28]
			deviceserial1 = *(uint32_t *) UID_BASE + 4;
 8001196:	4b45      	ldr	r3, [pc, #276]	; (80012ac <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x220>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3304      	adds	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
			deviceserial2 = *(uint32_t *) UID_BASE + 8;
 800119e:	4b43      	ldr	r3, [pc, #268]	; (80012ac <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x220>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3308      	adds	r3, #8
 80011a4:	617b      	str	r3, [r7, #20]
			deviceserial0 += deviceserial2;
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	4413      	add	r3, r2
 80011ac:	61fb      	str	r3, [r7, #28]

			if (deviceserial0 != 0)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00f      	beq.n	80011d4 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x148>
			{
				IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f103 02ee 	add.w	r2, r3, #238	; 0xee
 80011ba:	2308      	movs	r3, #8
 80011bc:	69f9      	ldr	r1, [r7, #28]
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 f8aa 	bl	8001318 <_ZN3USB12IntToUnicodeEmPhh>
				IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f103 02fe 	add.w	r2, r3, #254	; 0xfe
 80011ca:	2304      	movs	r3, #4
 80011cc:	69b9      	ldr	r1, [r7, #24]
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f000 f8a2 	bl	8001318 <_ZN3USB12IntToUnicodeEmPhh>
			}
			outBuff = USBD_StringSerial;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			outBuffSize = sizeof(USBD_StringSerial);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	221a      	movs	r2, #26
 80011e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			//pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
			break;
 80011e8:	e000      	b.n	80011ec <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x160>
			break;
 80011ea:	bf00      	nop
#else
			// USBD_CtlError(pdev , req);
			return;
#endif
		}
		break;
 80011ec:	e021      	b.n	8001232 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1a6>
		case USB_DESC_TYPE_DEVICE_QUALIFIER:
			//USBD_CtlError(pdev , req);
			USBx_INEP(0)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80011ee:	4a30      	ldr	r2, [pc, #192]	; (80012b0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x224>)
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x224>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f8:	6013      	str	r3, [r2, #0]

			USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80011fa:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x228>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001200:	4a2c      	ldr	r2, [pc, #176]	; (80012b4 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x228>)
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x228>)
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800120a:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800120c:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x228>)
 800120e:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x228>)
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f043 0318 	orr.w	r3, r3, #24
 8001216:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8001218:	4a26      	ldr	r2, [pc, #152]	; (80012b4 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x228>)
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x228>)
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001222:	6113      	str	r3, [r2, #16]

			USBx_OUTEP(0)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001224:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x228>)
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x228>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800122e:	6013      	str	r3, [r2, #0]

			return;
 8001230:	e036      	b.n	80012a0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x214>
		default:
			//USBD_CtlError(pdev , req);
			return;
	}

	if ((outBuffSize != 0U) && (req.Length != 0U)) {
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001238:	2b00      	cmp	r3, #0
 800123a:	d022      	beq.n	8001282 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1f6>
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d01f      	beq.n	8001282 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1f6>
		ep0_state = USBD_EP0_DATA_IN;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2202      	movs	r2, #2
 8001246:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		outBuffSize = std::min(outBuffSize, (uint32_t)req.Length);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3398      	adds	r3, #152	; 0x98
 800124e:	897a      	ldrh	r2, [r7, #10]
 8001250:	613a      	str	r2, [r7, #16]
 8001252:	f107 0210 	add.w	r2, r7, #16
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f830 	bl	80002be <_ZSt3minImERKT_S2_S2_>
 800125e:	4603      	mov	r3, r0
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		USB_EP0StartXfer(DIR_IN, 0, outBuff, outBuffSize);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	4613      	mov	r3, r2
 8001278:	2200      	movs	r2, #0
 800127a:	2101      	movs	r1, #1
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 f90b 	bl	8001498 <_ZN3USB16USB_EP0StartXferEbhPhm>
	}

	if (req.Length == 0U) {
 8001282:	897b      	ldrh	r3, [r7, #10]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10b      	bne.n	80012a0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x214>
		USB_EP0StartXfer(DIR_IN, 0, nullptr, 0);
 8001288:	2300      	movs	r3, #0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	2200      	movs	r2, #0
 8001290:	2101      	movs	r1, #1
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f000 f900 	bl	8001498 <_ZN3USB16USB_EP0StartXferEbhPhm>
 8001298:	e002      	b.n	80012a0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x214>
			return;
 800129a:	bf00      	nop
 800129c:	e000      	b.n	80012a0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x214>
			return;
 800129e:	bf00      	nop
	}
}
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	08001d34 	.word	0x08001d34
 80012ac:	1fff7a10 	.word	0x1fff7a10
 80012b0:	50000900 	.word	0x50000900
 80012b4:	50000b00 	.word	0x50000b00

080012b8 <_ZN3USB14USBD_GetStringEPhS0_>:

uint32_t USB::USBD_GetString(uint8_t *desc, uint8_t *unicode)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	uint32_t idx = 2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	617b      	str	r3, [r7, #20]

	if (desc != NULL)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d01d      	beq.n	800130a <_ZN3USB14USBD_GetStringEPhS0_+0x52>
	{
		while (*desc != '\0') {
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d011      	beq.n	80012fa <_ZN3USB14USBD_GetStringEPhS0_+0x42>
			unicode[idx++] = *desc++;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	617a      	str	r2, [r7, #20]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	441a      	add	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1c59      	adds	r1, r3, #1
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	7013      	strb	r3, [r2, #0]
			unicode[idx++] =  0U;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	617a      	str	r2, [r7, #20]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
		while (*desc != '\0') {
 80012f8:	e7e9      	b.n	80012ce <_ZN3USB14USBD_GetStringEPhS0_+0x16>
		}
		unicode[0] = idx;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	701a      	strb	r2, [r3, #0]
		unicode[1] = USB_DESC_TYPE_STRING;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3301      	adds	r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	701a      	strb	r2, [r3, #0]
	}
	return idx;
 800130a:	697b      	ldr	r3, [r7, #20]
}
 800130c:	4618      	mov	r0, r3
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_ZN3USB12IntToUnicodeEmPhh>:

void USB::IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	70fb      	strb	r3, [r7, #3]

	for (uint8_t idx = 0; idx < len; idx++) {
 8001326:	2300      	movs	r3, #0
 8001328:	75fb      	strb	r3, [r7, #23]
 800132a:	7dfa      	ldrb	r2, [r7, #23]
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	429a      	cmp	r2, r3
 8001330:	da28      	bge.n	8001384 <_ZN3USB12IntToUnicodeEmPhh+0x6c>
		if (((value >> 28)) < 0xA) {
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	0f1b      	lsrs	r3, r3, #28
 8001336:	2b09      	cmp	r3, #9
 8001338:	d80b      	bhi.n	8001352 <_ZN3USB12IntToUnicodeEmPhh+0x3a>
			pbuf[2 * idx] = (value >> 28) + '0';
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	0f12      	lsrs	r2, r2, #28
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	3230      	adds	r2, #48	; 0x30
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e00a      	b.n	8001368 <_ZN3USB12IntToUnicodeEmPhh+0x50>
		} else {
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	0f12      	lsrs	r2, r2, #28
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	3237      	adds	r2, #55	; 0x37
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	701a      	strb	r2, [r3, #0]
		}

		value = value << 4;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	60bb      	str	r3, [r7, #8]

		pbuf[2 * idx + 1] = 0;
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	3301      	adds	r3, #1
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
	for (uint8_t idx = 0; idx < len; idx++) {
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	3301      	adds	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
 8001382:	e7d2      	b.n	800132a <_ZN3USB12IntToUnicodeEmPhh+0x12>
	}
}
 8001384:	bf00      	nop
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_ZN3USB14USBD_StdDevReqE10usbRequest>:

void USB::USBD_StdDevReq(usbRequest req)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af02      	add	r7, sp, #8
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	e883 0006 	stmia.w	r3, {r1, r2}

	uint8_t dev_addr;
	switch (req.mRequest & USB_REQ_TYPE_MASK)
 800139e:	793b      	ldrb	r3, [r7, #4]
 80013a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80013a4:	2b20      	cmp	r3, #32
 80013a6:	d070      	beq.n	800148a <_ZN3USB14USBD_StdDevReqE10usbRequest+0xfa>
 80013a8:	2b40      	cmp	r3, #64	; 0x40
 80013aa:	d06e      	beq.n	800148a <_ZN3USB14USBD_StdDevReqE10usbRequest+0xfa>
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d000      	beq.n	80013b2 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x22>
		}
		break;

		default:
			//USBD_CtlError(pdev, req);
			break;
 80013b0:	e06c      	b.n	800148c <_ZN3USB14USBD_StdDevReqE10usbRequest+0xfc>
		switch (req.Request)
 80013b2:	797b      	ldrb	r3, [r7, #5]
 80013b4:	2b09      	cmp	r3, #9
 80013b6:	d866      	bhi.n	8001486 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf6>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x30>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	08001487 	.word	0x08001487
 80013c4:	08001487 	.word	0x08001487
 80013c8:	08001487 	.word	0x08001487
 80013cc:	08001487 	.word	0x08001487
 80013d0:	08001487 	.word	0x08001487
 80013d4:	080013f7 	.word	0x080013f7
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	08001487 	.word	0x08001487
 80013e0:	08001487 	.word	0x08001487
 80013e4:	08001439 	.word	0x08001439
			USBD_GetDescriptor(req);
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff fe4c 	bl	800108c <_ZN3USB18USBD_GetDescriptorE10usbRequest>
			break;
 80013f4:	e048      	b.n	8001488 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf8>
			dev_addr = (uint8_t)(req.Value) & 0x7FU;
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013fe:	75fb      	strb	r3, [r7, #23]
			USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8001400:	4a24      	ldr	r2, [pc, #144]	; (8001494 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x104>)
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x104>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800140a:	6013      	str	r3, [r2, #0]
			USBx_DEVICE->DCFG |= ((uint32_t)dev_addr << 4) & USB_OTG_DCFG_DAD;
 800140c:	4921      	ldr	r1, [pc, #132]	; (8001494 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x104>)
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x104>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	7dfb      	ldrb	r3, [r7, #23]
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
			ep0_state = USBD_EP0_STATUS_IN;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2204      	movs	r2, #4
 8001422:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			USB_EP0StartXfer(DIR_IN, 0, nullptr, 0);
 8001426:	2300      	movs	r3, #0
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2300      	movs	r3, #0
 800142c:	2200      	movs	r2, #0
 800142e:	2101      	movs	r1, #1
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 f831 	bl	8001498 <_ZN3USB16USB_EP0StartXferEbhPhm>
			break;
 8001436:	e027      	b.n	8001488 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf8>
			USB_ActivateEndpoint(req.Value, true, USBD_EP_TYPE_INTR);		// Activate in endpoint
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	4619      	mov	r1, r3
 800143c:	2303      	movs	r3, #3
 800143e:	2201      	movs	r2, #1
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f7ff fd4d 	bl	8000ee0 <_ZN3USB20USB_ActivateEndpointEmbh>
			USB_ActivateEndpoint(req.Value, false, USBD_EP_TYPE_INTR);		// Activate out endpoint
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4619      	mov	r1, r3
 800144a:	2303      	movs	r3, #3
 800144c:	2200      	movs	r2, #0
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f7ff fd46 	bl	8000ee0 <_ZN3USB20USB_ActivateEndpointEmbh>
			USB_EP0StartXfer(DIR_OUT, req.Value, outBuff, 2);		// FIXME maxpacket is 2 for EP 1: CUSTOM_HID_EPIN_SIZE
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800145e:	2302      	movs	r3, #2
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	460b      	mov	r3, r1
 8001464:	2100      	movs	r1, #0
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f816 	bl	8001498 <_ZN3USB16USB_EP0StartXferEbhPhm>
			ep0_state = USBD_EP0_STATUS_IN;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2204      	movs	r2, #4
 8001470:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			USB_EP0StartXfer(DIR_IN, 0, nullptr, 0);
 8001474:	2300      	movs	r3, #0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	2200      	movs	r2, #0
 800147c:	2101      	movs	r1, #1
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f80a 	bl	8001498 <_ZN3USB16USB_EP0StartXferEbhPhm>
			break;
 8001484:	e000      	b.n	8001488 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf8>
			break;
 8001486:	bf00      	nop
		break;
 8001488:	e000      	b.n	800148c <_ZN3USB14USBD_StdDevReqE10usbRequest+0xfc>
		break;
 800148a:	bf00      	nop
	}

}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	50000800 	.word	0x50000800

08001498 <_ZN3USB16USB_EP0StartXferEbhPhm>:

void USB::USB_EP0StartXfer(bool is_in, uint8_t epnum, uint8_t* xfer_buff, uint32_t xfer_len)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	72fb      	strb	r3, [r7, #11]
 80014a6:	4613      	mov	r3, r2
 80014a8:	72bb      	strb	r3, [r7, #10]

	// IN endpoint
	if (is_in)
 80014aa:	7afb      	ldrb	r3, [r7, #11]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80a6 	beq.w	80015fe <_ZN3USB16USB_EP0StartXferEbhPhm+0x166>
	{
		// Zero Length Packet?
		if (xfer_len == 0U) {
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d12f      	bne.n	8001518 <_ZN3USB16USB_EP0StartXferEbhPhm+0x80>
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80014b8:	7abb      	ldrb	r3, [r7, #10]
 80014ba:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014be:	3348      	adds	r3, #72	; 0x48
 80014c0:	015b      	lsls	r3, r3, #5
 80014c2:	461a      	mov	r2, r3
 80014c4:	7abb      	ldrb	r3, [r7, #10]
 80014c6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014ca:	3348      	adds	r3, #72	; 0x48
 80014cc:	015b      	lsls	r3, r3, #5
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80014d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80014d8:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80014da:	7abb      	ldrb	r3, [r7, #10]
 80014dc:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014e0:	3348      	adds	r3, #72	; 0x48
 80014e2:	015b      	lsls	r3, r3, #5
 80014e4:	461a      	mov	r2, r3
 80014e6:	7abb      	ldrb	r3, [r7, #10]
 80014e8:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014ec:	3348      	adds	r3, #72	; 0x48
 80014ee:	015b      	lsls	r3, r3, #5
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014f6:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80014f8:	7abb      	ldrb	r3, [r7, #10]
 80014fa:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014fe:	3348      	adds	r3, #72	; 0x48
 8001500:	015b      	lsls	r3, r3, #5
 8001502:	461a      	mov	r2, r3
 8001504:	7abb      	ldrb	r3, [r7, #10]
 8001506:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800150a:	3348      	adds	r3, #72	; 0x48
 800150c:	015b      	lsls	r3, r3, #5
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	0cdb      	lsrs	r3, r3, #19
 8001512:	04db      	lsls	r3, r3, #19
 8001514:	6113      	str	r3, [r2, #16]
 8001516:	e054      	b.n	80015c2 <_ZN3USB16USB_EP0StartXferEbhPhm+0x12a>
		} else {
			int maxPacket = (epnum == 0 ? ep0_maxPacket : ep_maxPacket);
 8001518:	7abb      	ldrb	r3, [r7, #10]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <_ZN3USB16USB_EP0StartXferEbhPhm+0x8c>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	7a1b      	ldrb	r3, [r3, #8]
 8001522:	e001      	b.n	8001528 <_ZN3USB16USB_EP0StartXferEbhPhm+0x90>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	7a5b      	ldrb	r3, [r3, #9]
 8001528:	617b      	str	r3, [r7, #20]
			// Program the transfer size and packet count as follows: xfersize = N * maxpacket + short_packet pktcnt = N + (short_packet exist ? 1 : 0)
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800152a:	7abb      	ldrb	r3, [r7, #10]
 800152c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001530:	3348      	adds	r3, #72	; 0x48
 8001532:	015b      	lsls	r3, r3, #5
 8001534:	461a      	mov	r2, r3
 8001536:	7abb      	ldrb	r3, [r7, #10]
 8001538:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800153c:	3348      	adds	r3, #72	; 0x48
 800153e:	015b      	lsls	r3, r3, #5
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	0cdb      	lsrs	r3, r3, #19
 8001544:	04db      	lsls	r3, r3, #19
 8001546:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001548:	7abb      	ldrb	r3, [r7, #10]
 800154a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800154e:	3348      	adds	r3, #72	; 0x48
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	461a      	mov	r2, r3
 8001554:	7abb      	ldrb	r3, [r7, #10]
 8001556:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800155a:	3348      	adds	r3, #72	; 0x48
 800155c:	015b      	lsls	r3, r3, #5
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001564:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8001568:	6113      	str	r3, [r2, #16]

			if (xfer_len > maxPacket) {		// currently set to 0x40
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	6a3a      	ldr	r2, [r7, #32]
 800156e:	429a      	cmp	r2, r3
 8001570:	d907      	bls.n	8001582 <_ZN3USB16USB_EP0StartXferEbhPhm+0xea>
				xfer_rem = xfer_len - maxPacket;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	6a3a      	ldr	r2, [r7, #32]
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				xfer_len = maxPacket;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	623b      	str	r3, [r7, #32]
			}

			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001582:	7abb      	ldrb	r3, [r7, #10]
 8001584:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001588:	3348      	adds	r3, #72	; 0x48
 800158a:	015b      	lsls	r3, r3, #5
 800158c:	461a      	mov	r2, r3
 800158e:	7abb      	ldrb	r3, [r7, #10]
 8001590:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001594:	3348      	adds	r3, #72	; 0x48
 8001596:	015b      	lsls	r3, r3, #5
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800159e:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & xfer_len);
 80015a0:	7abb      	ldrb	r3, [r7, #10]
 80015a2:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015a6:	3348      	adds	r3, #72	; 0x48
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	4619      	mov	r1, r3
 80015ac:	7abb      	ldrb	r3, [r7, #10]
 80015ae:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015b2:	3348      	adds	r3, #72	; 0x48
 80015b4:	015b      	lsls	r3, r3, #5
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015be:	4313      	orrs	r3, r2
 80015c0:	610b      	str	r3, [r1, #16]
		}

		/* EP enable, IN data in FIFO */
		USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80015c2:	7abb      	ldrb	r3, [r7, #10]
 80015c4:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015c8:	3348      	adds	r3, #72	; 0x48
 80015ca:	015b      	lsls	r3, r3, #5
 80015cc:	461a      	mov	r2, r3
 80015ce:	7abb      	ldrb	r3, [r7, #10]
 80015d0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015d4:	3348      	adds	r3, #72	; 0x48
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80015de:	6013      	str	r3, [r2, #0]

		/* Enable the Tx FIFO Empty Interrupt for this EP */
		if (xfer_len > 0U) {
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d05c      	beq.n	80016a0 <_ZN3USB16USB_EP0StartXferEbhPhm+0x208>
			USBx_DEVICE->DIEPEMPMSK |= 1UL << (epnum & EP_ADDR_MSK);
 80015e6:	4931      	ldr	r1, [pc, #196]	; (80016ac <_ZN3USB16USB_EP0StartXferEbhPhm+0x214>)
 80015e8:	4b30      	ldr	r3, [pc, #192]	; (80016ac <_ZN3USB16USB_EP0StartXferEbhPhm+0x214>)
 80015ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ec:	7abb      	ldrb	r3, [r7, #10]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	2001      	movs	r0, #1
 80015f4:	fa00 f303 	lsl.w	r3, r0, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	634b      	str	r3, [r1, #52]	; 0x34
		/* EP enable */
		USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
		int susp = 1;
	}

}
 80015fc:	e050      	b.n	80016a0 <_ZN3USB16USB_EP0StartXferEbhPhm+0x208>
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80015fe:	7abb      	ldrb	r3, [r7, #10]
 8001600:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001604:	3358      	adds	r3, #88	; 0x58
 8001606:	015b      	lsls	r3, r3, #5
 8001608:	461a      	mov	r2, r3
 800160a:	7abb      	ldrb	r3, [r7, #10]
 800160c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001610:	3358      	adds	r3, #88	; 0x58
 8001612:	015b      	lsls	r3, r3, #5
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	0cdb      	lsrs	r3, r3, #19
 8001618:	04db      	lsls	r3, r3, #19
 800161a:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800161c:	7abb      	ldrb	r3, [r7, #10]
 800161e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001622:	3358      	adds	r3, #88	; 0x58
 8001624:	015b      	lsls	r3, r3, #5
 8001626:	461a      	mov	r2, r3
 8001628:	7abb      	ldrb	r3, [r7, #10]
 800162a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800162e:	3358      	adds	r3, #88	; 0x58
 8001630:	015b      	lsls	r3, r3, #5
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001638:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800163c:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800163e:	7abb      	ldrb	r3, [r7, #10]
 8001640:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001644:	3358      	adds	r3, #88	; 0x58
 8001646:	015b      	lsls	r3, r3, #5
 8001648:	461a      	mov	r2, r3
 800164a:	7abb      	ldrb	r3, [r7, #10]
 800164c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001650:	3358      	adds	r3, #88	; 0x58
 8001652:	015b      	lsls	r3, r3, #5
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800165a:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & xfer_len);
 800165c:	7abb      	ldrb	r3, [r7, #10]
 800165e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001662:	3358      	adds	r3, #88	; 0x58
 8001664:	015b      	lsls	r3, r3, #5
 8001666:	4619      	mov	r1, r3
 8001668:	7abb      	ldrb	r3, [r7, #10]
 800166a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800166e:	3358      	adds	r3, #88	; 0x58
 8001670:	015b      	lsls	r3, r3, #5
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800167a:	4313      	orrs	r3, r2
 800167c:	610b      	str	r3, [r1, #16]
		USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800167e:	7abb      	ldrb	r3, [r7, #10]
 8001680:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001684:	3358      	adds	r3, #88	; 0x58
 8001686:	015b      	lsls	r3, r3, #5
 8001688:	461a      	mov	r2, r3
 800168a:	7abb      	ldrb	r3, [r7, #10]
 800168c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001690:	3358      	adds	r3, #88	; 0x58
 8001692:	015b      	lsls	r3, r3, #5
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800169a:	6013      	str	r3, [r2, #0]
		int susp = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	613b      	str	r3, [r7, #16]
}
 80016a0:	bf00      	nop
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	50000800 	.word	0x50000800

080016b0 <_ZN3USB14USB_EPSetStallEh>:


void USB::USB_EPSetStall(uint8_t epnum) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	70fb      	strb	r3, [r7, #3]
	if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U)) {	//
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80016c2:	3348      	adds	r3, #72	; 0x48
 80016c4:	015b      	lsls	r3, r3, #5
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db04      	blt.n	80016d6 <_ZN3USB14USB_EPSetStallEh+0x26>
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <_ZN3USB14USB_EPSetStallEh+0x26>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <_ZN3USB14USB_EPSetStallEh+0x28>
 80016d6:	2300      	movs	r3, #0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00e      	beq.n	80016fa <_ZN3USB14USB_EPSetStallEh+0x4a>
		USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80016e2:	3348      	adds	r3, #72	; 0x48
 80016e4:	015b      	lsls	r3, r3, #5
 80016e6:	461a      	mov	r2, r3
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80016ee:	3348      	adds	r3, #72	; 0x48
 80016f0:	015b      	lsls	r3, r3, #5
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80016f8:	6013      	str	r3, [r2, #0]
	}
	USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001700:	3348      	adds	r3, #72	; 0x48
 8001702:	015b      	lsls	r3, r3, #5
 8001704:	461a      	mov	r2, r3
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800170c:	3348      	adds	r3, #72	; 0x48
 800170e:	015b      	lsls	r3, r3, #5
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001716:	6013      	str	r3, [r2, #0]

	// FIXME - cleared in USB_EP0StartXfer?
	//USB_EP0_OutStart
	USBx_OUTEP(0U)->DOEPTSIZ = 0U;			// USB_EP0_OutStart - set STUPCNT=3; PKTCNT=1; XFRSIZ=0x18
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001728:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	f043 0318 	orr.w	r3, r3, #24
 8001734:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8001736:	4a06      	ldr	r2, [pc, #24]	; (8001750 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001740:	6113      	str	r3, [r2, #16]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	50000b00 	.word	0x50000b00

08001754 <_ZN3USB18USB_ReadInterruptsEm>:


bool USB::USB_ReadInterrupts(uint32_t interrupt){
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]

	if (((USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK) & interrupt) == interrupt && usbEventNo < 100) {
 800175e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	401a      	ands	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	401a      	ands	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d105      	bne.n	8001782 <_ZN3USB18USB_ReadInterruptsEm+0x2e>
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b63      	cmp	r3, #99	; 0x63
 800177c:	dc01      	bgt.n	8001782 <_ZN3USB18USB_ReadInterruptsEm+0x2e>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <_ZN3USB18USB_ReadInterruptsEm+0x30>
 8001782:	2300      	movs	r3, #0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d012      	beq.n	80017ae <_ZN3USB18USB_ReadInterruptsEm+0x5a>
		usbEvents[usbEventNo] = USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK;
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <_ZN3USB18USB_ReadInterruptsEm+0x88>)
 800179e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		usbEventNo++;
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 80017ac:	701a      	strb	r2, [r3, #0]
	}

	return ((USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK) & interrupt) == interrupt;
 80017ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	401a      	ands	r2, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	401a      	ands	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	bf0c      	ite	eq
 80017c6:	2301      	moveq	r3, #1
 80017c8:	2300      	movne	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	20000514 	.word	0x20000514
 80017dc:	20000384 	.word	0x20000384

080017e0 <_Z18SystemClock_Configv>:
#define PLL_M 4
#define PLL_N 144
#define PLL_P 2		//  Main PLL (PLL) division factor for main system clock can be 2 (PLL_P = 0), 4 (PLL_P = 1), 6 (PLL_P = 2), 8 (PLL_P = 3)
#define PLL_Q 6

void SystemClock_Config(void) {
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;			// Enable Power Control clock
 80017e4:	4a35      	ldr	r2, [pc, #212]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 80017e6:	4b35      	ldr	r3, [pc, #212]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS_0;					// Enable VOS voltage scaling - allows maximum clock speed
 80017f0:	4a33      	ldr	r2, [pc, #204]	; (80018c0 <_Z18SystemClock_Configv+0xe0>)
 80017f2:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <_Z18SystemClock_Configv+0xe0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fa:	6013      	str	r3, [r2, #0]

	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));// CPACR register: set full access privileges for coprocessors
 80017fc:	4a31      	ldr	r2, [pc, #196]	; (80018c4 <_Z18SystemClock_Configv+0xe4>)
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <_Z18SystemClock_Configv+0xe4>)
 8001800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

#ifdef USE_HSE
	RCC->CR |= RCC_CR_HSEON;					// HSE ON
 800180c:	4a2b      	ldr	r2, [pc, #172]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 800180e:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0);		// Wait till HSE is ready
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf0c      	ite	eq
 8001824:	2301      	moveq	r3, #1
 8001826:	2300      	movne	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d000      	beq.n	8001830 <_Z18SystemClock_Configv+0x50>
 800182e:	e7f3      	b.n	8001818 <_Z18SystemClock_Configv+0x38>
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 8001832:	4a25      	ldr	r2, [pc, #148]	; (80018c8 <_Z18SystemClock_Configv+0xe8>)
 8001834:	605a      	str	r2, [r3, #4]
	RCC->CR |= RCC_CR_HSION;					// HSI ON
	while((RCC->CR & RCC_CR_HSIRDY) == 0);		// Wait till HSI is ready
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);
#endif

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;			// HCLK = SYSCLK / 1
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;			// PCLK2 = HCLK / 2
 800183e:	4a1f      	ldr	r2, [pc, #124]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001848:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;			// PCLK1 = HCLK / 4
 800184a:	4a1c      	ldr	r2, [pc, #112]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001854:	6093      	str	r3, [r2, #8]
	RCC->CR |= RCC_CR_PLLON;					// Enable the main PLL
 8001856:	4a19      	ldr	r2, [pc, #100]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001860:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);		// Wait till the main PLL is ready
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	bf0c      	ite	eq
 800186e:	2301      	moveq	r3, #1
 8001870:	2300      	movne	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d000      	beq.n	800187a <_Z18SystemClock_Configv+0x9a>
 8001878:	e7f3      	b.n	8001862 <_Z18SystemClock_Configv+0x82>

	// Configure Flash prefetch, Instruction cache, Data cache and wait state
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <_Z18SystemClock_Configv+0xec>)
 800187c:	f240 7205 	movw	r2, #1797	; 0x705
 8001880:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 0303 	bic.w	r3, r3, #3
 800188c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6093      	str	r3, [r2, #8]

	// Wait till the main PLL is used as system clock source
	while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_Z18SystemClock_Configv+0xdc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	bf14      	ite	ne
 80018a6:	2301      	movne	r3, #1
 80018a8:	2300      	moveq	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d000      	beq.n	80018b2 <_Z18SystemClock_Configv+0xd2>
 80018b0:	e7f3      	b.n	800189a <_Z18SystemClock_Configv+0xba>

}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40007000 	.word	0x40007000
 80018c4:	e000ed00 	.word	0xe000ed00
 80018c8:	06402404 	.word	0x06402404
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <_Z10InitBtnLEDv>:

void InitBtnLED()
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;			// reset and clock control - advanced high performance bus - GPIO port B
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <_Z10InitBtnLEDv+0x40>)
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <_Z10InitBtnLEDv+0x40>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;			// reset and clock control - advanced high performance bus - GPIO port C
 80018e0:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <_Z10InitBtnLEDv+0x40>)
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <_Z10InitBtnLEDv+0x40>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30

	// configure PC13 blue button
	//GPIOC->PUPDR |= GPIO_PUPDR_PUPDR13_0;			// Set pin to pull up:  01 Pull-up; 10 Pull-down; 11 Reserved

	// PB7 is LD2 Blue
	GPIOB->MODER |= GPIO_MODER_MODER7_0;			// Set to output
 80018ec:	4a09      	ldr	r2, [pc, #36]	; (8001914 <_Z10InitBtnLEDv+0x44>)
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <_Z10InitBtnLEDv+0x44>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f6:	6013      	str	r3, [r2, #0]

	// PB14 is LD3 Red
	GPIOB->MODER |= GPIO_MODER_MODER14_0;			// Set to output
 80018f8:	4a06      	ldr	r2, [pc, #24]	; (8001914 <_Z10InitBtnLEDv+0x44>)
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <_Z10InitBtnLEDv+0x44>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40020400 	.word	0x40020400

08001918 <_ZN3USBC1Ev>:
	uint16_t Length;
};



class USB {
 8001918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2240      	movs	r2, #64	; 0x40
 8001924:	721a      	strb	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2202      	movs	r2, #2
 800192a:	725a      	strb	r2, [r3, #9]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a28      	ldr	r2, [pc, #160]	; (80019d0 <_ZN3USBC1Ev+0xb8>)
 8001930:	f103 05a5 	add.w	r5, r3, #165	; 0xa5
 8001934:	4614      	mov	r4, r2
 8001936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001938:	6028      	str	r0, [r5, #0]
 800193a:	6069      	str	r1, [r5, #4]
 800193c:	60aa      	str	r2, [r5, #8]
 800193e:	60eb      	str	r3, [r5, #12]
 8001940:	8823      	ldrh	r3, [r4, #0]
 8001942:	822b      	strh	r3, [r5, #16]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <_ZN3USBC1Ev+0xbc>)
 8001948:	4614      	mov	r4, r2
 800194a:	f103 0eb7 	add.w	lr, r3, #183	; 0xb7
 800194e:	f104 0c20 	add.w	ip, r4, #32
 8001952:	4675      	mov	r5, lr
 8001954:	4626      	mov	r6, r4
 8001956:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001958:	6028      	str	r0, [r5, #0]
 800195a:	6069      	str	r1, [r5, #4]
 800195c:	60aa      	str	r2, [r5, #8]
 800195e:	60eb      	str	r3, [r5, #12]
 8001960:	3410      	adds	r4, #16
 8001962:	f10e 0e10 	add.w	lr, lr, #16
 8001966:	4564      	cmp	r4, ip
 8001968:	d1f3      	bne.n	8001952 <_ZN3USBC1Ev+0x3a>
 800196a:	4672      	mov	r2, lr
 800196c:	4623      	mov	r3, r4
 800196e:	cb03      	ldmia	r3!, {r0, r1}
 8001970:	6010      	str	r0, [r2, #0]
 8001972:	6051      	str	r1, [r2, #4]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	7213      	strb	r3, [r2, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <_ZN3USBC1Ev+0xc0>)
 800197c:	33e0      	adds	r3, #224	; 0xe0
 800197e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001980:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	33ec      	adds	r3, #236	; 0xec
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	831a      	strh	r2, [r3, #24]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	221a      	movs	r2, #26
 800199c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2203      	movs	r2, #3
 80019a4:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <_ZN3USBC1Ev+0xc4>)
 80019ac:	f503 7383 	add.w	r3, r3, #262	; 0x106
 80019b0:	6810      	ldr	r0, [r2, #0]
 80019b2:	6018      	str	r0, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <_ZN3USBC1Ev+0xc8>)
 80019b8:	f203 330a 	addw	r3, r3, #778	; 0x30a
 80019bc:	4611      	mov	r1, r2
 80019be:	224a      	movs	r2, #74	; 0x4a
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f99f 	bl	8001d04 <memcpy>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d0:	08001d54 	.word	0x08001d54
 80019d4:	08001d68 	.word	0x08001d68
 80019d8:	08001d94 	.word	0x08001d94
 80019dc:	08001da0 	.word	0x08001da0
 80019e0:	08001da4 	.word	0x08001da4

080019e4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	usb.USBInterruptHandler();
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <OTG_FS_IRQHandler+0x10>)
 80019ea:	f7fe fc7d 	bl	80002e8 <_ZN3USB19USBInterruptHandlerEv>
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000030 	.word	0x20000030

080019f8 <NMI_Handler>:

void NMI_Handler(void) {}
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HardFault_Handler>:

void HardFault_Handler(void) {
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
	while (1) {}
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:
}

void MemManage_Handler(void) {
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
	while (1) {}
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:
}

void BusFault_Handler(void) {
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
	while (1) {}
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	while (1) {}
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <SVC_Handler>:
}

void SVC_Handler(void) {}
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <PendSV_Handler>:

void PendSV_Handler(void) {}
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <SysTick_Handler>:

void SysTick_Handler(void) {}
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <main>:
}


extern uint32_t SystemCoreClock;
int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
	SystemInit();							// Activates floating point coprocessor and resets clock
 8001a5e:	f000 f87b 	bl	8001b58 <SystemInit>
	SystemClock_Config();					// Configure the clock and PLL - NB Currently done in SystemInit but will need updating for production board
 8001a62:	f7ff febd 	bl	80017e0 <_Z18SystemClock_Configv>
	SystemCoreClockUpdate();				// Update SystemCoreClock (system clock frequency) derived from settings of oscillators, prescalers and PLL
 8001a66:	f000 f8ad 	bl	8001bc4 <SystemCoreClockUpdate>
	InitBtnLED();							// PC13 blue button; PB7 is LD2 Blue; PB14 is LD3 Red
 8001a6a:	f7ff ff31 	bl	80018d0 <_Z10InitBtnLEDv>
	usb.InitUSB();
 8001a6e:	4813      	ldr	r0, [pc, #76]	; (8001abc <main+0x64>)
 8001a70:	f7ff f8c0 	bl	8000bf4 <_ZN3USB7InitUSBEv>

	int i = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]

	while (1)
	{
		if (GPIOC->IDR & GPIO_IDR_IDR_13) {
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <main+0x68>)
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00c      	beq.n	8001aa8 <main+0x50>
			GPIOB->BSRR |= GPIO_BSRR_BS_7;
 8001a8e:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <main+0x6c>)
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <main+0x6c>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a98:	6193      	str	r3, [r2, #24]
			GPIOB->BSRR |= GPIO_BSRR_BS_14;
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <main+0x6c>)
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <main+0x6c>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6193      	str	r3, [r2, #24]
 8001aa6:	e005      	b.n	8001ab4 <main+0x5c>
		}
		else
			GPIOB->BSRR |= GPIO_BSRR_BR_7;
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <main+0x6c>)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <main+0x6c>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ab2:	6193      	str	r3, [r2, #24]
		i++;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	607b      	str	r3, [r7, #4]
		if (GPIOC->IDR & GPIO_IDR_IDR_13) {
 8001aba:	e7dd      	b.n	8001a78 <main+0x20>
 8001abc:	20000030 	.word	0x20000030
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d102      	bne.n	8001ae8 <_Z41__static_initialization_and_destruction_0ii+0x20>
USB usb;
 8001ae2:	4803      	ldr	r0, [pc, #12]	; (8001af0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001ae4:	f7ff ff18 	bl	8001918 <_ZN3USBC1Ev>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000030 	.word	0x20000030

08001af4 <_GLOBAL__sub_I_usb>:
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7ff ffe3 	bl	8001ac8 <_Z41__static_initialization_and_destruction_0ii>
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b0a:	e003      	b.n	8001b14 <LoopCopyDataInit>

08001b0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b12:	3104      	adds	r1, #4

08001b14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b14:	480b      	ldr	r0, [pc, #44]	; (8001b44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b1c:	d3f6      	bcc.n	8001b0c <CopyDataInit>
  ldr  r2, =_sbss
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b20:	e002      	b.n	8001b28 <LoopFillZerobss>

08001b22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b24:	f842 3b04 	str.w	r3, [r2], #4

08001b28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b2c:	d3f9      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b2e:	f000 f813 	bl	8001b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b32:	f000 f8c3 	bl	8001cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b36:	f7ff ff8f 	bl	8001a58 <main>
  bx  lr    
 8001b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b40:	08001dfc 	.word	0x08001dfc
  ldr  r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b48:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001b4c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001b50:	20000518 	.word	0x20000518

08001b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC_IRQHandler>
	...

08001b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b5c:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <SystemInit+0x60>)
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <SystemInit+0x60>)
 8001b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b6c:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <SystemInit+0x64>)
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <SystemInit+0x64>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <SystemInit+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <SystemInit+0x64>)
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <SystemInit+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <SystemInit+0x64>)
 8001b90:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <SystemInit+0x68>)
 8001b92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b94:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <SystemInit+0x64>)
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <SystemInit+0x64>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SystemInit+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SystemInit+0x60>)
 8001ba8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bac:	609a      	str	r2, [r3, #8]
#endif
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	24003010 	.word	0x24003010

08001bc4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	2302      	movs	r3, #2
 8001bdc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001bde:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <SystemCoreClockUpdate+0xe4>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d007      	beq.n	8001bfe <SystemCoreClockUpdate+0x3a>
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d009      	beq.n	8001c06 <SystemCoreClockUpdate+0x42>
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d13d      	bne.n	8001c72 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <SystemCoreClockUpdate+0xe8>)
 8001bf8:	4a2d      	ldr	r2, [pc, #180]	; (8001cb0 <SystemCoreClockUpdate+0xec>)
 8001bfa:	601a      	str	r2, [r3, #0]
      break;
 8001bfc:	e03d      	b.n	8001c7a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <SystemCoreClockUpdate+0xe8>)
 8001c00:	4a2c      	ldr	r2, [pc, #176]	; (8001cb4 <SystemCoreClockUpdate+0xf0>)
 8001c02:	601a      	str	r2, [r3, #0]
      break;
 8001c04:	e039      	b.n	8001c7a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001c06:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <SystemCoreClockUpdate+0xe4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0d9b      	lsrs	r3, r3, #22
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c12:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <SystemCoreClockUpdate+0xe4>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00c      	beq.n	8001c3c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c22:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <SystemCoreClockUpdate+0xf0>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <SystemCoreClockUpdate+0xe4>)
 8001c2c:	6852      	ldr	r2, [r2, #4]
 8001c2e:	0992      	lsrs	r2, r2, #6
 8001c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e00b      	b.n	8001c54 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <SystemCoreClockUpdate+0xec>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <SystemCoreClockUpdate+0xe4>)
 8001c46:	6852      	ldr	r2, [r2, #4]
 8001c48:	0992      	lsrs	r2, r2, #6
 8001c4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <SystemCoreClockUpdate+0xe4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <SystemCoreClockUpdate+0xe8>)
 8001c6e:	6013      	str	r3, [r2, #0]
      break;
 8001c70:	e003      	b.n	8001c7a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <SystemCoreClockUpdate+0xe8>)
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <SystemCoreClockUpdate+0xec>)
 8001c76:	601a      	str	r2, [r3, #0]
      break;
 8001c78:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <SystemCoreClockUpdate+0xe4>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <SystemCoreClockUpdate+0xf4>)
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <SystemCoreClockUpdate+0xe8>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <SystemCoreClockUpdate+0xe8>)
 8001c98:	6013      	str	r3, [r2, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	007a1200 	.word	0x007a1200
 8001cb8:	20000004 	.word	0x20000004

08001cbc <__libc_init_array>:
 8001cbc:	b570      	push	{r4, r5, r6, lr}
 8001cbe:	4e0d      	ldr	r6, [pc, #52]	; (8001cf4 <__libc_init_array+0x38>)
 8001cc0:	4c0d      	ldr	r4, [pc, #52]	; (8001cf8 <__libc_init_array+0x3c>)
 8001cc2:	1ba4      	subs	r4, r4, r6
 8001cc4:	10a4      	asrs	r4, r4, #2
 8001cc6:	2500      	movs	r5, #0
 8001cc8:	42a5      	cmp	r5, r4
 8001cca:	d109      	bne.n	8001ce0 <__libc_init_array+0x24>
 8001ccc:	4e0b      	ldr	r6, [pc, #44]	; (8001cfc <__libc_init_array+0x40>)
 8001cce:	4c0c      	ldr	r4, [pc, #48]	; (8001d00 <__libc_init_array+0x44>)
 8001cd0:	f000 f824 	bl	8001d1c <_init>
 8001cd4:	1ba4      	subs	r4, r4, r6
 8001cd6:	10a4      	asrs	r4, r4, #2
 8001cd8:	2500      	movs	r5, #0
 8001cda:	42a5      	cmp	r5, r4
 8001cdc:	d105      	bne.n	8001cea <__libc_init_array+0x2e>
 8001cde:	bd70      	pop	{r4, r5, r6, pc}
 8001ce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ce4:	4798      	blx	r3
 8001ce6:	3501      	adds	r5, #1
 8001ce8:	e7ee      	b.n	8001cc8 <__libc_init_array+0xc>
 8001cea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cee:	4798      	blx	r3
 8001cf0:	3501      	adds	r5, #1
 8001cf2:	e7f2      	b.n	8001cda <__libc_init_array+0x1e>
 8001cf4:	08001df0 	.word	0x08001df0
 8001cf8:	08001df0 	.word	0x08001df0
 8001cfc:	08001df0 	.word	0x08001df0
 8001d00:	08001df8 	.word	0x08001df8

08001d04 <memcpy>:
 8001d04:	b510      	push	{r4, lr}
 8001d06:	1e43      	subs	r3, r0, #1
 8001d08:	440a      	add	r2, r1
 8001d0a:	4291      	cmp	r1, r2
 8001d0c:	d100      	bne.n	8001d10 <memcpy+0xc>
 8001d0e:	bd10      	pop	{r4, pc}
 8001d10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d18:	e7f7      	b.n	8001d0a <memcpy+0x6>
	...

08001d1c <_init>:
 8001d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1e:	bf00      	nop
 8001d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d22:	bc08      	pop	{r3}
 8001d24:	469e      	mov	lr, r3
 8001d26:	4770      	bx	lr

08001d28 <_fini>:
 8001d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2a:	bf00      	nop
 8001d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d2e:	bc08      	pop	{r3}
 8001d30:	469e      	mov	lr, r3
 8001d32:	4770      	bx	lr
