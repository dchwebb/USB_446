
USB_446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001908  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001acc  08001acc  00011acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08001b18  08001b18  00011b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b20  08001b20  00011b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002b4  20000014  08001b38  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200002c8  08001b38  000202c8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005d40  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000fbf  00000000  00000000  00025d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001d8  00000000  00000000  00026d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00026f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001941  00000000  00000000  000270c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001dc7  00000000  00000000  00028a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002a7d0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000610  00000000  00000000  0002a84c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002ae5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001ab4 	.word	0x08001ab4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08001ab4 	.word	0x08001ab4

08000204 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800020e:	4909      	ldr	r1, [pc, #36]	; (8000234 <NVIC_EnableIRQ+0x30>)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800021a:	f002 021f 	and.w	r2, r2, #31
 800021e:	2001      	movs	r0, #1
 8000220:	fa00 f202 	lsl.w	r2, r0, r2
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100

08000238 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	6039      	str	r1, [r7, #0]
 8000242:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000248:	2b00      	cmp	r3, #0
 800024a:	da0d      	bge.n	8000268 <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800024c:	490f      	ldr	r1, [pc, #60]	; (800028c <NVIC_SetPriority+0x54>)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	f003 030f 	and.w	r3, r3, #15
 8000258:	3b04      	subs	r3, #4
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	b2d2      	uxtb	r2, r2
 800025e:	0112      	lsls	r2, r2, #4
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	440b      	add	r3, r1
 8000264:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000266:	e00b      	b.n	8000280 <NVIC_SetPriority+0x48>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000268:	4a09      	ldr	r2, [pc, #36]	; (8000290 <NVIC_SetPriority+0x58>)
 800026a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026e:	4618      	mov	r0, r3
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	011b      	lsls	r3, r3, #4
 8000276:	b2d9      	uxtb	r1, r3
 8000278:	1813      	adds	r3, r2, r0
 800027a:	460a      	mov	r2, r1
 800027c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000ed00 	.word	0xe000ed00
 8000290:	e000e100 	.word	0xe000e100

08000294 <_ZN3USB19USBInterruptHandlerEv>:
#include <USB.h>

void USB::USBInterruptHandler() {
 8000294:	b580      	push	{r7, lr}
 8000296:	b092      	sub	sp, #72	; 0x48
 8000298:	af02      	add	r7, sp, #8
 800029a:	6078      	str	r0, [r7, #4]

	int epnum, ep_intr, epint;

	//int interruptCode = USB_ReadInterrupts();

	if (usbEventNo < 100) {
 800029c:	4b7f      	ldr	r3, [pc, #508]	; (800049c <_ZN3USB19USBInterruptHandlerEv+0x208>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b63      	cmp	r3, #99	; 0x63
 80002a2:	dd01      	ble.n	80002a8 <_ZN3USB19USBInterruptHandlerEv+0x14>
		}
		usbEventNo++;*/


	} else {
		int susp = 1;
 80002a4:	2301      	movs	r3, #1
 80002a6:	633b      	str	r3, [r7, #48]	; 0x30
	}

	// Handle spurious interrupt
	if (USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK == 0)
 80002a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002b2:	6992      	ldr	r2, [r2, #24]
 80002b4:	2a00      	cmp	r2, #0
 80002b6:	bf0c      	ite	eq
 80002b8:	2201      	moveq	r2, #1
 80002ba:	2200      	movne	r2, #0
 80002bc:	b2d2      	uxtb	r2, r2
 80002be:	4013      	ands	r3, r2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	bf14      	ite	ne
 80002c4:	2301      	movne	r3, #1
 80002c6:	2300      	moveq	r3, #0
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 840f 	bne.w	8000aee <_ZN3USB19USBInterruptHandlerEv+0x85a>
		return;

	// Handle Mode mismatch interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_MMIS)) {
 80002d0:	2102      	movs	r1, #2
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f001 f92c 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d007      	beq.n	80002ee <_ZN3USB19USBInterruptHandlerEv+0x5a>
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_MMIS;
 80002de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f003 0302 	and.w	r3, r3, #2
 80002ec:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 80000 OEPINT
	// OUT endpoint interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_OEPINT)) {
 80002ee:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f001 f91c 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f000 80d2 	beq.w	80004a4 <_ZN3USB19USBInterruptHandlerEv+0x210>

		// Read the output endpoint interrupt register to ascertain which endpoint(s) fired an interrupt
		ep_intr = ((USBx_DEVICE->DAINT & USBx_DEVICE->DAINTMSK) & 0xFFFF0000U) >> 16; // FIXME mask unnecessary with shift right?
 8000300:	4b67      	ldr	r3, [pc, #412]	; (80004a0 <_ZN3USB19USBInterruptHandlerEv+0x20c>)
 8000302:	699a      	ldr	r2, [r3, #24]
 8000304:	4b66      	ldr	r3, [pc, #408]	; (80004a0 <_ZN3USB19USBInterruptHandlerEv+0x20c>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	4013      	ands	r3, r2
 800030a:	0c1b      	lsrs	r3, r3, #16
 800030c:	b29b      	uxth	r3, r3
 800030e:	63fb      	str	r3, [r7, #60]	; 0x3c

		// process each endpoint in turn incrementing the epnum and checking the interrupts (ep_intr) if that endpoint fired
		epnum = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	613b      	str	r3, [r7, #16]
		while (ep_intr != 0) {
 8000314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000316:	2b00      	cmp	r3, #0
 8000318:	f000 80c4 	beq.w	80004a4 <_ZN3USB19USBInterruptHandlerEv+0x210>
			if ((ep_intr & 1) != 0) {
 800031c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	2b00      	cmp	r3, #0
 8000324:	f000 80b3 	beq.w	800048e <_ZN3USB19USBInterruptHandlerEv+0x1fa>
				epint = USBx_OUTEP(epnum)->DOEPINT & USBx_DEVICE->DOEPMSK;
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800032e:	3358      	adds	r3, #88	; 0x58
 8000330:	015b      	lsls	r3, r3, #5
 8000332:	689a      	ldr	r2, [r3, #8]
 8000334:	4b5a      	ldr	r3, [pc, #360]	; (80004a0 <_ZN3USB19USBInterruptHandlerEv+0x20c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4013      	ands	r3, r2
 800033a:	62fb      	str	r3, [r7, #44]	; 0x2c

				if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC) {		// Transfer completed
 800033c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	2b00      	cmp	r3, #0
 8000344:	d01a      	beq.n	800037c <_ZN3USB19USBInterruptHandlerEv+0xe8>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_XFRC;				// Clear interrupt
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800034c:	3358      	adds	r3, #88	; 0x58
 800034e:	015b      	lsls	r3, r3, #5
 8000350:	461a      	mov	r2, r3
 8000352:	2301      	movs	r3, #1
 8000354:	6093      	str	r3, [r2, #8]
					//(void)PCD_EP_OutXfrComplete_int(hpcd, epnum);					// Appears to lead to placeholder function, overridable in user program
					//if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
			        // STATUS PHASE completed, update ep0_state to idle
			        ep0_state = USBD_EP0_IDLE;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2200      	movs	r2, #0
 800035a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					//USBD_LL_StallEP(pdev, 0U);
				    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000364:	3358      	adds	r3, #88	; 0x58
 8000366:	015b      	lsls	r3, r3, #5
 8000368:	461a      	mov	r2, r3
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000370:	3358      	adds	r3, #88	; 0x58
 8000372:	015b      	lsls	r3, r3, #5
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800037a:	6013      	str	r3, [r2, #0]
				}

				if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) {		// SETUP phase done
 800037c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800037e:	f003 0308 	and.w	r3, r3, #8
 8000382:	2b00      	cmp	r3, #0
 8000384:	d05b      	beq.n	800043e <_ZN3USB19USBInterruptHandlerEv+0x1aa>
					/* Class B setup phase done for previous decoded setup */

					if (usbEventNo > 40) {
 8000386:	4b45      	ldr	r3, [pc, #276]	; (800049c <_ZN3USB19USBInterruptHandlerEv+0x208>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b28      	cmp	r3, #40	; 0x28
 800038c:	dd01      	ble.n	8000392 <_ZN3USB19USBInterruptHandlerEv+0xfe>
						int susp = 1;
 800038e:	2301      	movs	r3, #1
 8000390:	62bb      	str	r3, [r7, #40]	; 0x28

					//USBD_ParseSetupRequest(&pdev->request, psetup);
					//NB psetup refers to hcpd.Setup which is an array[12] named 'setup buffer' filled by USB_OTG_GINTSTS_RXFLVL

					// Parse Setup Request containing data in xfer_buff filled by RXFLVL interrupt
					uint8_t *pdata = (uint8_t*)xfer_buff;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	330c      	adds	r3, #12
 8000396:	60fb      	str	r3, [r7, #12]
					req.mRequest     = *(uint8_t *)  (pdata);
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	781a      	ldrb	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	701a      	strb	r2, [r3, #0]
					req.Request      = *(uint8_t *)  (pdata +  1);
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	785a      	ldrb	r2, [r3, #1]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	705a      	strb	r2, [r3, #1]
					req.Value        = SWAPBYTE      (pdata +  2);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3302      	adds	r3, #2
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	b29a      	uxth	r2, r3
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	3303      	adds	r3, #3
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	021b      	lsls	r3, r3, #8
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	4413      	add	r3, r2
 80003be:	b29a      	uxth	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	805a      	strh	r2, [r3, #2]
					req.Index        = SWAPBYTE      (pdata +  4);
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	3304      	adds	r3, #4
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	3305      	adds	r3, #5
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	021b      	lsls	r3, r3, #8
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	4413      	add	r3, r2
 80003da:	b29a      	uxth	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	809a      	strh	r2, [r3, #4]
					req.Length       = SWAPBYTE      (pdata +  6);
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	3306      	adds	r3, #6
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	b29a      	uxth	r2, r3
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	3307      	adds	r3, #7
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	021b      	lsls	r3, r3, #8
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	4413      	add	r3, r2
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	80da      	strh	r2, [r3, #6]

					//pdev->ep0_data_len = pdev->request.wLength;
					ep0_state = USBD_EP0_SETUP;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2201      	movs	r2, #1
 8000400:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					switch (req.mRequest & 0x1F)		// originally USBD_LL_SetupStage
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	f003 031f 	and.w	r3, r3, #31
 800040c:	2b01      	cmp	r3, #1
 800040e:	d00b      	beq.n	8000428 <_ZN3USB19USBInterruptHandlerEv+0x194>
 8000410:	2b02      	cmp	r3, #2
 8000412:	d00b      	beq.n	800042c <_ZN3USB19USBInterruptHandlerEv+0x198>
 8000414:	2b00      	cmp	r3, #0
 8000416:	d000      	beq.n	800041a <_ZN3USB19USBInterruptHandlerEv+0x186>
						//USBD_StdEPReq(pdev, req);
						break;

					default:
						//USBD_LL_StallEP(pdev, (req.mRequest & 0x80U));
						break;
 8000418:	e009      	b.n	800042e <_ZN3USB19USBInterruptHandlerEv+0x19a>
						USBD_StdDevReq(req);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f000 fecf 	bl	80011c4 <_ZN3USB14USBD_StdDevReqE10usbRequest>
						break;
 8000426:	e002      	b.n	800042e <_ZN3USB19USBInterruptHandlerEv+0x19a>
						break;
 8000428:	bf00      	nop
 800042a:	e000      	b.n	800042e <_ZN3USB19USBInterruptHandlerEv+0x19a>
						break;
 800042c:	bf00      	nop
					}

					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_STUP;				// Clear interrupt
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000434:	3358      	adds	r3, #88	; 0x58
 8000436:	015b      	lsls	r3, r3, #5
 8000438:	461a      	mov	r2, r3
 800043a:	2308      	movs	r3, #8
 800043c:	6093      	str	r3, [r2, #8]
				}

				if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS) {	// OUT token received when endpoint disabled
 800043e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	2b00      	cmp	r3, #0
 8000446:	d007      	beq.n	8000458 <_ZN3USB19USBInterruptHandlerEv+0x1c4>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_OTEPDIS;			// Clear interrupt
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800044e:	3358      	adds	r3, #88	; 0x58
 8000450:	015b      	lsls	r3, r3, #5
 8000452:	461a      	mov	r2, r3
 8000454:	2310      	movs	r3, #16
 8000456:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {	// Status Phase Received interrupt
 8000458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800045a:	f003 0320 	and.w	r3, r3, #32
 800045e:	2b00      	cmp	r3, #0
 8000460:	d007      	beq.n	8000472 <_ZN3USB19USBInterruptHandlerEv+0x1de>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_OTEPSPR;			// Clear interrupt
 8000462:	693b      	ldr	r3, [r7, #16]
 8000464:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000468:	3358      	adds	r3, #88	; 0x58
 800046a:	015b      	lsls	r3, r3, #5
 800046c:	461a      	mov	r2, r3
 800046e:	2320      	movs	r3, #32
 8000470:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK) {			// OUT NAK interrupt
 8000472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000478:	2b00      	cmp	r3, #0
 800047a:	d008      	beq.n	800048e <_ZN3USB19USBInterruptHandlerEv+0x1fa>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_NAK;				// Clear interrupt
 800047c:	693b      	ldr	r3, [r7, #16]
 800047e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000482:	3358      	adds	r3, #88	; 0x58
 8000484:	015b      	lsls	r3, r3, #5
 8000486:	461a      	mov	r2, r3
 8000488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048c:	6093      	str	r3, [r2, #8]
				}
			}
			epnum++;
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	3301      	adds	r3, #1
 8000492:	613b      	str	r3, [r7, #16]
			ep_intr >>= 1U;
 8000494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000496:	105b      	asrs	r3, r3, #1
 8000498:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (ep_intr != 0) {
 800049a:	e73b      	b.n	8000314 <_ZN3USB19USBInterruptHandlerEv+0x80>
 800049c:	200002c4 	.word	0x200002c4
 80004a0:	50000800 	.word	0x50000800

	}

	/////////////////////////////////////////////// 40000 IEPINT
	// IN endpoint interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_IEPINT))
 80004a4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f001 f841 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	f000 813d 	beq.w	8000730 <_ZN3USB19USBInterruptHandlerEv+0x49c>
	{

		// Read in the device interrupt bits [initially 1]
		ep_intr = (USBx_DEVICE->DAINT & USBx_DEVICE->DAINTMSK) & 0xFFFFU;
 80004b6:	4b9d      	ldr	r3, [pc, #628]	; (800072c <_ZN3USB19USBInterruptHandlerEv+0x498>)
 80004b8:	699a      	ldr	r2, [r3, #24]
 80004ba:	4b9c      	ldr	r3, [pc, #624]	; (800072c <_ZN3USB19USBInterruptHandlerEv+0x498>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4013      	ands	r3, r2
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	63fb      	str	r3, [r7, #60]	; 0x3c

		// process each endpoint in turn incrementing the epnum and checking the interrupts (ep_intr) if that endpoint fired
		epnum = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
		while (ep_intr != 0U) {
 80004c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f000 8130 	beq.w	8000730 <_ZN3USB19USBInterruptHandlerEv+0x49c>
			if ((ep_intr & 0x1) != 0) { // In ITR [initially true]
 80004d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	f000 8121 	beq.w	800071e <_ZN3USB19USBInterruptHandlerEv+0x48a>
				// epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);

				// [initially 0x80]
				epint = USBx_INEP((uint32_t)epnum)->DIEPINT & (USBx_DEVICE->DIEPMSK | (((USBx_DEVICE->DIEPEMPMSK >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7));
 80004dc:	693b      	ldr	r3, [r7, #16]
 80004de:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80004e2:	3348      	adds	r3, #72	; 0x48
 80004e4:	015b      	lsls	r3, r3, #5
 80004e6:	689a      	ldr	r2, [r3, #8]
 80004e8:	4b90      	ldr	r3, [pc, #576]	; (800072c <_ZN3USB19USBInterruptHandlerEv+0x498>)
 80004ea:	6919      	ldr	r1, [r3, #16]
 80004ec:	4b8f      	ldr	r3, [pc, #572]	; (800072c <_ZN3USB19USBInterruptHandlerEv+0x498>)
 80004ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	f003 030f 	and.w	r3, r3, #15
 80004f6:	fa20 f303 	lsr.w	r3, r0, r3
 80004fa:	01db      	lsls	r3, r3, #7
 80004fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000500:	430b      	orrs	r3, r1
 8000502:	4013      	ands	r3, r2
 8000504:	62fb      	str	r3, [r7, #44]	; 0x2c

				if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC) {
 8000506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d04d      	beq.n	80005ac <_ZN3USB19USBInterruptHandlerEv+0x318>
					uint32_t fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	f003 030f 	and.w	r3, r3, #15
 8000516:	2201      	movs	r2, #1
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	627b      	str	r3, [r7, #36]	; 0x24
					USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800051e:	4983      	ldr	r1, [pc, #524]	; (800072c <_ZN3USB19USBInterruptHandlerEv+0x498>)
 8000520:	4b82      	ldr	r3, [pc, #520]	; (800072c <_ZN3USB19USBInterruptHandlerEv+0x498>)
 8000522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	43db      	mvns	r3, r3
 8000528:	4013      	ands	r3, r2
 800052a:	634b      	str	r3, [r1, #52]	; 0x34

					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_XFRC;
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000532:	3348      	adds	r3, #72	; 0x48
 8000534:	015b      	lsls	r3, r3, #5
 8000536:	461a      	mov	r2, r3
 8000538:	2301      	movs	r3, #1
 800053a:	6093      	str	r3, [r2, #8]


					//HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);

					if (ep0_state == USBD_EP0_DATA_IN) {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000542:	2b02      	cmp	r3, #2
 8000544:	d122      	bne.n	800058c <_ZN3USB19USBInterruptHandlerEv+0x2f8>

						USB_EPSetStall(epnum);
 8000546:	693b      	ldr	r3, [r7, #16]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	4619      	mov	r1, r3
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 ff9d 	bl	800148c <_ZN3USB14USB_EPSetStallEh>

						ep0_state = USBD_EP0_STATUS_OUT;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2205      	movs	r2, #5
 8000556:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

						//HAL_PCD_EP_Receive
						xfer_buff[0] = 0;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
						//xfer_len = 0;
						outCount = 0;		// FIXME - outCount and xfer_count confusing
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
						xfer_count = 0;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2200      	movs	r2, #0
 800056c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						if (epnum == 0) {
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d11a      	bne.n	80005ac <_ZN3USB19USBInterruptHandlerEv+0x318>
							USB_EP0StartXfer(false, 0, nullptr, outBuffSize);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 fe7b 	bl	8001280 <_ZN3USB16USB_EP0StartXferEbhPhm>
 800058a:	e00f      	b.n	80005ac <_ZN3USB19USBInterruptHandlerEv+0x318>
						} else {
							//USB_EPStartXfer(false, epnum, nullptr, outBuffSize);
						}
					}
					else if ((ep0_state == USBD_EP0_STATUS_IN) || (ep0_state == USBD_EP0_IDLE))		// second time around
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000592:	2b04      	cmp	r3, #4
 8000594:	d004      	beq.n	80005a0 <_ZN3USB19USBInterruptHandlerEv+0x30c>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800059c:	2b00      	cmp	r3, #0
 800059e:	d105      	bne.n	80005ac <_ZN3USB19USBInterruptHandlerEv+0x318>
					{
						USB_EPSetStall(epnum);
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 ff70 	bl	800148c <_ZN3USB14USB_EPSetStallEh>
					}
				}


				if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC) {
 80005ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ae:	f003 0308 	and.w	r3, r3, #8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d007      	beq.n	80005c6 <_ZN3USB19USBInterruptHandlerEv+0x332>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_TOC;
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80005bc:	3348      	adds	r3, #72	; 0x48
 80005be:	015b      	lsls	r3, r3, #5
 80005c0:	461a      	mov	r2, r3
 80005c2:	2308      	movs	r3, #8
 80005c4:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE) {
 80005c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c8:	f003 0310 	and.w	r3, r3, #16
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d007      	beq.n	80005e0 <_ZN3USB19USBInterruptHandlerEv+0x34c>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_ITTXFE;
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80005d6:	3348      	adds	r3, #72	; 0x48
 80005d8:	015b      	lsls	r3, r3, #5
 80005da:	461a      	mov	r2, r3
 80005dc:	2310      	movs	r3, #16
 80005de:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE) {
 80005e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d007      	beq.n	80005fa <_ZN3USB19USBInterruptHandlerEv+0x366>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_INEPNE;
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80005f0:	3348      	adds	r3, #72	; 0x48
 80005f2:	015b      	lsls	r3, r3, #5
 80005f4:	461a      	mov	r2, r3
 80005f6:	2340      	movs	r3, #64	; 0x40
 80005f8:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD) {
 80005fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fc:	f003 0302 	and.w	r3, r3, #2
 8000600:	2b00      	cmp	r3, #0
 8000602:	d007      	beq.n	8000614 <_ZN3USB19USBInterruptHandlerEv+0x380>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_EPDISD;
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800060a:	3348      	adds	r3, #72	; 0x48
 800060c:	015b      	lsls	r3, r3, #5
 800060e:	461a      	mov	r2, r3
 8000610:	2302      	movs	r3, #2
 8000612:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE) {
 8000614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	2b00      	cmp	r3, #0
 800061c:	d07f      	beq.n	800071e <_ZN3USB19USBInterruptHandlerEv+0x48a>
					//(void)PCD_WriteEmptyTxFifo(hpcd, epnum);

					uint32_t len, len32b;
					if (outCount > outBuffSize) {			// Error
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800062a:	429a      	cmp	r2, r3
 800062c:	f200 8261 	bhi.w	8000af2 <_ZN3USB19USBInterruptHandlerEv+0x85e>
						return;
					}

					len = outBuffSize - outCount;		// outBuffSize is number of bytes to transfer; outCount is number transferred
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
					if (len > maxPacket)	len = maxPacket;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7a1b      	ldrb	r3, [r3, #8]
 8000644:	461a      	mov	r2, r3
 8000646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000648:	429a      	cmp	r2, r3
 800064a:	d202      	bcs.n	8000652 <_ZN3USB19USBInterruptHandlerEv+0x3be>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	7a1b      	ldrb	r3, [r3, #8]
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
					len32b = (len + 3U) / 4U;
 8000652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000654:	3303      	adds	r3, #3
 8000656:	089b      	lsrs	r3, r3, #2
 8000658:	637b      	str	r3, [r7, #52]	; 0x34

					while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (outCount < outBuffSize) && (outBuffSize != 0U))
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000660:	3348      	adds	r3, #72	; 0x48
 8000662:	015b      	lsls	r3, r3, #5
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	b29a      	uxth	r2, r3
 8000668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066a:	429a      	cmp	r2, r3
 800066c:	d30e      	bcc.n	800068c <_ZN3USB19USBInterruptHandlerEv+0x3f8>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800067a:	429a      	cmp	r2, r3
 800067c:	d206      	bcs.n	800068c <_ZN3USB19USBInterruptHandlerEv+0x3f8>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <_ZN3USB19USBInterruptHandlerEv+0x3f8>
 8000688:	2301      	movs	r3, #1
 800068a:	e000      	b.n	800068e <_ZN3USB19USBInterruptHandlerEv+0x3fa>
 800068c:	2300      	movs	r3, #0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d02f      	beq.n	80006f2 <_ZN3USB19USBInterruptHandlerEv+0x45e>
					{
						// Write to the FIFO
						len = outBuffSize - outCount;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
						if (len > maxPacket)	len = maxPacket;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7a1b      	ldrb	r3, [r3, #8]
 80006a6:	461a      	mov	r2, r3
 80006a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d202      	bcs.n	80006b4 <_ZN3USB19USBInterruptHandlerEv+0x420>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7a1b      	ldrb	r3, [r3, #8]
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
						len32b = (len + 3U) / 4U;
 80006b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006b6:	3303      	adds	r3, #3
 80006b8:	089b      	lsrs	r3, r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34

						USB_WritePacket(outBuff, epnum, (uint16_t)len);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	461a      	mov	r2, r3
 80006c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 fc32 	bl	8000f34 <_ZN3USB15USB_WritePacketEPhmt>

						outBuff  += len;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80006d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006d8:	441a      	add	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
						outCount += len;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80006e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e8:	441a      	add	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (outCount < outBuffSize) && (outBuffSize != 0U))
 80006f0:	e7b3      	b.n	800065a <_ZN3USB19USBInterruptHandlerEv+0x3c6>
					}

					if (outBuffSize <= outCount) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80006fe:	429a      	cmp	r2, r3
 8000700:	d80d      	bhi.n	800071e <_ZN3USB19USBInterruptHandlerEv+0x48a>
						uint32_t fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	f003 030f 	and.w	r3, r3, #15
 8000708:	2201      	movs	r2, #1
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	623b      	str	r3, [r7, #32]
						USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000710:	4906      	ldr	r1, [pc, #24]	; (800072c <_ZN3USB19USBInterruptHandlerEv+0x498>)
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <_ZN3USB19USBInterruptHandlerEv+0x498>)
 8000714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000716:	6a3b      	ldr	r3, [r7, #32]
 8000718:	43db      	mvns	r3, r3
 800071a:	4013      	ands	r3, r2
 800071c:	634b      	str	r3, [r1, #52]	; 0x34
					}


				}
			}
			epnum++;
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	3301      	adds	r3, #1
 8000722:	613b      	str	r3, [r7, #16]
			ep_intr >>= 1U;
 8000724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000726:	105b      	asrs	r3, r3, #1
 8000728:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (ep_intr != 0U) {
 800072a:	e6cd      	b.n	80004c8 <_ZN3USB19USBInterruptHandlerEv+0x234>
 800072c:	50000800 	.word	0x50000800

	}

	/////////////////////////////////////////////// 80000000 USB_OTG_GINTSTS_WKUINT
	// Handle Resume Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_WKUINT))
 8000730:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 fefb 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00d      	beq.n	800075c <_ZN3USB19USBInterruptHandlerEv+0x4c8>
	{
		// Clear the Remote Wake-up Signaling
		USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000740:	4aad      	ldr	r2, [pc, #692]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 8000742:	4bad      	ldr	r3, [pc, #692]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f023 0301 	bic.w	r3, r3, #1
 800074a:	6053      	str	r3, [r2, #4]

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_WKUINT;
 800074c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000750:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800075a:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 800 USBSUSP
	// Handle Suspend Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_USBSUSP))
 800075c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 fee5 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d018      	beq.n	800079e <_ZN3USB19USBInterruptHandlerEv+0x50a>
	{

		if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800076c:	4ba2      	ldr	r3, [pc, #648]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	2b01      	cmp	r3, #1
 8000776:	bf0c      	ite	eq
 8000778:	2301      	moveq	r3, #1
 800077a:	2300      	movne	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d005      	beq.n	800078e <_ZN3USB19USBInterruptHandlerEv+0x4fa>
		{
			//USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);		// stores status of suspend pdev->dev_state  = USBD_STATE_SUSPENDED
			USBx_PCGCCTL |= USB_OTG_PCGCCTL_STOPCLK;
 8000782:	4a9e      	ldr	r2, [pc, #632]	; (80009fc <_ZN3USB19USBInterruptHandlerEv+0x768>)
 8000784:	4b9d      	ldr	r3, [pc, #628]	; (80009fc <_ZN3USB19USBInterruptHandlerEv+0x768>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6013      	str	r3, [r2, #0]
		}
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_USBSUSP;
 800078e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000792:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800079c:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 1000 USB_OTG_GINTSTS_USBRST
	// Handle Reset Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_USBRST))
 800079e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 fec4 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	f000 8094 	beq.w	80008d8 <_ZN3USB19USBInterruptHandlerEv+0x644>
	{
		USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80007b0:	4a91      	ldr	r2, [pc, #580]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 80007b2:	4b91      	ldr	r3, [pc, #580]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f023 0301 	bic.w	r3, r3, #1
 80007ba:	6053      	str	r3, [r2, #4]

		// USB_FlushTxFifo
		USB_OTG_FS->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (0x10 << 6));
 80007bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007c0:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80007c4:	611a      	str	r2, [r3, #16]
		while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80007c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	f003 0320 	and.w	r3, r3, #32
 80007d0:	2b20      	cmp	r3, #32
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d000      	beq.n	80007e0 <_ZN3USB19USBInterruptHandlerEv+0x54c>
 80007de:	e7f2      	b.n	80007c6 <_ZN3USB19USBInterruptHandlerEv+0x532>

		for (int i = 0; i < 6; i++) {				// hpcd->Init.dev_endpoints
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b05      	cmp	r3, #5
 80007e8:	dc33      	bgt.n	8000852 <_ZN3USB19USBInterruptHandlerEv+0x5be>
			USBx_INEP(i)->DIEPINT = 0xFB7FU;		// see p1177 for explanation: based on datasheet should be more like 0b10100100111011
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80007f0:	3348      	adds	r3, #72	; 0x48
 80007f2:	015b      	lsls	r3, r3, #5
 80007f4:	461a      	mov	r2, r3
 80007f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80007fa:	6093      	str	r3, [r2, #8]
			USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000802:	3348      	adds	r3, #72	; 0x48
 8000804:	015b      	lsls	r3, r3, #5
 8000806:	461a      	mov	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800080e:	3348      	adds	r3, #72	; 0x48
 8000810:	015b      	lsls	r3, r3, #5
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000818:	6013      	str	r3, [r2, #0]
			USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000820:	3358      	adds	r3, #88	; 0x58
 8000822:	015b      	lsls	r3, r3, #5
 8000824:	461a      	mov	r2, r3
 8000826:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800082a:	6093      	str	r3, [r2, #8]
			USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000832:	3358      	adds	r3, #88	; 0x58
 8000834:	015b      	lsls	r3, r3, #5
 8000836:	461a      	mov	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800083e:	3358      	adds	r3, #88	; 0x58
 8000840:	015b      	lsls	r3, r3, #5
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000848:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 6; i++) {				// hpcd->Init.dev_endpoints
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	3301      	adds	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	e7c8      	b.n	80007e4 <_ZN3USB19USBInterruptHandlerEv+0x550>
		}
		USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000852:	4a69      	ldr	r2, [pc, #420]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 8000854:	4b68      	ldr	r3, [pc, #416]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800085c:	61d3      	str	r3, [r2, #28]

		USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
				USB_OTG_DOEPMSK_XFRCM |
				USB_OTG_DOEPMSK_EPDM |
				USB_OTG_DOEPMSK_OTEPSPRM |
				USB_OTG_DOEPMSK_NAKM;
 800085e:	4a66      	ldr	r2, [pc, #408]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 8000860:	4b65      	ldr	r3, [pc, #404]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000868:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
		USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800086c:	6153      	str	r3, [r2, #20]

		USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
				USB_OTG_DIEPMSK_XFRCM |
				USB_OTG_DIEPMSK_EPDM;
 800086e:	4a62      	ldr	r2, [pc, #392]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 8000870:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	f043 030b 	orr.w	r3, r3, #11
		USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8000878:	6113      	str	r3, [r2, #16]

		// Set Default Address to 0
		USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800087a:	4a5f      	ldr	r2, [pc, #380]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 800087c:	4b5e      	ldr	r3, [pc, #376]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000884:	6013      	str	r3, [r2, #0]

		// setup EP0 to receive SETUP packets
		if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) != USB_OTG_DOEPCTL_EPENA)	{
 8000886:	4b5e      	ldr	r3, [pc, #376]	; (8000a00 <_ZN3USB19USBInterruptHandlerEv+0x76c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800088e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d014      	beq.n	80008c8 <_ZN3USB19USBInterruptHandlerEv+0x634>
			USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800089e:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <_ZN3USB19USBInterruptHandlerEv+0x76c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));		// Set PKTCNT to 1
 80008a4:	4a56      	ldr	r2, [pc, #344]	; (8000a00 <_ZN3USB19USBInterruptHandlerEv+0x76c>)
 80008a6:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <_ZN3USB19USBInterruptHandlerEv+0x76c>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008ae:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);									// Set XFRSIZ to 24
 80008b0:	4a53      	ldr	r2, [pc, #332]	; (8000a00 <_ZN3USB19USBInterruptHandlerEv+0x76c>)
 80008b2:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <_ZN3USB19USBInterruptHandlerEv+0x76c>)
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	f043 0318 	orr.w	r3, r3, #24
 80008ba:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;					// Set STUPCNT to 3
 80008bc:	4a50      	ldr	r2, [pc, #320]	; (8000a00 <_ZN3USB19USBInterruptHandlerEv+0x76c>)
 80008be:	4b50      	ldr	r3, [pc, #320]	; (8000a00 <_ZN3USB19USBInterruptHandlerEv+0x76c>)
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80008c6:	6113      	str	r3, [r2, #16]
		}

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_USBRST;
 80008c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d6:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 2000 USB_OTG_GINTSTS_ENUMDNE
	// Handle Enumeration done Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_ENUMDNE))
 80008d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f000 fe27 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d04b      	beq.n	8000980 <_ZN3USB19USBInterruptHandlerEv+0x6ec>
	{
		// Set the MPS of the IN EP based on the enumeration speed
		USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80008e8:	4a46      	ldr	r2, [pc, #280]	; (8000a04 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80008ea:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80008f2:	f023 0307 	bic.w	r3, r3, #7
 80008f6:	6013      	str	r3, [r2, #0]
#define DSTS_ENUMSPD_LS_PHY_6MHZ               (2U << 1)
		if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ) {
 80008f8:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	f003 0306 	and.w	r3, r3, #6
 8000900:	2b04      	cmp	r3, #4
 8000902:	bf0c      	ite	eq
 8000904:	2301      	moveq	r3, #1
 8000906:	2300      	movne	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d005      	beq.n	800091a <_ZN3USB19USBInterruptHandlerEv+0x686>
			USBx_INEP(0U)->DIEPCTL |= 3U;
 800090e:	4a3d      	ldr	r2, [pc, #244]	; (8000a04 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 8000910:	4b3c      	ldr	r3, [pc, #240]	; (8000a04 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f043 0303 	orr.w	r3, r3, #3
 8000918:	6013      	str	r3, [r2, #0]
		}
		USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;		//  Clear global IN NAK
 800091a:	4a37      	ldr	r2, [pc, #220]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 800091c:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <_ZN3USB19USBInterruptHandlerEv+0x764>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000924:	6053      	str	r3, [r2, #4]

		// Assuming Full Speed USB and clock > 32MHz Set USB Turnaround time
		int UsbTrd = 0x6U;
 8000926:	2306      	movs	r3, #6
 8000928:	61fb      	str	r3, [r7, #28]

		USB_OTG_FS->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800092a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800092e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000938:	60d3      	str	r3, [r2, #12]
		USB_OTG_FS->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800093a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800093e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	029b      	lsls	r3, r3, #10
 8000948:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800094c:	4313      	orrs	r3, r2
 800094e:	60cb      	str	r3, [r1, #12]

		// Set Speed. pdev->dev_speed = 1

		// Open EP0 OUT
		USB_ActivateEndpoint(0, false, 0);
 8000950:	2300      	movs	r3, #0
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 fa46 	bl	8000de8 <_ZN3USB20USB_ActivateEndpointEmbh>
		USB_ActivateEndpoint(0, true, 0);		// Open EP0 IN
 800095c:	2300      	movs	r3, #0
 800095e:	2201      	movs	r2, #1
 8000960:	2100      	movs	r1, #0
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 fa40 	bl	8000de8 <_ZN3USB20USB_ActivateEndpointEmbh>

		ep0_state = USBD_EP0_IDLE;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_ENUMDNE;
 8000970:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000974:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097e:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 10 RXFLVL
	// Handle RxQLevel Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_RXFLVL))
 8000980:	2110      	movs	r1, #16
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 fdd4 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d05c      	beq.n	8000a48 <_ZN3USB19USBInterruptHandlerEv+0x7b4>
	{

		USB_OTG_FS->GINTMSK &= ~USB_OTG_GINTSTS_RXFLVL;
 800098e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000992:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f023 0310 	bic.w	r3, r3, #16
 800099c:	6193      	str	r3, [r2, #24]

		uint32_t temp = USB_OTG_FS->GRXSTSP;		//OTG receive status debug read/OTG status read and	pop registers (OTG_GRXSTSR/OTG_GRXSTSP) not shown in SFR
 800099e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	61bb      	str	r3, [r7, #24]

		// Get the endpoint number
		epnum = temp & USB_OTG_GRXSTSP_EPNUM;
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	f003 030f 	and.w	r3, r3, #15
 80009ac:	613b      	str	r3, [r7, #16]

		if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_DATA_UPDT) {
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	0c5b      	lsrs	r3, r3, #17
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d126      	bne.n	8000a08 <_ZN3USB19USBInterruptHandlerEv+0x774>
			if ((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80009c0:	4013      	ands	r3, r2
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d038      	beq.n	8000a38 <_ZN3USB19USBInterruptHandlerEv+0x7a4>
			{
				USB_ReadPacket(xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f103 010c 	add.w	r1, r3, #12
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	091b      	lsrs	r3, r3, #4
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 fa84 	bl	8000ee8 <_ZN3USB14USB_ReadPacketEPmt>

				//xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
				xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	091b      	lsrs	r3, r3, #4
 80009ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009ee:	441a      	add	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80009f6:	e01f      	b.n	8000a38 <_ZN3USB19USBInterruptHandlerEv+0x7a4>
 80009f8:	50000800 	.word	0x50000800
 80009fc:	50000e00 	.word	0x50000e00
 8000a00:	50000b00 	.word	0x50000b00
 8000a04:	50000900 	.word	0x50000900
			}
		}
		else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT) {
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	0c5b      	lsrs	r3, r3, #17
 8000a0c:	f003 030f 	and.w	r3, r3, #15
 8000a10:	2b06      	cmp	r3, #6
 8000a12:	d111      	bne.n	8000a38 <_ZN3USB19USBInterruptHandlerEv+0x7a4>
			USB_ReadPacket(xfer_buff, 8U);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	330c      	adds	r3, #12
 8000a18:	2208      	movs	r2, #8
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 fa63 	bl	8000ee8 <_ZN3USB14USB_ReadPacketEPmt>
			xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	091b      	lsrs	r3, r3, #4
 8000a2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a30:	441a      	add	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		}

		USB_OTG_FS->GINTMSK |= USB_OTG_GINTSTS_RXFLVL;
 8000a38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	6193      	str	r3, [r2, #24]
	}

	/////////////////////////////////////////////// 8 SOF
	// Handle SOF Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_SOF))
 8000a48:	2108      	movs	r1, #8
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 fd70 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d007      	beq.n	8000a66 <_ZN3USB19USBInterruptHandlerEv+0x7d2>
	{
		// Doesn't seem to do anything
		//HAL_PCD_SOFCallback(hpcd);

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_SOF;
 8000a56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	6153      	str	r3, [r2, #20]
	}

	/* Handle Incomplete ISO IN Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_IISOIXFR))
 8000a66:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 fd60 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d007      	beq.n	8000a86 <_ZN3USB19USBInterruptHandlerEv+0x7f2>
	{
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_IISOIXFR;
 8000a76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a84:	6153      	str	r3, [r2, #20]
	}

	/* Handle Incomplete ISO OUT Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000a86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 fd50 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d007      	beq.n	8000aa6 <_ZN3USB19USBInterruptHandlerEv+0x812>
	{
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_PXFR_INCOMPISOOUT;
 8000a96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa4:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 40000000 SRQINT
	// Handle Connection event Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_SRQINT))
 8000aa6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 fd40 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <_ZN3USB19USBInterruptHandlerEv+0x832>
	{
		//HAL_PCD_ConnectCallback(hpcd);		// this doesn't seem to do anything

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_SRQINT;
 8000ab6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000aba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000ac4:	6153      	str	r3, [r2, #20]
	}

	/* Handle Disconnection event Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_OTGINT))
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 fd31 	bl	8001530 <_ZN3USB18USB_ReadInterruptsEm>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00f      	beq.n	8000af4 <_ZN3USB19USBInterruptHandlerEv+0x860>
	{
		uint32_t temp = USB_OTG_FS->GOTGINT;
 8000ad4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	617b      	str	r3, [r7, #20]
		if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
		{
			//HAL_PCD_DisconnectCallback(hpcd);
			//pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
		}
		USB_OTG_FS->GOTGINT |= temp;
 8000adc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000ae0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	604b      	str	r3, [r1, #4]
 8000aec:	e002      	b.n	8000af4 <_ZN3USB19USBInterruptHandlerEv+0x860>
		return;
 8000aee:	bf00      	nop
 8000af0:	e000      	b.n	8000af4 <_ZN3USB19USBInterruptHandlerEv+0x860>
						return;
 8000af2:	bf00      	nop
		}
	}
#endif
	 */

}
 8000af4:	3740      	adds	r7, #64	; 0x40
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop

08000afc <_ZN3USB7InitUSBEv>:



void USB::InitUSB()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	// *********************  HAL_PCD_MspInit() in /Src/usbd_conf.c

	// USB_OTG_FS GPIO Configuration: PA8: USB_OTG_FS_SOF; PA9: USB_OTG_FS_VBUS; PA10: USB_OTG_FS_ID; PA11: USB_OTG_FS_DM; PA12: USB_OTG_FS_DP
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000b04:	4ab1      	ldr	r2, [pc, #708]	; (8000dcc <_ZN3USB7InitUSBEv+0x2d0>)
 8000b06:	4bb1      	ldr	r3, [pc, #708]	; (8000dcc <_ZN3USB7InitUSBEv+0x2d0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30

	// PA8, PA10, PA11, PA12 (NB PA9 - VBUS uses default values)
	GPIOA->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1 | GPIO_MODER_MODER12_1;					// 10: Alternate function mode
 8000b10:	4aaf      	ldr	r2, [pc, #700]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b12:	4baf      	ldr	r3, [pc, #700]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f043 7328 	orr.w	r3, r3, #44040192	; 0x2a00000
 8000b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR10 | GPIO_OSPEEDER_OSPEEDR11 | GPIO_OSPEEDER_OSPEEDR12;		// 11: High speed
 8000b20:	4aab      	ldr	r2, [pc, #684]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b22:	4bab      	ldr	r3, [pc, #684]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f043 737c 	orr.w	r3, r3, #66060288	; 0x3f00000
 8000b2a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000b2e:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[1] |= (10 << 0) | (10 << 8) | (10 << 12) | (10 << 16);															// Alternate Function 10 is OTG_FS
 8000b30:	4aa7      	ldr	r2, [pc, #668]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b32:	4ba7      	ldr	r3, [pc, #668]	; (8000dd0 <_ZN3USB7InitUSBEv+0x2d4>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b36:	f043 130a 	orr.w	r3, r3, #655370	; 0xa000a
 8000b3a:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000b3e:	6253      	str	r3, [r2, #36]	; 0x24

	RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN;				// USB OTG FS clock enable
 8000b40:	4aa2      	ldr	r2, [pc, #648]	; (8000dcc <_ZN3USB7InitUSBEv+0x2d0>)
 8000b42:	4ba2      	ldr	r3, [pc, #648]	; (8000dcc <_ZN3USB7InitUSBEv+0x2d0>)
 8000b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4a:	6353      	str	r3, [r2, #52]	; 0x34
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;				// Enable system configuration clock: used to manage external interrupt line connection to GPIOs
 8000b4c:	4a9f      	ldr	r2, [pc, #636]	; (8000dcc <_ZN3USB7InitUSBEv+0x2d0>)
 8000b4e:	4b9f      	ldr	r3, [pc, #636]	; (8000dcc <_ZN3USB7InitUSBEv+0x2d0>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b56:	6453      	str	r3, [r2, #68]	; 0x44

	NVIC_SetPriority(OTG_FS_IRQn, 0);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2043      	movs	r0, #67	; 0x43
 8000b5c:	f7ff fb6c 	bl	8000238 <NVIC_SetPriority>
	NVIC_EnableIRQ(OTG_FS_IRQn);
 8000b60:	2043      	movs	r0, #67	; 0x43
 8000b62:	f7ff fb4f 	bl	8000204 <NVIC_EnableIRQ>

	// *********************  HAL_PCD_Init() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd.c
	USB_OTG_FS->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;		// Disable global interrupts
 8000b66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f023 0301 	bic.w	r3, r3, #1
 8000b74:	6093      	str	r3, [r2, #8]

	// *********************  USB_CoreInit in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;		// Select FS interface (embedded Phy)
 8000b76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b84:	60d3      	str	r3, [r2, #12]

	// *********************  USB_CoreReset() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	// Reset the USB Core (needed after USB clock settings change)
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8000b86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	0fdb      	lsrs	r3, r3, #31
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d000      	beq.n	8000b98 <_ZN3USB7InitUSBEv+0x9c>
 8000b96:	e7f6      	b.n	8000b86 <_ZN3USB7InitUSBEv+0x8a>
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;		// Core Soft Reset
 8000b98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6113      	str	r3, [r2, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8000ba8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	bf0c      	ite	eq
 8000bb6:	2301      	moveq	r3, #1
 8000bb8:	2300      	movne	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d000      	beq.n	8000bc2 <_ZN3USB7InitUSBEv+0xc6>
 8000bc0:	e7f2      	b.n	8000ba8 <_ZN3USB7InitUSBEv+0xac>


	// *********************  USB_CoreInit() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GCCFG |= USB_OTG_GCCFG_PWRDWN;			// Activate the transceiver in transmission/reception. When reset, the transceiver is kept in power-down. 0 = USB FS transceiver disabled; 1 = USB FS transceiver enabled
 8000bc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd0:	6393      	str	r3, [r2, #56]	; 0x38

	// *********************  USB_SetCurrentMode() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;		// Force USB device mode
 8000bd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000be0:	60d3      	str	r3, [r2, #12]

	// Not really sure what this is doing?
	// OTG device IN endpoint transmit FIFO size register	(OTG_DIEPTXFx) (x = 1..5[FS] /8[HS], where x is the	FIFO number)
	// Bits 31:16 INEPTXFD[15:0]: IN endpoint Tx FIFO depth
	// Bits 15:0 INEPTXSA[15:0]: IN endpoint FIFOx transmit RAM start address
	for (uint8_t i = 0U; i < 15U; i++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	75fb      	strb	r3, [r7, #23]
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
 8000be8:	2b0e      	cmp	r3, #14
 8000bea:	d80b      	bhi.n	8000c04 <_ZN3USB7InitUSBEv+0x108>
		USB_OTG_FS->DIEPTXF[i] = 0U;
 8000bec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
 8000bf2:	3340      	adds	r3, #64	; 0x40
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0U; i < 15U; i++) {
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	75fb      	strb	r3, [r7, #23]
 8000c02:	e7f0      	b.n	8000be6 <_ZN3USB7InitUSBEv+0xea>
	}


	USB_OTG_FS->GCCFG |= USB_OTG_GCCFG_VBDEN; 			// Enable HW VBUS sensing
 8000c04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c12:	6393      	str	r3, [r2, #56]	; 0x38
	*((uint32_t *)USB_OTG_FS + USB_OTG_PCGCCTL_BASE) &= ~USB_OTG_PCGCCTL_STOPCLK;		// peripheral register not in header - should be something like OTG_FS_PWRCLK->FS_PCGCCTL
 8000c14:	4a6f      	ldr	r2, [pc, #444]	; (8000dd4 <_ZN3USB7InitUSBEv+0x2d8>)
 8000c16:	4b6f      	ldr	r3, [pc, #444]	; (8000dd4 <_ZN3USB7InitUSBEv+0x2d8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 0301 	bic.w	r3, r3, #1
 8000c1e:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_PFIVL;			// default 00: 80% of the frame interval: Indicates time within frame at which application must be notified using end of periodic frame interrupt. This can be used to determine if all the isochronous traffic for that frame is complete.
 8000c20:	4a6d      	ldr	r2, [pc, #436]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c22:	4b6d      	ldr	r3, [pc, #436]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000c2a:	6013      	str	r3, [r2, #0]

	// *********************  USB_SetDevSpeed() in  Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USBx_DEVICE->DCFG |= USB_OTG_DCFG_DSPD;				// 11: Full speed using internal FS PHY
 8000c2c:	4a6a      	ldr	r2, [pc, #424]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c2e:	4b6a      	ldr	r3, [pc, #424]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f043 0303 	orr.w	r3, r3, #3
 8000c36:	6013      	str	r3, [r2, #0]

	// *********************  USB_FlushTxFifo() and USB_FlushRxFifo() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_TXFNUM_4;	// Select buffers to flush. 10000: Flush all the transmit FIFOs in device or host mode
 8000c38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c46:	6113      	str	r3, [r2, #16]
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;		// Flush the TX buffers
 8000c48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	f043 0320 	orr.w	r3, r3, #32
 8000c56:	6113      	str	r3, [r2, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8000c58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	f003 0320 	and.w	r3, r3, #32
 8000c62:	2b20      	cmp	r3, #32
 8000c64:	bf0c      	ite	eq
 8000c66:	2301      	moveq	r3, #1
 8000c68:	2300      	movne	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d000      	beq.n	8000c72 <_ZN3USB7InitUSBEv+0x176>
 8000c70:	e7f2      	b.n	8000c58 <_ZN3USB7InitUSBEv+0x15c>

	USB_OTG_FS->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8000c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c76:	2210      	movs	r2, #16
 8000c78:	611a      	str	r2, [r3, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8000c7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	2b10      	cmp	r3, #16
 8000c86:	bf0c      	ite	eq
 8000c88:	2301      	moveq	r3, #1
 8000c8a:	2300      	movne	r3, #0
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d000      	beq.n	8000c94 <_ZN3USB7InitUSBEv+0x198>
 8000c92:	e7f2      	b.n	8000c7a <_ZN3USB7InitUSBEv+0x17e>

	// ********************* continues USB_DevInit() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	/* Clear all pending Device Interrupts */
	USBx_DEVICE->DIEPMSK = 0U;
 8000c94:	4b50      	ldr	r3, [pc, #320]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
	USBx_DEVICE->DOEPMSK = 0U;
 8000c9a:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
	USBx_DEVICE->DAINTMSK = 0U;
 8000ca0:	4b4d      	ldr	r3, [pc, #308]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]

	// Note these following commands do not visibly change anything - some of these appear to affect other registers (see p 1177)
	for (int i = 0U; i < 6; i++) {						// 6 = cfg.dev_endpoints
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	2b05      	cmp	r3, #5
 8000cae:	dc1c      	bgt.n	8000cea <_ZN3USB7InitUSBEv+0x1ee>
		USBx_INEP(i)->DIEPCTL = 0U;						// shown in SFRs as FS_DIEPCTL0, DIEPCTL1, DIEPCTL2, DIEPCTL3 (??DIEPCTL4/5 not shown in SFR)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000cb6:	3348      	adds	r3, #72	; 0x48
 8000cb8:	015b      	lsls	r3, r3, #5
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	6013      	str	r3, [r2, #0]
		USBx_INEP(i)->DIEPTSIZ = 0U;
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000cc6:	3348      	adds	r3, #72	; 0x48
 8000cc8:	015b      	lsls	r3, r3, #5
 8000cca:	461a      	mov	r2, r3
 8000ccc:	2300      	movs	r3, #0
 8000cce:	6113      	str	r3, [r2, #16]
		USBx_INEP(i)->DIEPINT  = 0xFB7FU;				// OTG device IN endpoint x interrupt register
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000cd6:	3348      	adds	r3, #72	; 0x48
 8000cd8:	015b      	lsls	r3, r3, #5
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000ce0:	6093      	str	r3, [r2, #8]
	for (int i = 0U; i < 6; i++) {						// 6 = cfg.dev_endpoints
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	e7df      	b.n	8000caa <_ZN3USB7InitUSBEv+0x1ae>
	}

	for (int i = 0U; i < 6; i++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2b05      	cmp	r3, #5
 8000cf2:	dc1c      	bgt.n	8000d2e <_ZN3USB7InitUSBEv+0x232>
		USBx_OUTEP(i)->DOEPCTL = 0U;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000cfa:	3358      	adds	r3, #88	; 0x58
 8000cfc:	015b      	lsls	r3, r3, #5
 8000cfe:	461a      	mov	r2, r3
 8000d00:	2300      	movs	r3, #0
 8000d02:	6013      	str	r3, [r2, #0]
		USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000d0a:	3358      	adds	r3, #88	; 0x58
 8000d0c:	015b      	lsls	r3, r3, #5
 8000d0e:	461a      	mov	r2, r3
 8000d10:	2300      	movs	r3, #0
 8000d12:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000d1a:	3358      	adds	r3, #88	; 0x58
 8000d1c:	015b      	lsls	r3, r3, #5
 8000d1e:	461a      	mov	r2, r3
 8000d20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000d24:	6093      	str	r3, [r2, #8]
	for (int i = 0U; i < 6; i++) {
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e7df      	b.n	8000cee <_ZN3USB7InitUSBEv+0x1f2>
	}

	USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);	// NB bit does not appear to be shown in the SFR
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d38:	6113      	str	r3, [r2, #16]

	USB_OTG_FS->GINTMSK = 0U;							// Disable all interrupts.
 8000d3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
	USB_OTG_FS->GINTSTS = 0xBFFFFFFFU;					// Clear any pending interrupts
 8000d42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d46:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8000d4a:	615a      	str	r2, [r3, #20]
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;		// Enable the Global interrupt: Receive FIFO non-empty mask
 8000d4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f043 0310 	orr.w	r3, r3, #16
 8000d5a:	6193      	str	r3, [r2, #24]

	// Enable interrupts matching to the Device mode ONLY
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |	// USB suspend; USB reset
			USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |					// Enumeration done; IN endpoints interrupt
			USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |				// OUT endpoints interrupt; Incomplete isochronous IN transfer
			USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;				// Incomplete isochronous OUT transfer; Resume/remote wakeup detected
 8000d5c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000d60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d64:	699a      	ldr	r2, [r3, #24]
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <_ZN3USB7InitUSBEv+0x2e0>)
 8000d68:	4313      	orrs	r3, r2
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |	// USB suspend; USB reset
 8000d6a:	618b      	str	r3, [r1, #24]

	//USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_SOFM;								// Start of frame
	USB_OTG_FS->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);	// Session request/new session detected; OTG interrupt
 8000d6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6193      	str	r3, [r2, #24]

	// ********************* USB_DevDisconnect() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	// As long as this bit is set, the host does not see that the device is connected, and the device does not receive signals on the USB.
	USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;				// Soft disconnect (not needed: already set by RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN)
 8000d80:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	6053      	str	r3, [r2, #4]
	//HAL_Delay(3U);

	// ********************* HAL_PCDEx_SetRxFiFo() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c
	USB_OTG_FS->GRXFSIZ = 128;		 					// RxFIFO depth
 8000d8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24

	// ********************* HAL_PCDEx_SetTxFiFo() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c
	// OTG_FS non-periodic transmit FIFO size register (Device mode) (FS_GNPTXFSIZ_Device in SFR)
	USB_OTG_FS->DIEPTXF0_HNPTXFSIZ = ((uint32_t)64 << USB_OTG_TX0FD_Pos) |		// Endpoint 0 TxFIFO depth
 8000d94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d98:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <_ZN3USB7InitUSBEv+0x2e4>)
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
			((uint32_t)128 << USB_OTG_TX0FSA_Pos);								// Endpoint 0 transmit RAM start  address

    // Multiply Tx_Size by 2 to get higher performance
    USB_OTG_FS->DIEPTXF[0] = ((uint32_t)128 << USB_OTG_DIEPTXF_INEPTXFD_Pos) |	// IN endpoint TxFIFO depth
 8000d9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000da0:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <_ZN3USB7InitUSBEv+0x2e8>)
 8000da2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		int8_t (* OutEvent)      (uint8_t event_idx, uint8_t state);
	} USBD_CUSTOM_HID_ItfTypeDef;
	*/

    // *********************  USB_DevConnect() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
    USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8000da6:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <_ZN3USB7InitUSBEv+0x2dc>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f023 0302 	bic.w	r3, r3, #2
 8000db0:	6053      	str	r3, [r2, #4]

    // *********************  USB_EnableGlobalInt() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
    USB_OTG_FS->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8000db2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000db6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6093      	str	r3, [r2, #8]
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	50003800 	.word	0x50003800
 8000dd8:	50000800 	.word	0x50000800
 8000ddc:	803c3800 	.word	0x803c3800
 8000de0:	00400080 	.word	0x00400080
 8000de4:	008000c0 	.word	0x008000c0

08000de8 <_ZN3USB20USB_ActivateEndpointEmbh>:


void USB::USB_ActivateEndpoint(uint32_t epnum, bool is_in, uint8_t eptype)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	4611      	mov	r1, r2
 8000df4:	461a      	mov	r2, r3
 8000df6:	460b      	mov	r3, r1
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	71bb      	strb	r3, [r7, #6]

	if (is_in) {
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d036      	beq.n	8000e72 <_ZN3USB20USB_ActivateEndpointEmbh+0x8a>
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (epnum & EP_ADDR_MSK));
 8000e04:	4937      	ldr	r1, [pc, #220]	; (8000ee4 <_ZN3USB20USB_ActivateEndpointEmbh+0xfc>)
 8000e06:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <_ZN3USB20USB_ActivateEndpointEmbh+0xfc>)
 8000e08:	69da      	ldr	r2, [r3, #28]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f303 	lsl.w	r3, r0, r3
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61cb      	str	r3, [r1, #28]

		if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e22:	3348      	adds	r3, #72	; 0x48
 8000e24:	015b      	lsls	r3, r3, #5
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d04e      	beq.n	8000ed8 <_ZN3USB20USB_ActivateEndpointEmbh+0xf0>
			USBx_INEP(epnum)->DIEPCTL |= (maxPacket & USB_OTG_DIEPCTL_MPSIZ) |
					((uint32_t)eptype << 18) | (epnum << 22) |
					USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
					USB_OTG_DIEPCTL_USBAEP;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e40:	3348      	adds	r3, #72	; 0x48
 8000e42:	015b      	lsls	r3, r3, #5
 8000e44:	4618      	mov	r0, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e4c:	3348      	adds	r3, #72	; 0x48
 8000e4e:	015b      	lsls	r3, r3, #5
 8000e50:	681a      	ldr	r2, [r3, #0]
			USBx_INEP(epnum)->DIEPCTL |= (maxPacket & USB_OTG_DIEPCTL_MPSIZ) |
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	7a1b      	ldrb	r3, [r3, #8]
 8000e56:	4619      	mov	r1, r3
					((uint32_t)eptype << 18) | (epnum << 22) |
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	049b      	lsls	r3, r3, #18
			USBx_INEP(epnum)->DIEPCTL |= (maxPacket & USB_OTG_DIEPCTL_MPSIZ) |
 8000e5c:	4319      	orrs	r1, r3
					((uint32_t)eptype << 18) | (epnum << 22) |
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	059b      	lsls	r3, r3, #22
 8000e62:	430b      	orrs	r3, r1
					USB_OTG_DIEPCTL_USBAEP;
 8000e64:	4313      	orrs	r3, r2
 8000e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			USBx_INEP(epnum)->DIEPCTL |= (maxPacket & USB_OTG_DIEPCTL_MPSIZ) |
 8000e6e:	6003      	str	r3, [r0, #0]
					USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
					USB_OTG_DOEPCTL_USBAEP;
		}
	}

}
 8000e70:	e032      	b.n	8000ed8 <_ZN3USB20USB_ActivateEndpointEmbh+0xf0>
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (epnum & EP_ADDR_MSK)) << 16);
 8000e72:	491c      	ldr	r1, [pc, #112]	; (8000ee4 <_ZN3USB20USB_ActivateEndpointEmbh+0xfc>)
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <_ZN3USB20USB_ActivateEndpointEmbh+0xfc>)
 8000e76:	69da      	ldr	r2, [r3, #28]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	2001      	movs	r0, #1
 8000e80:	fa00 f303 	lsl.w	r3, r0, r3
 8000e84:	041b      	lsls	r3, r3, #16
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61cb      	str	r3, [r1, #28]
		if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e90:	3358      	adds	r3, #88	; 0x58
 8000e92:	015b      	lsls	r3, r3, #5
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d017      	beq.n	8000ed8 <_ZN3USB20USB_ActivateEndpointEmbh+0xf0>
					USB_OTG_DOEPCTL_USBAEP;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000eae:	3358      	adds	r3, #88	; 0x58
 8000eb0:	015b      	lsls	r3, r3, #5
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000eba:	3358      	adds	r3, #88	; 0x58
 8000ebc:	015b      	lsls	r3, r3, #5
 8000ebe:	681a      	ldr	r2, [r3, #0]
			USBx_OUTEP(epnum)->DOEPCTL |= (maxPacket & USB_OTG_DOEPCTL_MPSIZ) |
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	7a1b      	ldrb	r3, [r3, #8]
 8000ec4:	4618      	mov	r0, r3
					((uint32_t)eptype << 18) |
 8000ec6:	79bb      	ldrb	r3, [r7, #6]
 8000ec8:	049b      	lsls	r3, r3, #18
			USBx_OUTEP(epnum)->DOEPCTL |= (maxPacket & USB_OTG_DOEPCTL_MPSIZ) |
 8000eca:	4303      	orrs	r3, r0
					USB_OTG_DOEPCTL_USBAEP;
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			USBx_OUTEP(epnum)->DOEPCTL |= (maxPacket & USB_OTG_DOEPCTL_MPSIZ) |
 8000ed6:	600b      	str	r3, [r1, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	50000800 	.word	0x50000800

08000ee8 <_ZN3USB14USB_ReadPacketEPmt>:

// USB_ReadPacket : read a packet from the RX FIFO
void USB::USB_ReadPacket(uint32_t *dest, uint16_t len)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	80fb      	strh	r3, [r7, #6]
	uint32_t *pDest = (uint32_t *)dest;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	61fb      	str	r3, [r7, #28]
	uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	3303      	adds	r3, #3
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	617b      	str	r3, [r7, #20]

	for (int i = 0U; i < count32b; i++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d20a      	bcs.n	8000f24 <_ZN3USB14USB_ReadPacketEPmt+0x3c>
	{
		*pDest = USBx_DFIFO(0U);
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <_ZN3USB14USB_ReadPacketEPmt+0x48>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	601a      	str	r2, [r3, #0]
		pDest++;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	61fb      	str	r3, [r7, #28]
	for (int i = 0U; i < count32b; i++)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	e7f0      	b.n	8000f06 <_ZN3USB14USB_ReadPacketEPmt+0x1e>
	}

	//return ((void *)pDest);
}
 8000f24:	bf00      	nop
 8000f26:	3724      	adds	r7, #36	; 0x24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	50001000 	.word	0x50001000

08000f34 <_ZN3USB15USB_WritePacketEPhmt>:

void USB::USB_WritePacket(uint8_t *src, uint32_t ch_ep_num, uint16_t len)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	807b      	strh	r3, [r7, #2]
	uint32_t *pSrc = (uint32_t *)src;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	61fb      	str	r3, [r7, #28]
	uint32_t count32b, i;

	count32b = ((uint32_t)len + 3U) / 4U;
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	3303      	adds	r3, #3
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < count32b; i++) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d20f      	bcs.n	8000f7a <_ZN3USB15USB_WritePacketEPhmt+0x46>
		USBx_DFIFO(ch_ep_num) = *pSrc;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8000f60:	3301      	adds	r3, #1
 8000f62:	031b      	lsls	r3, r3, #12
 8000f64:	461a      	mov	r2, r3
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6013      	str	r3, [r2, #0]
		pSrc++;
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	3304      	adds	r3, #4
 8000f70:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < count32b; i++) {
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	e7eb      	b.n	8000f52 <_ZN3USB15USB_WritePacketEPhmt+0x1e>
	}


}
 8000f7a:	bf00      	nop
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_ZSt3minImERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d201      	bcs.n	8000fa0 <_ZSt3minImERKT_S2_S2_+0x1a>
	return __b;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	e000      	b.n	8000fa2 <_ZSt3minImERKT_S2_S2_+0x1c>
      return __a;
 8000fa0:	687b      	ldr	r3, [r7, #4]
    }
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <_ZN3USB18USBD_GetDescriptorE10usbRequest>:


// Descriptors in usbd_desc.c
void USB::USBD_GetDescriptor(usbRequest req)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	e883 0006 	stmia.w	r3, {r1, r2}
	uint16_t len;
	uint8_t *pbuf;
	uint32_t deviceserial0, deviceserial1, deviceserial2;

	switch (req.Value >> 8)
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	121b      	asrs	r3, r3, #8
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	2b0e      	cmp	r3, #14
 8000fc6:	f200 80b8 	bhi.w	800113a <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x18a>
 8000fca:	a201      	add	r2, pc, #4	; (adr r2, 8000fd0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x20>)
 8000fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd0:	0800100d 	.word	0x0800100d
 8000fd4:	08001023 	.word	0x08001023
 8000fd8:	0800104f 	.word	0x0800104f
 8000fdc:	0800113b 	.word	0x0800113b
 8000fe0:	0800113b 	.word	0x0800113b
 8000fe4:	0800113b 	.word	0x0800113b
 8000fe8:	0800113b 	.word	0x0800113b
 8000fec:	0800113b 	.word	0x0800113b
 8000ff0:	0800113b 	.word	0x0800113b
 8000ff4:	0800113b 	.word	0x0800113b
 8000ff8:	0800113b 	.word	0x0800113b
 8000ffc:	0800113b 	.word	0x0800113b
 8001000:	0800113b 	.word	0x0800113b
 8001004:	0800113b 	.word	0x0800113b
 8001008:	08001039 	.word	0x08001039
	{
	case USB_DESC_TYPE_DEVICE:
		//pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
		outBuff = USBD_FS_DeviceDesc;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		outBuffSize = sizeof(USBD_FS_DeviceDesc);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2212      	movs	r2, #18
 800101c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		break;
 8001020:	e057      	b.n	80010d2 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x122>

	case USB_DESC_TYPE_CONFIGURATION:

		outBuff = USBD_CUSTOM_HID_CfgFSDesc;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f103 02b2 	add.w	r2, r3, #178	; 0xb2
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		outBuffSize = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2229      	movs	r2, #41	; 0x29
 8001032:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		//pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
		//pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
		break;
 8001036:	e04c      	b.n	80010d2 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x122>

	case USB_DESC_TYPE_BOS:

		outBuff = USBD_FS_BOSDesc;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f103 02db 	add.w	r2, r3, #219	; 0xdb
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		outBuffSize = sizeof(USBD_FS_BOSDesc);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	220c      	movs	r2, #12
 8001048:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		//pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
		break;
 800104c:	e041      	b.n	80010d2 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x122>

	case USB_DESC_TYPE_STRING:
		switch ((uint8_t)(req.Value)) {
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b05      	cmp	r3, #5
 8001054:	d873      	bhi.n	800113e <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x18e>
 8001056:	a201      	add	r2, pc, #4	; (adr r2, 800105c <_ZN3USB18USBD_GetDescriptorE10usbRequest+0xac>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	080010cf 	.word	0x080010cf
 8001060:	080010cf 	.word	0x080010cf
 8001064:	080010cf 	.word	0x080010cf
 8001068:	08001075 	.word	0x08001075
 800106c:	080010cf 	.word	0x080010cf
 8001070:	080010cf 	.word	0x080010cf
		case USBD_IDX_PRODUCT_STR:
			//pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
			break;
		case USBD_IDX_SERIAL_STR:
			// STM32 unique device ID (96 bit number starting at UID_BASE)
			deviceserial0 = *(uint32_t *) UID_BASE;
 8001074:	4b34      	ldr	r3, [pc, #208]	; (8001148 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x198>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61fb      	str	r3, [r7, #28]
			deviceserial1 = *(uint32_t *) UID_BASE + 4;
 800107a:	4b33      	ldr	r3, [pc, #204]	; (8001148 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x198>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3304      	adds	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
			deviceserial2 = *(uint32_t *) UID_BASE + 8;
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x198>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3308      	adds	r3, #8
 8001088:	617b      	str	r3, [r7, #20]
			deviceserial0 += deviceserial2;
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	4413      	add	r3, r2
 8001090:	61fb      	str	r3, [r7, #28]

			if (deviceserial0 != 0)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00f      	beq.n	80010b8 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x108>
			{
				IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f103 02e9 	add.w	r2, r3, #233	; 0xe9
 800109e:	2308      	movs	r3, #8
 80010a0:	69f9      	ldr	r1, [r7, #28]
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f852 	bl	800114c <_ZN3USB12IntToUnicodeEmPhh>
				IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f103 02f9 	add.w	r2, r3, #249	; 0xf9
 80010ae:	2304      	movs	r3, #4
 80010b0:	69b9      	ldr	r1, [r7, #24]
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f84a 	bl	800114c <_ZN3USB12IntToUnicodeEmPhh>
			}
			outBuff = USBD_StringSerial;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f103 02e7 	add.w	r2, r3, #231	; 0xe7
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			outBuffSize = sizeof(USBD_StringSerial);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	221a      	movs	r2, #26
 80010c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			//pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
			break;
 80010cc:	e000      	b.n	80010d0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x120>
			break;
 80010ce:	bf00      	nop
#else
			// USBD_CtlError(pdev , req);
			return;
#endif
		}
		break;
 80010d0:	bf00      	nop
		default:
			//USBD_CtlError(pdev , req);
			return;
	}

	if ((outBuffSize != 0U) && (req.Length != 0U)) {
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d022      	beq.n	8001122 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x172>
 80010dc:	897b      	ldrh	r3, [r7, #10]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d01f      	beq.n	8001122 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x172>
		ep0_state = USBD_EP0_DATA_IN;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2202      	movs	r2, #2
 80010e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		outBuffSize = std::min(outBuffSize, (uint32_t)req.Length);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3394      	adds	r3, #148	; 0x94
 80010ee:	897a      	ldrh	r2, [r7, #10]
 80010f0:	613a      	str	r2, [r7, #16]
 80010f2:	f107 0210 	add.w	r2, r7, #16
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff44 	bl	8000f86 <_ZSt3minImERKT_S2_S2_>
 80010fe:	4603      	mov	r3, r0
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		USB_EP0StartXfer(true, 0, outBuff, outBuffSize);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4613      	mov	r3, r2
 8001118:	2200      	movs	r2, #0
 800111a:	2101      	movs	r1, #1
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 f8af 	bl	8001280 <_ZN3USB16USB_EP0StartXferEbhPhm>
	}

	if (req.Length == 0U) {
 8001122:	897b      	ldrh	r3, [r7, #10]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10b      	bne.n	8001140 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x190>
		USB_EP0StartXfer(true, 0, nullptr, 0);
 8001128:	2300      	movs	r3, #0
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2300      	movs	r3, #0
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f000 f8a4 	bl	8001280 <_ZN3USB16USB_EP0StartXferEbhPhm>
 8001138:	e002      	b.n	8001140 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x190>
			return;
 800113a:	bf00      	nop
 800113c:	e000      	b.n	8001140 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x190>
			return;
 800113e:	bf00      	nop
	}
}
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	1fff7a10 	.word	0x1fff7a10

0800114c <_ZN3USB12IntToUnicodeEmPhh>:


void USB::IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	70fb      	strb	r3, [r7, #3]

	for (uint8_t idx = 0; idx < len; idx++) {
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
 800115e:	7dfa      	ldrb	r2, [r7, #23]
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	429a      	cmp	r2, r3
 8001164:	da28      	bge.n	80011b8 <_ZN3USB12IntToUnicodeEmPhh+0x6c>
		if (((value >> 28)) < 0xA) {
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	0f1b      	lsrs	r3, r3, #28
 800116a:	2b09      	cmp	r3, #9
 800116c:	d80b      	bhi.n	8001186 <_ZN3USB12IntToUnicodeEmPhh+0x3a>
			pbuf[2 * idx] = (value >> 28) + '0';
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	461a      	mov	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	0f12      	lsrs	r2, r2, #28
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	3230      	adds	r2, #48	; 0x30
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e00a      	b.n	800119c <_ZN3USB12IntToUnicodeEmPhh+0x50>
		} else {
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	461a      	mov	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	0f12      	lsrs	r2, r2, #28
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	3237      	adds	r2, #55	; 0x37
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
		}

		value = value << 4;
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	60bb      	str	r3, [r7, #8]

		pbuf[2 * idx + 1] = 0;
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	3301      	adds	r3, #1
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
	for (uint8_t idx = 0; idx < len; idx++) {
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	3301      	adds	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
 80011b6:	e7d2      	b.n	800115e <_ZN3USB12IntToUnicodeEmPhh+0x12>
	}
}
 80011b8:	bf00      	nop
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_ZN3USB14USBD_StdDevReqE10usbRequest>:

void USB::USBD_StdDevReq(usbRequest req)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t dev_addr;
	switch (req.mRequest & USB_REQ_TYPE_MASK)
 80011d2:	793b      	ldrb	r3, [r7, #4]
 80011d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80011d8:	2b20      	cmp	r3, #32
 80011da:	d049      	beq.n	8001270 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xac>
 80011dc:	2b40      	cmp	r3, #64	; 0x40
 80011de:	d047      	beq.n	8001270 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xac>
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d000      	beq.n	80011e6 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x22>
		}
		break;

		default:
			//USBD_CtlError(pdev, req);
			break;
 80011e4:	e045      	b.n	8001272 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xae>
		switch (req.Request)
 80011e6:	797b      	ldrb	r3, [r7, #5]
 80011e8:	2b09      	cmp	r3, #9
 80011ea:	d83f      	bhi.n	800126c <_ZN3USB14USBD_StdDevReqE10usbRequest+0xa8>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x30>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	0800126d 	.word	0x0800126d
 80011f8:	0800126d 	.word	0x0800126d
 80011fc:	0800126d 	.word	0x0800126d
 8001200:	0800126d 	.word	0x0800126d
 8001204:	0800126d 	.word	0x0800126d
 8001208:	0800122b 	.word	0x0800122b
 800120c:	0800121d 	.word	0x0800121d
 8001210:	0800126d 	.word	0x0800126d
 8001214:	0800126d 	.word	0x0800126d
 8001218:	0800126d 	.word	0x0800126d
			USBD_GetDescriptor(req);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7ff fec4 	bl	8000fb0 <_ZN3USB18USBD_GetDescriptorE10usbRequest>
			break;
 8001228:	e021      	b.n	800126e <_ZN3USB14USBD_StdDevReqE10usbRequest+0xaa>
			dev_addr = (uint8_t)(req.Value) & 0x7FU;
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001232:	75fb      	strb	r3, [r7, #23]
			USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8001234:	4a11      	ldr	r2, [pc, #68]	; (800127c <_ZN3USB14USBD_StdDevReqE10usbRequest+0xb8>)
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <_ZN3USB14USBD_StdDevReqE10usbRequest+0xb8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800123e:	6013      	str	r3, [r2, #0]
			USBx_DEVICE->DCFG |= ((uint32_t)dev_addr << 4) & USB_OTG_DCFG_DAD;
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <_ZN3USB14USBD_StdDevReqE10usbRequest+0xb8>)
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <_ZN3USB14USBD_StdDevReqE10usbRequest+0xb8>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
			ep0_state = USBD_EP0_STATUS_IN;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2204      	movs	r2, #4
 8001256:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			USB_EP0StartXfer(true, 0, nullptr, 0);
 800125a:	2300      	movs	r3, #0
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2300      	movs	r3, #0
 8001260:	2200      	movs	r2, #0
 8001262:	2101      	movs	r1, #1
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 f80b 	bl	8001280 <_ZN3USB16USB_EP0StartXferEbhPhm>
			break;
 800126a:	e000      	b.n	800126e <_ZN3USB14USBD_StdDevReqE10usbRequest+0xaa>
			break;
 800126c:	bf00      	nop
		break;
 800126e:	e000      	b.n	8001272 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xae>
		break;
 8001270:	bf00      	nop
	}

}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	50000800 	.word	0x50000800

08001280 <_ZN3USB16USB_EP0StartXferEbhPhm>:

void USB::USB_EP0StartXfer(bool is_in, uint8_t epnum, uint8_t* xfer_buff, uint32_t xfer_len)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	72fb      	strb	r3, [r7, #11]
 800128e:	4613      	mov	r3, r2
 8001290:	72bb      	strb	r3, [r7, #10]

	// IN endpoint
	if (is_in)
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 809a 	beq.w	80013ce <_ZN3USB16USB_EP0StartXferEbhPhm+0x14e>
	{
		// Zero Length Packet?
		if (xfer_len == 0U) {
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d12f      	bne.n	8001300 <_ZN3USB16USB_EP0StartXferEbhPhm+0x80>
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80012a0:	7abb      	ldrb	r3, [r7, #10]
 80012a2:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80012a6:	3348      	adds	r3, #72	; 0x48
 80012a8:	015b      	lsls	r3, r3, #5
 80012aa:	461a      	mov	r2, r3
 80012ac:	7abb      	ldrb	r3, [r7, #10]
 80012ae:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80012b2:	3348      	adds	r3, #72	; 0x48
 80012b4:	015b      	lsls	r3, r3, #5
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80012bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80012c0:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80012c2:	7abb      	ldrb	r3, [r7, #10]
 80012c4:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80012c8:	3348      	adds	r3, #72	; 0x48
 80012ca:	015b      	lsls	r3, r3, #5
 80012cc:	461a      	mov	r2, r3
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80012d4:	3348      	adds	r3, #72	; 0x48
 80012d6:	015b      	lsls	r3, r3, #5
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012de:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80012e0:	7abb      	ldrb	r3, [r7, #10]
 80012e2:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80012e6:	3348      	adds	r3, #72	; 0x48
 80012e8:	015b      	lsls	r3, r3, #5
 80012ea:	461a      	mov	r2, r3
 80012ec:	7abb      	ldrb	r3, [r7, #10]
 80012ee:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80012f2:	3348      	adds	r3, #72	; 0x48
 80012f4:	015b      	lsls	r3, r3, #5
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	0cdb      	lsrs	r3, r3, #19
 80012fa:	04db      	lsls	r3, r3, #19
 80012fc:	6113      	str	r3, [r2, #16]
 80012fe:	e048      	b.n	8001392 <_ZN3USB16USB_EP0StartXferEbhPhm+0x112>
		} else {
			// Program the transfer size and packet count as follows: xfersize = N * maxpacket + short_packet pktcnt = N + (short_packet exist ? 1 : 0)
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001300:	7abb      	ldrb	r3, [r7, #10]
 8001302:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001306:	3348      	adds	r3, #72	; 0x48
 8001308:	015b      	lsls	r3, r3, #5
 800130a:	461a      	mov	r2, r3
 800130c:	7abb      	ldrb	r3, [r7, #10]
 800130e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001312:	3348      	adds	r3, #72	; 0x48
 8001314:	015b      	lsls	r3, r3, #5
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	0cdb      	lsrs	r3, r3, #19
 800131a:	04db      	lsls	r3, r3, #19
 800131c:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800131e:	7abb      	ldrb	r3, [r7, #10]
 8001320:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001324:	3348      	adds	r3, #72	; 0x48
 8001326:	015b      	lsls	r3, r3, #5
 8001328:	461a      	mov	r2, r3
 800132a:	7abb      	ldrb	r3, [r7, #10]
 800132c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001330:	3348      	adds	r3, #72	; 0x48
 8001332:	015b      	lsls	r3, r3, #5
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800133a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800133e:	6113      	str	r3, [r2, #16]

			if (xfer_len > maxPacket)		// currently set to 0x40
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	7a1b      	ldrb	r3, [r3, #8]
 8001344:	461a      	mov	r2, r3
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	429a      	cmp	r2, r3
 800134a:	d202      	bcs.n	8001352 <_ZN3USB16USB_EP0StartXferEbhPhm+0xd2>
				xfer_len = maxPacket;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	7a1b      	ldrb	r3, [r3, #8]
 8001350:	623b      	str	r3, [r7, #32]

			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001352:	7abb      	ldrb	r3, [r7, #10]
 8001354:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001358:	3348      	adds	r3, #72	; 0x48
 800135a:	015b      	lsls	r3, r3, #5
 800135c:	461a      	mov	r2, r3
 800135e:	7abb      	ldrb	r3, [r7, #10]
 8001360:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001364:	3348      	adds	r3, #72	; 0x48
 8001366:	015b      	lsls	r3, r3, #5
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800136e:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & xfer_len);
 8001370:	7abb      	ldrb	r3, [r7, #10]
 8001372:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001376:	3348      	adds	r3, #72	; 0x48
 8001378:	015b      	lsls	r3, r3, #5
 800137a:	4619      	mov	r1, r3
 800137c:	7abb      	ldrb	r3, [r7, #10]
 800137e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001382:	3348      	adds	r3, #72	; 0x48
 8001384:	015b      	lsls	r3, r3, #5
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800138e:	4313      	orrs	r3, r2
 8001390:	610b      	str	r3, [r1, #16]
		}

		/* EP enable, IN data in FIFO */
		USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001392:	7abb      	ldrb	r3, [r7, #10]
 8001394:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001398:	3348      	adds	r3, #72	; 0x48
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	461a      	mov	r2, r3
 800139e:	7abb      	ldrb	r3, [r7, #10]
 80013a0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80013a4:	3348      	adds	r3, #72	; 0x48
 80013a6:	015b      	lsls	r3, r3, #5
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80013ae:	6013      	str	r3, [r2, #0]

		/* Enable the Tx FIFO Empty Interrupt for this EP */
		if (xfer_len > 0U) {
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d061      	beq.n	800147a <_ZN3USB16USB_EP0StartXferEbhPhm+0x1fa>
			USBx_DEVICE->DIEPEMPMSK |= 1UL << (epnum & EP_ADDR_MSK);
 80013b6:	4934      	ldr	r1, [pc, #208]	; (8001488 <_ZN3USB16USB_EP0StartXferEbhPhm+0x208>)
 80013b8:	4b33      	ldr	r3, [pc, #204]	; (8001488 <_ZN3USB16USB_EP0StartXferEbhPhm+0x208>)
 80013ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013bc:	7abb      	ldrb	r3, [r7, #10]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	2001      	movs	r0, #1
 80013c4:	fa00 f303 	lsl.w	r3, r0, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	634b      	str	r3, [r1, #52]	; 0x34
		/* EP enable */
		USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
		int susp = 1;
	}

}
 80013cc:	e055      	b.n	800147a <_ZN3USB16USB_EP0StartXferEbhPhm+0x1fa>
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80013ce:	7abb      	ldrb	r3, [r7, #10]
 80013d0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80013d4:	3358      	adds	r3, #88	; 0x58
 80013d6:	015b      	lsls	r3, r3, #5
 80013d8:	461a      	mov	r2, r3
 80013da:	7abb      	ldrb	r3, [r7, #10]
 80013dc:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80013e0:	3358      	adds	r3, #88	; 0x58
 80013e2:	015b      	lsls	r3, r3, #5
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	0cdb      	lsrs	r3, r3, #19
 80013e8:	04db      	lsls	r3, r3, #19
 80013ea:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80013ec:	7abb      	ldrb	r3, [r7, #10]
 80013ee:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80013f2:	3358      	adds	r3, #88	; 0x58
 80013f4:	015b      	lsls	r3, r3, #5
 80013f6:	461a      	mov	r2, r3
 80013f8:	7abb      	ldrb	r3, [r7, #10]
 80013fa:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80013fe:	3358      	adds	r3, #88	; 0x58
 8001400:	015b      	lsls	r3, r3, #5
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001408:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800140c:	6113      	str	r3, [r2, #16]
		if (xfer_len > 0U) {
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <_ZN3USB16USB_EP0StartXferEbhPhm+0x19a>
			xfer_len = maxPacket;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	7a1b      	ldrb	r3, [r3, #8]
 8001418:	623b      	str	r3, [r7, #32]
		USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800141a:	7abb      	ldrb	r3, [r7, #10]
 800141c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001420:	3358      	adds	r3, #88	; 0x58
 8001422:	015b      	lsls	r3, r3, #5
 8001424:	461a      	mov	r2, r3
 8001426:	7abb      	ldrb	r3, [r7, #10]
 8001428:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800142c:	3358      	adds	r3, #88	; 0x58
 800142e:	015b      	lsls	r3, r3, #5
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001436:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (maxPacket));
 8001438:	7abb      	ldrb	r3, [r7, #10]
 800143a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800143e:	3358      	adds	r3, #88	; 0x58
 8001440:	015b      	lsls	r3, r3, #5
 8001442:	4619      	mov	r1, r3
 8001444:	7abb      	ldrb	r3, [r7, #10]
 8001446:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800144a:	3358      	adds	r3, #88	; 0x58
 800144c:	015b      	lsls	r3, r3, #5
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	7a12      	ldrb	r2, [r2, #8]
 8001454:	4313      	orrs	r3, r2
 8001456:	610b      	str	r3, [r1, #16]
		USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001458:	7abb      	ldrb	r3, [r7, #10]
 800145a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800145e:	3358      	adds	r3, #88	; 0x58
 8001460:	015b      	lsls	r3, r3, #5
 8001462:	461a      	mov	r2, r3
 8001464:	7abb      	ldrb	r3, [r7, #10]
 8001466:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800146a:	3358      	adds	r3, #88	; 0x58
 800146c:	015b      	lsls	r3, r3, #5
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001474:	6013      	str	r3, [r2, #0]
		int susp = 1;
 8001476:	2301      	movs	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
}
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	50000800 	.word	0x50000800

0800148c <_ZN3USB14USB_EPSetStallEh>:


void USB::USB_EPSetStall(uint8_t epnum) {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
	if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U)) {	//
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800149e:	3348      	adds	r3, #72	; 0x48
 80014a0:	015b      	lsls	r3, r3, #5
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db04      	blt.n	80014b2 <_ZN3USB14USB_EPSetStallEh+0x26>
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <_ZN3USB14USB_EPSetStallEh+0x26>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <_ZN3USB14USB_EPSetStallEh+0x28>
 80014b2:	2300      	movs	r3, #0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00e      	beq.n	80014d6 <_ZN3USB14USB_EPSetStallEh+0x4a>
		USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014be:	3348      	adds	r3, #72	; 0x48
 80014c0:	015b      	lsls	r3, r3, #5
 80014c2:	461a      	mov	r2, r3
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014ca:	3348      	adds	r3, #72	; 0x48
 80014cc:	015b      	lsls	r3, r3, #5
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014d4:	6013      	str	r3, [r2, #0]
	}
	USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014dc:	3348      	adds	r3, #72	; 0x48
 80014de:	015b      	lsls	r3, r3, #5
 80014e0:	461a      	mov	r2, r3
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014e8:	3348      	adds	r3, #72	; 0x48
 80014ea:	015b      	lsls	r3, r3, #5
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f2:	6013      	str	r3, [r2, #0]

	// FIXME - cleared in USB_EP0StartXfer?
	//USB_EP0_OutStart
	USBx_OUTEP(0U)->DOEPTSIZ = 0U;			// USB_EP0_OutStart - set STUPCNT=3; PKTCNT=1; XFRSIZ=0x18
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80014fa:	4a0c      	ldr	r2, [pc, #48]	; (800152c <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001504:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8001506:	4a09      	ldr	r2, [pc, #36]	; (800152c <_ZN3USB14USB_EPSetStallEh+0xa0>)
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <_ZN3USB14USB_EPSetStallEh+0xa0>)
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f043 0318 	orr.w	r3, r3, #24
 8001510:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8001512:	4a06      	ldr	r2, [pc, #24]	; (800152c <_ZN3USB14USB_EPSetStallEh+0xa0>)
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <_ZN3USB14USB_EPSetStallEh+0xa0>)
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800151c:	6113      	str	r3, [r2, #16]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	50000b00 	.word	0x50000b00

08001530 <_ZN3USB18USB_ReadInterruptsEm>:


bool USB::USB_ReadInterrupts(uint32_t interrupt){
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]

	if (((USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK) & interrupt) == interrupt && usbEventNo < 100) {
 800153a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	401a      	ands	r2, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	401a      	ands	r2, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d105      	bne.n	800155e <_ZN3USB18USB_ReadInterruptsEm+0x2e>
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b63      	cmp	r3, #99	; 0x63
 8001558:	dc01      	bgt.n	800155e <_ZN3USB18USB_ReadInterruptsEm+0x2e>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <_ZN3USB18USB_ReadInterruptsEm+0x30>
 800155e:	2300      	movs	r3, #0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d012      	beq.n	800158a <_ZN3USB18USB_ReadInterruptsEm+0x5a>
		usbEvents[usbEventNo] = USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK;
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <_ZN3USB18USB_ReadInterruptsEm+0x88>)
 800157a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		usbEventNo++;
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 8001588:	701a      	strb	r2, [r3, #0]
	}

	return ((USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK) & interrupt) == interrupt;
 800158a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	401a      	ands	r2, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	401a      	ands	r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	bf0c      	ite	eq
 80015a2:	2301      	moveq	r3, #1
 80015a4:	2300      	movne	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	200002c4 	.word	0x200002c4
 80015b8:	20000134 	.word	0x20000134

080015bc <_Z18SystemClock_Configv>:
#define PLL_M 4
#define PLL_N 144
#define PLL_P 2		//  Main PLL (PLL) division factor for main system clock can be 2 (PLL_P = 0), 4 (PLL_P = 1), 6 (PLL_P = 2), 8 (PLL_P = 3)
#define PLL_Q 6

void SystemClock_Config(void) {
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;			// Enable Power Control clock
 80015c0:	4a35      	ldr	r2, [pc, #212]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS_0;					// Enable VOS voltage scaling - allows maximum clock speed
 80015cc:	4a33      	ldr	r2, [pc, #204]	; (800169c <_Z18SystemClock_Configv+0xe0>)
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <_Z18SystemClock_Configv+0xe0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d6:	6013      	str	r3, [r2, #0]

	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));// CPACR register: set full access privileges for coprocessors
 80015d8:	4a31      	ldr	r2, [pc, #196]	; (80016a0 <_Z18SystemClock_Configv+0xe4>)
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <_Z18SystemClock_Configv+0xe4>)
 80015dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

#ifdef USE_HSE
	RCC->CR |= RCC_CR_HSEON;					// HSE ON
 80015e8:	4a2b      	ldr	r2, [pc, #172]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0);		// Wait till HSE is ready
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d000      	beq.n	800160c <_Z18SystemClock_Configv+0x50>
 800160a:	e7f3      	b.n	80015f4 <_Z18SystemClock_Configv+0x38>
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 800160e:	4a25      	ldr	r2, [pc, #148]	; (80016a4 <_Z18SystemClock_Configv+0xe8>)
 8001610:	605a      	str	r2, [r3, #4]
	RCC->CR |= RCC_CR_HSION;					// HSI ON
	while((RCC->CR & RCC_CR_HSIRDY) == 0);		// Wait till HSI is ready
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);
#endif

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;			// HCLK = SYSCLK / 1
 8001612:	4a21      	ldr	r2, [pc, #132]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;			// PCLK2 = HCLK / 2
 800161a:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001624:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;			// PCLK1 = HCLK / 4
 8001626:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001630:	6093      	str	r3, [r2, #8]
	RCC->CR |= RCC_CR_PLLON;					// Enable the main PLL
 8001632:	4a19      	ldr	r2, [pc, #100]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800163c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);		// Wait till the main PLL is ready
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf0c      	ite	eq
 800164a:	2301      	moveq	r3, #1
 800164c:	2300      	movne	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d000      	beq.n	8001656 <_Z18SystemClock_Configv+0x9a>
 8001654:	e7f3      	b.n	800163e <_Z18SystemClock_Configv+0x82>

	// Configure Flash prefetch, Instruction cache, Data cache and wait state
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <_Z18SystemClock_Configv+0xec>)
 8001658:	f240 7205 	movw	r2, #1797	; 0x705
 800165c:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 0303 	bic.w	r3, r3, #3
 8001668:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6093      	str	r3, [r2, #8]

	// Wait till the main PLL is used as system clock source
	while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_Z18SystemClock_Configv+0xdc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	bf14      	ite	ne
 8001682:	2301      	movne	r3, #1
 8001684:	2300      	moveq	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d000      	beq.n	800168e <_Z18SystemClock_Configv+0xd2>
 800168c:	e7f3      	b.n	8001676 <_Z18SystemClock_Configv+0xba>

}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	06402404 	.word	0x06402404
 80016a8:	40023c00 	.word	0x40023c00

080016ac <_Z10InitBtnLEDv>:

void InitBtnLED()
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;			// reset and clock control - advanced high performance bus - GPIO port B
 80016b0:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <_Z10InitBtnLEDv+0x40>)
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <_Z10InitBtnLEDv+0x40>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;			// reset and clock control - advanced high performance bus - GPIO port C
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <_Z10InitBtnLEDv+0x40>)
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <_Z10InitBtnLEDv+0x40>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30

	// configure PC13 blue button
	//GPIOC->PUPDR |= GPIO_PUPDR_PUPDR13_0;			// Set pin to pull up:  01 Pull-up; 10 Pull-down; 11 Reserved

	// PB7 is LD2 Blue
	GPIOB->MODER |= GPIO_MODER_MODER7_0;			// Set to output
 80016c8:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <_Z10InitBtnLEDv+0x44>)
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <_Z10InitBtnLEDv+0x44>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d2:	6013      	str	r3, [r2, #0]

	// PB14 is LD3 Red
	GPIOB->MODER |= GPIO_MODER_MODER14_0;			// Set to output
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <_Z10InitBtnLEDv+0x44>)
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <_Z10InitBtnLEDv+0x44>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020400 	.word	0x40020400

080016f4 <_ZN3USBC1Ev>:
	uint16_t Length;
};



class USB {
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	721a      	strb	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <_ZN3USBC1Ev+0x94>)
 8001706:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800170a:	4615      	mov	r5, r2
 800170c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	8023      	strh	r3, [r4, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a1d      	ldr	r2, [pc, #116]	; (800178c <_ZN3USBC1Ev+0x98>)
 8001718:	4614      	mov	r4, r2
 800171a:	f103 0eb2 	add.w	lr, r3, #178	; 0xb2
 800171e:	f104 0c20 	add.w	ip, r4, #32
 8001722:	4675      	mov	r5, lr
 8001724:	4626      	mov	r6, r4
 8001726:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001728:	6028      	str	r0, [r5, #0]
 800172a:	6069      	str	r1, [r5, #4]
 800172c:	60aa      	str	r2, [r5, #8]
 800172e:	60eb      	str	r3, [r5, #12]
 8001730:	3410      	adds	r4, #16
 8001732:	f10e 0e10 	add.w	lr, lr, #16
 8001736:	4564      	cmp	r4, ip
 8001738:	d1f3      	bne.n	8001722 <_ZN3USBC1Ev+0x2e>
 800173a:	4672      	mov	r2, lr
 800173c:	4623      	mov	r3, r4
 800173e:	cb03      	ldmia	r3!, {r0, r1}
 8001740:	6010      	str	r0, [r2, #0]
 8001742:	6051      	str	r1, [r2, #4]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	7213      	strb	r3, [r2, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a11      	ldr	r2, [pc, #68]	; (8001790 <_ZN3USBC1Ev+0x9c>)
 800174c:	f103 04db 	add.w	r4, r3, #219	; 0xdb
 8001750:	4613      	mov	r3, r2
 8001752:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001754:	6020      	str	r0, [r4, #0]
 8001756:	6061      	str	r1, [r4, #4]
 8001758:	60a2      	str	r2, [r4, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	33e7      	adds	r3, #231	; 0xe7
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	831a      	strh	r2, [r3, #24]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	221a      	movs	r2, #26
 8001772:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2203      	movs	r2, #3
 800177a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001788:	08001acc 	.word	0x08001acc
 800178c:	08001ae0 	.word	0x08001ae0
 8001790:	08001b0c 	.word	0x08001b0c

08001794 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	usb.USBInterruptHandler();
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <OTG_FS_IRQHandler+0x10>)
 800179a:	f7fe fd7b 	bl	8000294 <_ZN3USB19USBInterruptHandlerEv>
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000030 	.word	0x20000030

080017a8 <NMI_Handler>:

void NMI_Handler(void) {}
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HardFault_Handler>:

void HardFault_Handler(void) {
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
	while (1) {}
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:
}

void MemManage_Handler(void) {
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	while (1) {}
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:
}

void BusFault_Handler(void) {
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
	while (1) {}
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
	while (1) {}
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <SVC_Handler>:
}

void SVC_Handler(void) {}
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

void PendSV_Handler(void) {}
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Handler>:

void SysTick_Handler(void) {}
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <main>:
}


extern uint32_t SystemCoreClock;
int main(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
	SystemInit();							// Activates floating point coprocessor and resets clock
 800180e:	f000 f87b 	bl	8001908 <SystemInit>
	SystemClock_Config();					// Configure the clock and PLL - NB Currently done in SystemInit but will need updating for production board
 8001812:	f7ff fed3 	bl	80015bc <_Z18SystemClock_Configv>
	SystemCoreClockUpdate();				// Update SystemCoreClock (system clock frequency) derived from settings of oscillators, prescalers and PLL
 8001816:	f000 f8ad 	bl	8001974 <SystemCoreClockUpdate>
	InitBtnLED();							// PC13 blue button; PB7 is LD2 Blue; PB14 is LD3 Red
 800181a:	f7ff ff47 	bl	80016ac <_Z10InitBtnLEDv>
	usb.InitUSB();
 800181e:	4813      	ldr	r0, [pc, #76]	; (800186c <main+0x64>)
 8001820:	f7ff f96c 	bl	8000afc <_ZN3USB7InitUSBEv>

	int i = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]

	while (1)
	{
		if (GPIOC->IDR & GPIO_IDR_IDR_13) {
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <main+0x68>)
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00c      	beq.n	8001858 <main+0x50>
			GPIOB->BSRR |= GPIO_BSRR_BS_7;
 800183e:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <main+0x6c>)
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <main+0x6c>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001848:	6193      	str	r3, [r2, #24]
			GPIOB->BSRR |= GPIO_BSRR_BS_14;
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <main+0x6c>)
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <main+0x6c>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6193      	str	r3, [r2, #24]
 8001856:	e005      	b.n	8001864 <main+0x5c>
		}
		else
			GPIOB->BSRR |= GPIO_BSRR_BR_7;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <main+0x6c>)
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <main+0x6c>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001862:	6193      	str	r3, [r2, #24]
		i++;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3301      	adds	r3, #1
 8001868:	607b      	str	r3, [r7, #4]
		if (GPIOC->IDR & GPIO_IDR_IDR_13) {
 800186a:	e7dd      	b.n	8001828 <main+0x20>
 800186c:	20000030 	.word	0x20000030
 8001870:	40020800 	.word	0x40020800
 8001874:	40020400 	.word	0x40020400

08001878 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188e:	4293      	cmp	r3, r2
 8001890:	d102      	bne.n	8001898 <_Z41__static_initialization_and_destruction_0ii+0x20>
USB usb;
 8001892:	4803      	ldr	r0, [pc, #12]	; (80018a0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001894:	f7ff ff2e 	bl	80016f4 <_ZN3USBC1Ev>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000030 	.word	0x20000030

080018a4 <_GLOBAL__sub_I_usb>:
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7ff ffe3 	bl	8001878 <_Z41__static_initialization_and_destruction_0ii>
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ba:	e003      	b.n	80018c4 <LoopCopyDataInit>

080018bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018c2:	3104      	adds	r1, #4

080018c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018c4:	480b      	ldr	r0, [pc, #44]	; (80018f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018cc:	d3f6      	bcc.n	80018bc <CopyDataInit>
  ldr  r2, =_sbss
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018d0:	e002      	b.n	80018d8 <LoopFillZerobss>

080018d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018d4:	f842 3b04 	str.w	r3, [r2], #4

080018d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018dc:	d3f9      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018de:	f000 f813 	bl	8001908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e2:	f000 f8c3 	bl	8001a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e6:	f7ff ff8f 	bl	8001808 <main>
  bx  lr    
 80018ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018f0:	08001b24 	.word	0x08001b24
  ldr  r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018f8:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80018fc:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001900:	200002c8 	.word	0x200002c8

08001904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC_IRQHandler>
	...

08001908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800190c:	4a16      	ldr	r2, [pc, #88]	; (8001968 <SystemInit+0x60>)
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <SystemInit+0x60>)
 8001910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800191c:	4a13      	ldr	r2, [pc, #76]	; (800196c <SystemInit+0x64>)
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <SystemInit+0x64>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <SystemInit+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800192e:	4a0f      	ldr	r2, [pc, #60]	; (800196c <SystemInit+0x64>)
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <SystemInit+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <SystemInit+0x64>)
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <SystemInit+0x68>)
 8001942:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001944:	4a09      	ldr	r2, [pc, #36]	; (800196c <SystemInit+0x64>)
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <SystemInit+0x64>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <SystemInit+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SystemInit+0x60>)
 8001958:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800195c:	609a      	str	r2, [r3, #8]
#endif
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	40023800 	.word	0x40023800
 8001970:	24003010 	.word	0x24003010

08001974 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	2302      	movs	r3, #2
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	2302      	movs	r3, #2
 800198c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800198e:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <SystemCoreClockUpdate+0xe4>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b04      	cmp	r3, #4
 800199c:	d007      	beq.n	80019ae <SystemCoreClockUpdate+0x3a>
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d009      	beq.n	80019b6 <SystemCoreClockUpdate+0x42>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d13d      	bne.n	8001a22 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80019a6:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <SystemCoreClockUpdate+0xe8>)
 80019a8:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <SystemCoreClockUpdate+0xec>)
 80019aa:	601a      	str	r2, [r3, #0]
      break;
 80019ac:	e03d      	b.n	8001a2a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <SystemCoreClockUpdate+0xe8>)
 80019b0:	4a2c      	ldr	r2, [pc, #176]	; (8001a64 <SystemCoreClockUpdate+0xf0>)
 80019b2:	601a      	str	r2, [r3, #0]
      break;
 80019b4:	e039      	b.n	8001a2a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80019b6:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <SystemCoreClockUpdate+0xe4>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	0d9b      	lsrs	r3, r3, #22
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <SystemCoreClockUpdate+0xe4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ca:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00c      	beq.n	80019ec <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80019d2:	4a24      	ldr	r2, [pc, #144]	; (8001a64 <SystemCoreClockUpdate+0xf0>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <SystemCoreClockUpdate+0xe4>)
 80019dc:	6852      	ldr	r2, [r2, #4]
 80019de:	0992      	lsrs	r2, r2, #6
 80019e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e00b      	b.n	8001a04 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80019ec:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <SystemCoreClockUpdate+0xec>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <SystemCoreClockUpdate+0xe4>)
 80019f6:	6852      	ldr	r2, [r2, #4]
 80019f8:	0992      	lsrs	r2, r2, #6
 80019fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <SystemCoreClockUpdate+0xe4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1c:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <SystemCoreClockUpdate+0xe8>)
 8001a1e:	6013      	str	r3, [r2, #0]
      break;
 8001a20:	e003      	b.n	8001a2a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <SystemCoreClockUpdate+0xe8>)
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <SystemCoreClockUpdate+0xec>)
 8001a26:	601a      	str	r2, [r3, #0]
      break;
 8001a28:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <SystemCoreClockUpdate+0xe4>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <SystemCoreClockUpdate+0xf4>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <SystemCoreClockUpdate+0xe8>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemCoreClockUpdate+0xe8>)
 8001a48:	6013      	str	r3, [r2, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	371c      	adds	r7, #28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	00f42400 	.word	0x00f42400
 8001a64:	007a1200 	.word	0x007a1200
 8001a68:	20000004 	.word	0x20000004

08001a6c <__libc_init_array>:
 8001a6c:	b570      	push	{r4, r5, r6, lr}
 8001a6e:	4e0d      	ldr	r6, [pc, #52]	; (8001aa4 <__libc_init_array+0x38>)
 8001a70:	4c0d      	ldr	r4, [pc, #52]	; (8001aa8 <__libc_init_array+0x3c>)
 8001a72:	1ba4      	subs	r4, r4, r6
 8001a74:	10a4      	asrs	r4, r4, #2
 8001a76:	2500      	movs	r5, #0
 8001a78:	42a5      	cmp	r5, r4
 8001a7a:	d109      	bne.n	8001a90 <__libc_init_array+0x24>
 8001a7c:	4e0b      	ldr	r6, [pc, #44]	; (8001aac <__libc_init_array+0x40>)
 8001a7e:	4c0c      	ldr	r4, [pc, #48]	; (8001ab0 <__libc_init_array+0x44>)
 8001a80:	f000 f818 	bl	8001ab4 <_init>
 8001a84:	1ba4      	subs	r4, r4, r6
 8001a86:	10a4      	asrs	r4, r4, #2
 8001a88:	2500      	movs	r5, #0
 8001a8a:	42a5      	cmp	r5, r4
 8001a8c:	d105      	bne.n	8001a9a <__libc_init_array+0x2e>
 8001a8e:	bd70      	pop	{r4, r5, r6, pc}
 8001a90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a94:	4798      	blx	r3
 8001a96:	3501      	adds	r5, #1
 8001a98:	e7ee      	b.n	8001a78 <__libc_init_array+0xc>
 8001a9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a9e:	4798      	blx	r3
 8001aa0:	3501      	adds	r5, #1
 8001aa2:	e7f2      	b.n	8001a8a <__libc_init_array+0x1e>
 8001aa4:	08001b18 	.word	0x08001b18
 8001aa8:	08001b18 	.word	0x08001b18
 8001aac:	08001b18 	.word	0x08001b18
 8001ab0:	08001b20 	.word	0x08001b20

08001ab4 <_init>:
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	bf00      	nop
 8001ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aba:	bc08      	pop	{r3}
 8001abc:	469e      	mov	lr, r3
 8001abe:	4770      	bx	lr

08001ac0 <_fini>:
 8001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac2:	bf00      	nop
 8001ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ac6:	bc08      	pop	{r3}
 8001ac8:	469e      	mov	lr, r3
 8001aca:	4770      	bx	lr
