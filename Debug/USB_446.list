
USB_446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b80  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08001d44  08001d44  00011d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08001e0c  08001e0c  00011e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e14  08001e14  00011e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006a0  20000014  08001e2c  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200006b4  08001e2c  000206b4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000609c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001034  00000000  00000000  000260e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001f0  00000000  00000000  00027118  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00027308  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000019ef  00000000  00000000  000274b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001f0e  00000000  00000000  00028e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002adad  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000006a4  00000000  00000000  0002ae2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001d2c 	.word	0x08001d2c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08001d2c 	.word	0x08001d2c

08000204 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800020e:	4909      	ldr	r1, [pc, #36]	; (8000234 <NVIC_EnableIRQ+0x30>)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800021a:	f002 021f 	and.w	r2, r2, #31
 800021e:	2001      	movs	r0, #1
 8000220:	fa00 f202 	lsl.w	r2, r0, r2
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100

08000238 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	6039      	str	r1, [r7, #0]
 8000242:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000248:	2b00      	cmp	r3, #0
 800024a:	da0d      	bge.n	8000268 <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800024c:	490f      	ldr	r1, [pc, #60]	; (800028c <NVIC_SetPriority+0x54>)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	f003 030f 	and.w	r3, r3, #15
 8000258:	3b04      	subs	r3, #4
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	b2d2      	uxtb	r2, r2
 800025e:	0112      	lsls	r2, r2, #4
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	440b      	add	r3, r1
 8000264:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000266:	e00b      	b.n	8000280 <NVIC_SetPriority+0x48>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000268:	4a09      	ldr	r2, [pc, #36]	; (8000290 <NVIC_SetPriority+0x58>)
 800026a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026e:	4618      	mov	r0, r3
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	011b      	lsls	r3, r3, #4
 8000276:	b2d9      	uxtb	r1, r3
 8000278:	1813      	adds	r3, r2, r0
 800027a:	460a      	mov	r2, r1
 800027c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000ed00 	.word	0xe000ed00
 8000290:	e000e100 	.word	0xe000e100

08000294 <_ZSt3minItERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	461a      	mov	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	da01      	bge.n	80002b0 <_ZSt3minItERKT_S2_S2_+0x1c>
	return __b;
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	e000      	b.n	80002b2 <_ZSt3minItERKT_S2_S2_+0x1e>
      return __a;
 80002b0:	687b      	ldr	r3, [r7, #4]
    }
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
	...

080002c0 <_ZN3USB19USBInterruptHandlerEv>:
#include <USB.h>

void USB::USBInterruptHandler() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b092      	sub	sp, #72	; 0x48
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]

	int epnum, ep_intr, epint;

	//int interruptCode = USB_ReadInterrupts();

	if (usbEventNo >= 116) {
 80002c8:	4b99      	ldr	r3, [pc, #612]	; (8000530 <_ZN3USB19USBInterruptHandlerEv+0x270>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b73      	cmp	r3, #115	; 0x73
 80002ce:	dd01      	ble.n	80002d4 <_ZN3USB19USBInterruptHandlerEv+0x14>
		int susp = 1;
 80002d0:	2301      	movs	r3, #1
 80002d2:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// Handle spurious interrupt
	if ((USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK) == 0)
 80002d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002d8:	695a      	ldr	r2, [r3, #20]
 80002da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4013      	ands	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	bf0c      	ite	eq
 80002e6:	2301      	moveq	r3, #1
 80002e8:	2300      	movne	r3, #0
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	f040 840f 	bne.w	8000b10 <_ZN3USB19USBInterruptHandlerEv+0x850>
		return;

	// Handle Mode mismatch interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_MMIS)) {
 80002f2:	2102      	movs	r1, #2
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f001 fa01 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d007      	beq.n	8000310 <_ZN3USB19USBInterruptHandlerEv+0x50>
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_MMIS;
 8000300:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000304:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f003 0302 	and.w	r3, r3, #2
 800030e:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 80000 OEPINT
	// OUT endpoint interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_OEPINT)) {
 8000310:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f001 f9f1 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	f000 810b 	beq.w	8000538 <_ZN3USB19USBInterruptHandlerEv+0x278>

		if (usbEventNo > 115) {
 8000322:	4b83      	ldr	r3, [pc, #524]	; (8000530 <_ZN3USB19USBInterruptHandlerEv+0x270>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b73      	cmp	r3, #115	; 0x73
 8000328:	dd01      	ble.n	800032e <_ZN3USB19USBInterruptHandlerEv+0x6e>
			int susp = 1;
 800032a:	2301      	movs	r3, #1
 800032c:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		// Read the output endpoint interrupt register to ascertain which endpoint(s) fired an interrupt
		ep_intr = ((USBx_DEVICE->DAINT & USBx_DEVICE->DAINTMSK) & 0xFFFF0000U) >> 16; // FIXME mask unnecessary with shift right?
 800032e:	4b81      	ldr	r3, [pc, #516]	; (8000534 <_ZN3USB19USBInterruptHandlerEv+0x274>)
 8000330:	699a      	ldr	r2, [r3, #24]
 8000332:	4b80      	ldr	r3, [pc, #512]	; (8000534 <_ZN3USB19USBInterruptHandlerEv+0x274>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	4013      	ands	r3, r2
 8000338:	0c1b      	lsrs	r3, r3, #16
 800033a:	b29b      	uxth	r3, r3
 800033c:	647b      	str	r3, [r7, #68]	; 0x44


		// process each endpoint in turn incrementing the epnum and checking the interrupts (ep_intr) if that endpoint fired
		epnum = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]
		while (ep_intr != 0) {
 8000342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000344:	2b00      	cmp	r3, #0
 8000346:	f000 80f7 	beq.w	8000538 <_ZN3USB19USBInterruptHandlerEv+0x278>
			if ((ep_intr & 1) != 0) {
 800034a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	2b00      	cmp	r3, #0
 8000352:	f000 80e5 	beq.w	8000520 <_ZN3USB19USBInterruptHandlerEv+0x260>
				epint = USBx_OUTEP(epnum)->DOEPINT & USBx_DEVICE->DOEPMSK;
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800035c:	3358      	adds	r3, #88	; 0x58
 800035e:	015b      	lsls	r3, r3, #5
 8000360:	689a      	ldr	r2, [r3, #8]
 8000362:	4b74      	ldr	r3, [pc, #464]	; (8000534 <_ZN3USB19USBInterruptHandlerEv+0x274>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4013      	ands	r3, r2
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38

				if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC) {		// Transfer completed
 800036a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	2b00      	cmp	r3, #0
 8000372:	d01a      	beq.n	80003aa <_ZN3USB19USBInterruptHandlerEv+0xea>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_XFRC;				// Clear interrupt
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800037a:	3358      	adds	r3, #88	; 0x58
 800037c:	015b      	lsls	r3, r3, #5
 800037e:	461a      	mov	r2, r3
 8000380:	2301      	movs	r3, #1
 8000382:	6093      	str	r3, [r2, #8]
					//(void)PCD_EP_OutXfrComplete_int(hpcd, epnum);					// Appears to lead to placeholder function, overridable in user program
					//if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
			        // STATUS PHASE completed, update ep0_state to idle
			        ep0_state = USBD_EP0_IDLE;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2200      	movs	r2, #0
 8000388:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					//USBD_LL_StallEP(pdev, 0U);
				    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000392:	3358      	adds	r3, #88	; 0x58
 8000394:	015b      	lsls	r3, r3, #5
 8000396:	461a      	mov	r2, r3
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800039e:	3358      	adds	r3, #88	; 0x58
 80003a0:	015b      	lsls	r3, r3, #5
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003a8:	6013      	str	r3, [r2, #0]
				}

				if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) {		// SETUP phase done
 80003aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	f000 808d 	beq.w	80004d0 <_ZN3USB19USBInterruptHandlerEv+0x210>
					//NB psetup refers to hcpd.Setup which is an array[12] named 'setup buffer' filled by USB_OTG_GINTSTS_RXFLVL



					// Parse Setup Request containing data in xfer_buff filled by RXFLVL interrupt
					uint8_t *pdata = (uint8_t*)xfer_buff;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	330c      	adds	r3, #12
 80003ba:	613b      	str	r3, [r7, #16]
					req.mRequest     = *(uint8_t *)  (pdata);
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	701a      	strb	r2, [r3, #0]
					req.Request      = *(uint8_t *)  (pdata +  1);
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	785a      	ldrb	r2, [r3, #1]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	705a      	strb	r2, [r3, #1]
					req.Value        = SWAPBYTE      (pdata +  2);
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	3302      	adds	r3, #2
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	3303      	adds	r3, #3
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	b29b      	uxth	r3, r3
 80003dc:	021b      	lsls	r3, r3, #8
 80003de:	b29b      	uxth	r3, r3
 80003e0:	4413      	add	r3, r2
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	805a      	strh	r2, [r3, #2]
					req.Index        = SWAPBYTE      (pdata +  4);
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	3304      	adds	r3, #4
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	3305      	adds	r3, #5
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	021b      	lsls	r3, r3, #8
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	4413      	add	r3, r2
 80003fe:	b29a      	uxth	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	809a      	strh	r2, [r3, #4]
					req.Length       = SWAPBYTE      (pdata +  6);
 8000404:	693b      	ldr	r3, [r7, #16]
 8000406:	3306      	adds	r3, #6
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	b29a      	uxth	r2, r3
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	3307      	adds	r3, #7
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b29b      	uxth	r3, r3
 8000414:	021b      	lsls	r3, r3, #8
 8000416:	b29b      	uxth	r3, r3
 8000418:	4413      	add	r3, r2
 800041a:	b29a      	uxth	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	80da      	strh	r2, [r3, #6]

					//pdev->ep0_data_len = pdev->request.wLength;
					ep0_state = USBD_EP0_SETUP;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2201      	movs	r2, #1
 8000424:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					switch (req.mRequest & 0x1F) {		// originally USBD_LL_SetupStage
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	f003 031f 	and.w	r3, r3, #31
 8000430:	2b01      	cmp	r3, #1
 8000432:	d00b      	beq.n	800044c <_ZN3USB19USBInterruptHandlerEv+0x18c>
 8000434:	2b02      	cmp	r3, #2
 8000436:	d040      	beq.n	80004ba <_ZN3USB19USBInterruptHandlerEv+0x1fa>
 8000438:	2b00      	cmp	r3, #0
 800043a:	d000      	beq.n	800043e <_ZN3USB19USBInterruptHandlerEv+0x17e>
						//USBD_StdEPReq(pdev, req);
						break;

					default:
						//USBD_LL_StallEP(pdev, (req.mRequest & 0x80U));
						break;
 800043c:	e040      	b.n	80004c0 <_ZN3USB19USBInterruptHandlerEv+0x200>
						USBD_StdDevReq(req);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f000 ff7d 	bl	8001344 <_ZN3USB14USBD_StdDevReqE10usbRequest>
						break;
 800044a:	e039      	b.n	80004c0 <_ZN3USB19USBInterruptHandlerEv+0x200>
						if (req.mRequest == 0x21) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b21      	cmp	r3, #33	; 0x21
 8000452:	d106      	bne.n	8000462 <_ZN3USB19USBInterruptHandlerEv+0x1a2>
							USB_EP0StartXfer(DIR_IN, 0, 0);		// sends blank request back
 8000454:	2300      	movs	r3, #0
 8000456:	2200      	movs	r2, #0
 8000458:	2101      	movs	r1, #1
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f000 fff2 	bl	8001444 <_ZN3USB16USB_EP0StartXferEbhm>
						break;
 8000460:	e02d      	b.n	80004be <_ZN3USB19USBInterruptHandlerEv+0x1fe>
						} else if (req.mRequest == 0x81) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b81      	cmp	r3, #129	; 0x81
 8000468:	d129      	bne.n	80004be <_ZN3USB19USBInterruptHandlerEv+0x1fe>
							if (req.Value >> 8 == 0x22)		// 0x22 = CUSTOM_HID_REPORT_DESC
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	885b      	ldrh	r3, [r3, #2]
 800046e:	121b      	asrs	r3, r3, #8
 8000470:	2b22      	cmp	r3, #34	; 0x22
 8000472:	d124      	bne.n	80004be <_ZN3USB19USBInterruptHandlerEv+0x1fe>
								outBuffSize = std::min((uint16_t)0x4A, req.Length);		// 0x4A = USBD_CUSTOM_HID_REPORT_DESC_SIZE
 8000474:	234a      	movs	r3, #74	; 0x4a
 8000476:	837b      	strh	r3, [r7, #26]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	1d9a      	adds	r2, r3, #6
 800047c:	f107 031a 	add.w	r3, r7, #26
 8000480:	4611      	mov	r1, r2
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff06 	bl	8000294 <_ZSt3minItERKT_S2_S2_>
 8000488:	4603      	mov	r3, r0
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
								outBuff = CUSTOM_HID_ReportDesc_FS;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f203 320b 	addw	r2, r3, #779	; 0x30b
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
								ep0_state = USBD_EP0_DATA_IN;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2202      	movs	r2, #2
 80004a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
								USB_EP0StartXfer(DIR_IN, 0, outBuffSize);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80004ae:	2200      	movs	r2, #0
 80004b0:	2101      	movs	r1, #1
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f000 ffc6 	bl	8001444 <_ZN3USB16USB_EP0StartXferEbhm>
						break;
 80004b8:	e001      	b.n	80004be <_ZN3USB19USBInterruptHandlerEv+0x1fe>
						break;
 80004ba:	bf00      	nop
 80004bc:	e000      	b.n	80004c0 <_ZN3USB19USBInterruptHandlerEv+0x200>
						break;
 80004be:	bf00      	nop
					}

					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_STUP;				// Clear interrupt
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80004c6:	3358      	adds	r3, #88	; 0x58
 80004c8:	015b      	lsls	r3, r3, #5
 80004ca:	461a      	mov	r2, r3
 80004cc:	2308      	movs	r3, #8
 80004ce:	6093      	str	r3, [r2, #8]
				}

				if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS) {	// OUT token received when endpoint disabled
 80004d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004d2:	f003 0310 	and.w	r3, r3, #16
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d007      	beq.n	80004ea <_ZN3USB19USBInterruptHandlerEv+0x22a>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_OTEPDIS;			// Clear interrupt
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80004e0:	3358      	adds	r3, #88	; 0x58
 80004e2:	015b      	lsls	r3, r3, #5
 80004e4:	461a      	mov	r2, r3
 80004e6:	2310      	movs	r3, #16
 80004e8:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {	// Status Phase Received interrupt
 80004ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004ec:	f003 0320 	and.w	r3, r3, #32
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d007      	beq.n	8000504 <_ZN3USB19USBInterruptHandlerEv+0x244>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_OTEPSPR;			// Clear interrupt
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80004fa:	3358      	adds	r3, #88	; 0x58
 80004fc:	015b      	lsls	r3, r3, #5
 80004fe:	461a      	mov	r2, r3
 8000500:	2320      	movs	r3, #32
 8000502:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK) {			// OUT NAK interrupt
 8000504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800050a:	2b00      	cmp	r3, #0
 800050c:	d008      	beq.n	8000520 <_ZN3USB19USBInterruptHandlerEv+0x260>
					USBx_OUTEP(epnum)->DOEPINT = USB_OTG_DOEPINT_NAK;				// Clear interrupt
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000514:	3358      	adds	r3, #88	; 0x58
 8000516:	015b      	lsls	r3, r3, #5
 8000518:	461a      	mov	r2, r3
 800051a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051e:	6093      	str	r3, [r2, #8]
				}
			}
			epnum++;
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	3301      	adds	r3, #1
 8000524:	617b      	str	r3, [r7, #20]
			ep_intr >>= 1U;
 8000526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000528:	105b      	asrs	r3, r3, #1
 800052a:	647b      	str	r3, [r7, #68]	; 0x44
		while (ep_intr != 0) {
 800052c:	e709      	b.n	8000342 <_ZN3USB19USBInterruptHandlerEv+0x82>
 800052e:	bf00      	nop
 8000530:	200006a8 	.word	0x200006a8
 8000534:	50000800 	.word	0x50000800

	}

	/////////////////////////////////////////////// 40000 IEPINT
	// IN endpoint interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_IEPINT))
 8000538:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f001 f8dd 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	f000 8115 	beq.w	8000774 <_ZN3USB19USBInterruptHandlerEv+0x4b4>
	{


		// Read in the device interrupt bits [initially 1]
		ep_intr = (USBx_DEVICE->DAINT & USBx_DEVICE->DAINTMSK) & 0xFFFFU;
 800054a:	4b89      	ldr	r3, [pc, #548]	; (8000770 <_ZN3USB19USBInterruptHandlerEv+0x4b0>)
 800054c:	699a      	ldr	r2, [r3, #24]
 800054e:	4b88      	ldr	r3, [pc, #544]	; (8000770 <_ZN3USB19USBInterruptHandlerEv+0x4b0>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4013      	ands	r3, r2
 8000554:	b29b      	uxth	r3, r3
 8000556:	647b      	str	r3, [r7, #68]	; 0x44

		// process each endpoint in turn incrementing the epnum and checking the interrupts (ep_intr) if that endpoint fired
		epnum = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
		while (ep_intr != 0U) {
 800055c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800055e:	2b00      	cmp	r3, #0
 8000560:	f000 8108 	beq.w	8000774 <_ZN3USB19USBInterruptHandlerEv+0x4b4>
			if ((ep_intr & 1) != 0) { // In ITR [initially true]
 8000564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	2b00      	cmp	r3, #0
 800056c:	f000 80f8 	beq.w	8000760 <_ZN3USB19USBInterruptHandlerEv+0x4a0>
				// epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);

				// [initially 0x80]
				epint = USBx_INEP((uint32_t)epnum)->DIEPINT & (USBx_DEVICE->DIEPMSK | (((USBx_DEVICE->DIEPEMPMSK >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7));
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000576:	3348      	adds	r3, #72	; 0x48
 8000578:	015b      	lsls	r3, r3, #5
 800057a:	689a      	ldr	r2, [r3, #8]
 800057c:	4b7c      	ldr	r3, [pc, #496]	; (8000770 <_ZN3USB19USBInterruptHandlerEv+0x4b0>)
 800057e:	6919      	ldr	r1, [r3, #16]
 8000580:	4b7b      	ldr	r3, [pc, #492]	; (8000770 <_ZN3USB19USBInterruptHandlerEv+0x4b0>)
 8000582:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	fa20 f303 	lsr.w	r3, r0, r3
 800058e:	01db      	lsls	r3, r3, #7
 8000590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000594:	430b      	orrs	r3, r1
 8000596:	4013      	ands	r3, r2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38

				if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC) {
 800059a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d065      	beq.n	8000670 <_ZN3USB19USBInterruptHandlerEv+0x3b0>
					uint32_t fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	f003 030f 	and.w	r3, r3, #15
 80005aa:	2201      	movs	r2, #1
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	637b      	str	r3, [r7, #52]	; 0x34
					USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80005b2:	496f      	ldr	r1, [pc, #444]	; (8000770 <_ZN3USB19USBInterruptHandlerEv+0x4b0>)
 80005b4:	4b6e      	ldr	r3, [pc, #440]	; (8000770 <_ZN3USB19USBInterruptHandlerEv+0x4b0>)
 80005b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ba:	43db      	mvns	r3, r3
 80005bc:	4013      	ands	r3, r2
 80005be:	634b      	str	r3, [r1, #52]	; 0x34

					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_XFRC;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80005c6:	3348      	adds	r3, #72	; 0x48
 80005c8:	015b      	lsls	r3, r3, #5
 80005ca:	461a      	mov	r2, r3
 80005cc:	2301      	movs	r3, #1
 80005ce:	6093      	str	r3, [r2, #8]

					if (epnum == 0) {
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d146      	bne.n	8000664 <_ZN3USB19USBInterruptHandlerEv+0x3a4>

						//HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);

						if (ep0_state == USBD_EP0_DATA_IN) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d130      	bne.n	8000642 <_ZN3USB19USBInterruptHandlerEv+0x382>
							if (xfer_rem > 0) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d012      	beq.n	8000610 <_ZN3USB19USBInterruptHandlerEv+0x350>
								outBuffSize = xfer_rem;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
								xfer_rem = 0;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
								USB_EP0StartXfer(DIR_IN, 0, outBuffSize);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 ff1b 	bl	8001444 <_ZN3USB16USB_EP0StartXferEbhm>
 800060e:	e02f      	b.n	8000670 <_ZN3USB19USBInterruptHandlerEv+0x3b0>
							} else {

								USB_EPSetStall(epnum);
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4619      	mov	r1, r3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f001 f81e 	bl	8001658 <_ZN3USB14USB_EPSetStallEh>

								ep0_state = USBD_EP0_STATUS_OUT;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2205      	movs	r2, #5
 8000620:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

								//HAL_PCD_EP_Receive
								xfer_rem = 0;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
								xfer_buff[0] = 0;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
								USB_EP0StartXfer(DIR_OUT, 0, ep0_maxPacket);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7a1b      	ldrb	r3, [r3, #8]
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 ff02 	bl	8001444 <_ZN3USB16USB_EP0StartXferEbhm>
 8000640:	e016      	b.n	8000670 <_ZN3USB19USBInterruptHandlerEv+0x3b0>
							}
						}
						else if ((ep0_state == USBD_EP0_STATUS_IN) || (ep0_state == USBD_EP0_IDLE)) {		// second time around
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000648:	2b04      	cmp	r3, #4
 800064a:	d004      	beq.n	8000656 <_ZN3USB19USBInterruptHandlerEv+0x396>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10c      	bne.n	8000670 <_ZN3USB19USBInterruptHandlerEv+0x3b0>
							USB_EPSetStall(epnum);
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4619      	mov	r1, r3
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 fffb 	bl	8001658 <_ZN3USB14USB_EPSetStallEh>
 8000662:	e005      	b.n	8000670 <_ZN3USB19USBInterruptHandlerEv+0x3b0>
						}
					} else {
						int susp = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
						hid_state = CUSTOM_HID_IDLE;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2200      	movs	r2, #0
 800066c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					}
				}


				if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC) {
 8000670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000672:	f003 0308 	and.w	r3, r3, #8
 8000676:	2b00      	cmp	r3, #0
 8000678:	d007      	beq.n	800068a <_ZN3USB19USBInterruptHandlerEv+0x3ca>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_TOC;
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000680:	3348      	adds	r3, #72	; 0x48
 8000682:	015b      	lsls	r3, r3, #5
 8000684:	461a      	mov	r2, r3
 8000686:	2308      	movs	r3, #8
 8000688:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE) {
 800068a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800068c:	f003 0310 	and.w	r3, r3, #16
 8000690:	2b00      	cmp	r3, #0
 8000692:	d007      	beq.n	80006a4 <_ZN3USB19USBInterruptHandlerEv+0x3e4>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_ITTXFE;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800069a:	3348      	adds	r3, #72	; 0x48
 800069c:	015b      	lsls	r3, r3, #5
 800069e:	461a      	mov	r2, r3
 80006a0:	2310      	movs	r3, #16
 80006a2:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE) {
 80006a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <_ZN3USB19USBInterruptHandlerEv+0x3fe>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_INEPNE;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80006b4:	3348      	adds	r3, #72	; 0x48
 80006b6:	015b      	lsls	r3, r3, #5
 80006b8:	461a      	mov	r2, r3
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD) {
 80006be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006c0:	f003 0302 	and.w	r3, r3, #2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d007      	beq.n	80006d8 <_ZN3USB19USBInterruptHandlerEv+0x418>
					USBx_INEP(epnum)->DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80006ce:	3348      	adds	r3, #72	; 0x48
 80006d0:	015b      	lsls	r3, r3, #5
 80006d2:	461a      	mov	r2, r3
 80006d4:	2302      	movs	r3, #2
 80006d6:	6093      	str	r3, [r2, #8]
				}
				if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE) {
 80006d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d03e      	beq.n	8000760 <_ZN3USB19USBInterruptHandlerEv+0x4a0>
					//(void)PCD_WriteEmptyTxFifo(hpcd, epnum);


					uint32_t maxPacket = (epnum == 0 ? ep0_maxPacket : ep_maxPacket);
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <_ZN3USB19USBInterruptHandlerEv+0x42e>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7a1b      	ldrb	r3, [r3, #8]
 80006ec:	e001      	b.n	80006f2 <_ZN3USB19USBInterruptHandlerEv+0x432>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7a5b      	ldrb	r3, [r3, #9]
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					if (outBuffSize > maxPacket) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80006fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d90b      	bls.n	8000718 <_ZN3USB19USBInterruptHandlerEv+0x458>
						xfer_rem = outBuffSize - maxPacket;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
						outBuffSize = maxPacket;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000714:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					}

					USB_WritePacket(outBuff, epnum, (uint16_t)outBuffSize);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000728:	b29b      	uxth	r3, r3
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 fc16 	bl	8000f5c <_ZN3USB15USB_WritePacketEPhmt>

					outBuff += outBuffSize;		// Move pointer forwards
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800073c:	441a      	add	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
					uint32_t fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	2201      	movs	r2, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
					USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000752:	4907      	ldr	r1, [pc, #28]	; (8000770 <_ZN3USB19USBInterruptHandlerEv+0x4b0>)
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <_ZN3USB19USBInterruptHandlerEv+0x4b0>)
 8000756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075a:	43db      	mvns	r3, r3
 800075c:	4013      	ands	r3, r2
 800075e:	634b      	str	r3, [r1, #52]	; 0x34

				}
			}
			epnum++;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	3301      	adds	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
			ep_intr >>= 1U;
 8000766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000768:	105b      	asrs	r3, r3, #1
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
		while (ep_intr != 0U) {
 800076c:	e6f6      	b.n	800055c <_ZN3USB19USBInterruptHandlerEv+0x29c>
 800076e:	bf00      	nop
 8000770:	50000800 	.word	0x50000800

	}

	/////////////////////////////////////////////// 80000000 USB_OTG_GINTSTS_WKUINT
	// Handle Resume Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_WKUINT))
 8000774:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 ffbf 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00d      	beq.n	80007a0 <_ZN3USB19USBInterruptHandlerEv+0x4e0>
	{
		// Clear the Remote Wake-up Signaling
		USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000784:	4aaa      	ldr	r2, [pc, #680]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 8000786:	4baa      	ldr	r3, [pc, #680]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	f023 0301 	bic.w	r3, r3, #1
 800078e:	6053      	str	r3, [r2, #4]

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_WKUINT;
 8000790:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000794:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800079e:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 800 USBSUSP
	// Handle Suspend Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_USBSUSP))
 80007a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 ffa9 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d01c      	beq.n	80007ea <_ZN3USB19USBInterruptHandlerEv+0x52a>
	{

		if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80007b0:	4b9f      	ldr	r3, [pc, #636]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	bf0c      	ite	eq
 80007bc:	2301      	moveq	r3, #1
 80007be:	2300      	movne	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d009      	beq.n	80007da <_ZN3USB19USBInterruptHandlerEv+0x51a>
		{
			//USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);		// stores status of suspend pdev->
			dev_state  = USBD_STATE_SUSPENDED;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2204      	movs	r2, #4
 80007ca:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			USBx_PCGCCTL |= USB_OTG_PCGCCTL_STOPCLK;
 80007ce:	4a99      	ldr	r2, [pc, #612]	; (8000a34 <_ZN3USB19USBInterruptHandlerEv+0x774>)
 80007d0:	4b98      	ldr	r3, [pc, #608]	; (8000a34 <_ZN3USB19USBInterruptHandlerEv+0x774>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6013      	str	r3, [r2, #0]
		}
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_USBSUSP;
 80007da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007e8:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 1000 USB_OTG_GINTSTS_USBRST
	// Handle Reset Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_USBRST))
 80007ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 ff84 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f000 8094 	beq.w	8000924 <_ZN3USB19USBInterruptHandlerEv+0x664>
	{
		USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80007fc:	4a8c      	ldr	r2, [pc, #560]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80007fe:	4b8c      	ldr	r3, [pc, #560]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	f023 0301 	bic.w	r3, r3, #1
 8000806:	6053      	str	r3, [r2, #4]

		// USB_FlushTxFifo
		USB_OTG_FS->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (0x10 << 6));
 8000808:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800080c:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8000810:	611a      	str	r2, [r3, #16]
		while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8000812:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	f003 0320 	and.w	r3, r3, #32
 800081c:	2b20      	cmp	r3, #32
 800081e:	bf0c      	ite	eq
 8000820:	2301      	moveq	r3, #1
 8000822:	2300      	movne	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <_ZN3USB19USBInterruptHandlerEv+0x56c>
 800082a:	e7f2      	b.n	8000812 <_ZN3USB19USBInterruptHandlerEv+0x552>

		for (int i = 0; i < 6; i++) {				// hpcd->Init.dev_endpoints
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b05      	cmp	r3, #5
 8000834:	dc33      	bgt.n	800089e <_ZN3USB19USBInterruptHandlerEv+0x5de>
			USBx_INEP(i)->DIEPINT = 0xFB7FU;		// see p1177 for explanation: based on datasheet should be more like 0b10100100111011
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800083c:	3348      	adds	r3, #72	; 0x48
 800083e:	015b      	lsls	r3, r3, #5
 8000840:	461a      	mov	r2, r3
 8000842:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000846:	6093      	str	r3, [r2, #8]
			USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800084e:	3348      	adds	r3, #72	; 0x48
 8000850:	015b      	lsls	r3, r3, #5
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800085a:	3348      	adds	r3, #72	; 0x48
 800085c:	015b      	lsls	r3, r3, #5
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000864:	6013      	str	r3, [r2, #0]
			USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800086c:	3358      	adds	r3, #88	; 0x58
 800086e:	015b      	lsls	r3, r3, #5
 8000870:	461a      	mov	r2, r3
 8000872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000876:	6093      	str	r3, [r2, #8]
			USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800087e:	3358      	adds	r3, #88	; 0x58
 8000880:	015b      	lsls	r3, r3, #5
 8000882:	461a      	mov	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800088a:	3358      	adds	r3, #88	; 0x58
 800088c:	015b      	lsls	r3, r3, #5
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000894:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 6; i++) {				// hpcd->Init.dev_endpoints
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3301      	adds	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e7c8      	b.n	8000830 <_ZN3USB19USBInterruptHandlerEv+0x570>
		}
		USBx_DEVICE->DAINTMSK |= 0x10001U;
 800089e:	4a64      	ldr	r2, [pc, #400]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80008a0:	4b63      	ldr	r3, [pc, #396]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80008a8:	61d3      	str	r3, [r2, #28]

		USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
				USB_OTG_DOEPMSK_XFRCM |
				USB_OTG_DOEPMSK_EPDM |
				USB_OTG_DOEPMSK_OTEPSPRM |
				USB_OTG_DOEPMSK_NAKM;
 80008aa:	4a61      	ldr	r2, [pc, #388]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80008ac:	4b60      	ldr	r3, [pc, #384]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
		USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80008b8:	6153      	str	r3, [r2, #20]

		USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
				USB_OTG_DIEPMSK_XFRCM |
				USB_OTG_DIEPMSK_EPDM;
 80008ba:	4a5d      	ldr	r2, [pc, #372]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80008bc:	4b5c      	ldr	r3, [pc, #368]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	f043 030b 	orr.w	r3, r3, #11
		USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80008c4:	6113      	str	r3, [r2, #16]

		// Set Default Address to 0
		USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80008c6:	4a5a      	ldr	r2, [pc, #360]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80008c8:	4b59      	ldr	r3, [pc, #356]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80008d0:	6013      	str	r3, [r2, #0]

		// setup EP0 to receive SETUP packets
		if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) != USB_OTG_DOEPCTL_EPENA)	{
 80008d2:	4b59      	ldr	r3, [pc, #356]	; (8000a38 <_ZN3USB19USBInterruptHandlerEv+0x778>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008de:	bf14      	ite	ne
 80008e0:	2301      	movne	r3, #1
 80008e2:	2300      	moveq	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d014      	beq.n	8000914 <_ZN3USB19USBInterruptHandlerEv+0x654>
			USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80008ea:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <_ZN3USB19USBInterruptHandlerEv+0x778>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));		// Set PKTCNT to 1
 80008f0:	4a51      	ldr	r2, [pc, #324]	; (8000a38 <_ZN3USB19USBInterruptHandlerEv+0x778>)
 80008f2:	4b51      	ldr	r3, [pc, #324]	; (8000a38 <_ZN3USB19USBInterruptHandlerEv+0x778>)
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008fa:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);									// Set XFRSIZ to 24
 80008fc:	4a4e      	ldr	r2, [pc, #312]	; (8000a38 <_ZN3USB19USBInterruptHandlerEv+0x778>)
 80008fe:	4b4e      	ldr	r3, [pc, #312]	; (8000a38 <_ZN3USB19USBInterruptHandlerEv+0x778>)
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	f043 0318 	orr.w	r3, r3, #24
 8000906:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;					// Set STUPCNT to 3
 8000908:	4a4b      	ldr	r2, [pc, #300]	; (8000a38 <_ZN3USB19USBInterruptHandlerEv+0x778>)
 800090a:	4b4b      	ldr	r3, [pc, #300]	; (8000a38 <_ZN3USB19USBInterruptHandlerEv+0x778>)
 800090c:	691b      	ldr	r3, [r3, #16]
 800090e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8000912:	6113      	str	r3, [r2, #16]
		}

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_USBRST;
 8000914:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000918:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000922:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 2000 USB_OTG_GINTSTS_ENUMDNE
	// Handle Enumeration done Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_ENUMDNE))
 8000924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f000 fee7 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d04b      	beq.n	80009cc <_ZN3USB19USBInterruptHandlerEv+0x70c>
	{
		// Set the MPS of the IN EP based on the enumeration speed
		USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8000934:	4a41      	ldr	r2, [pc, #260]	; (8000a3c <_ZN3USB19USBInterruptHandlerEv+0x77c>)
 8000936:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <_ZN3USB19USBInterruptHandlerEv+0x77c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800093e:	f023 0307 	bic.w	r3, r3, #7
 8000942:	6013      	str	r3, [r2, #0]
#define DSTS_ENUMSPD_LS_PHY_6MHZ               (2U << 1)
		if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ) {
 8000944:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	f003 0306 	and.w	r3, r3, #6
 800094c:	2b04      	cmp	r3, #4
 800094e:	bf0c      	ite	eq
 8000950:	2301      	moveq	r3, #1
 8000952:	2300      	movne	r3, #0
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d005      	beq.n	8000966 <_ZN3USB19USBInterruptHandlerEv+0x6a6>
			USBx_INEP(0U)->DIEPCTL |= 3U;
 800095a:	4a38      	ldr	r2, [pc, #224]	; (8000a3c <_ZN3USB19USBInterruptHandlerEv+0x77c>)
 800095c:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <_ZN3USB19USBInterruptHandlerEv+0x77c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f043 0303 	orr.w	r3, r3, #3
 8000964:	6013      	str	r3, [r2, #0]
		}
		USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;		//  Clear global IN NAK
 8000966:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 8000968:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <_ZN3USB19USBInterruptHandlerEv+0x770>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000970:	6053      	str	r3, [r2, #4]

		// Assuming Full Speed USB and clock > 32MHz Set USB Turnaround time
		int UsbTrd = 0x6U;
 8000972:	2306      	movs	r3, #6
 8000974:	627b      	str	r3, [r7, #36]	; 0x24

		USB_OTG_FS->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000976:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800097a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000984:	60d3      	str	r3, [r2, #12]
		USB_OTG_FS->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8000986:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800098a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	029b      	lsls	r3, r3, #10
 8000994:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8000998:	4313      	orrs	r3, r2
 800099a:	60cb      	str	r3, [r1, #12]

		// Set Speed. pdev->dev_speed = 1

		USB_ActivateEndpoint(0, DIR_OUT, 0);		// Open EP0 OUT
 800099c:	2300      	movs	r3, #0
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 fa2e 	bl	8000e04 <_ZN3USB20USB_ActivateEndpointEmbh>
		USB_ActivateEndpoint(0, DIR_IN, 0);		// Open EP0 IN
 80009a8:	2300      	movs	r3, #0
 80009aa:	2201      	movs	r2, #1
 80009ac:	2100      	movs	r1, #0
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 fa28 	bl	8000e04 <_ZN3USB20USB_ActivateEndpointEmbh>

		ep0_state = USBD_EP0_IDLE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_ENUMDNE;
 80009bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ca:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 10 RXFLVL
	// Handle RxQLevel Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_RXFLVL))
 80009cc:	2110      	movs	r1, #16
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 fe94 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d047      	beq.n	8000a6a <_ZN3USB19USBInterruptHandlerEv+0x7aa>
	{

		USB_OTG_FS->GINTMSK &= ~USB_OTG_GINTSTS_RXFLVL;
 80009da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f023 0310 	bic.w	r3, r3, #16
 80009e8:	6193      	str	r3, [r2, #24]

		uint32_t temp = USB_OTG_FS->GRXSTSP;		//OTG receive status debug read/OTG status read and	pop registers (OTG_GRXSTSR/OTG_GRXSTSP) not shown in SFR
 80009ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009ee:	6a1b      	ldr	r3, [r3, #32]
 80009f0:	623b      	str	r3, [r7, #32]

		// Get the endpoint number
		epnum = temp & USB_OTG_GRXSTSP_EPNUM;
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	f003 030f 	and.w	r3, r3, #15
 80009f8:	617b      	str	r3, [r7, #20]

		if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_DATA_UPDT) {
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	0c5b      	lsrs	r3, r3, #17
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d11c      	bne.n	8000a40 <_ZN3USB19USBInterruptHandlerEv+0x780>
			if ((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8000a06:	6a3a      	ldr	r2, [r7, #32]
 8000a08:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d023      	beq.n	8000a5a <_ZN3USB19USBInterruptHandlerEv+0x79a>
			{
				USB_ReadPacket(xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f103 010c 	add.w	r1, r3, #12
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	091b      	lsrs	r3, r3, #4
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	461a      	mov	r2, r3
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 fa72 	bl	8000f10 <_ZN3USB14USB_ReadPacketEPmt>
 8000a2c:	e015      	b.n	8000a5a <_ZN3USB19USBInterruptHandlerEv+0x79a>
 8000a2e:	bf00      	nop
 8000a30:	50000800 	.word	0x50000800
 8000a34:	50000e00 	.word	0x50000e00
 8000a38:	50000b00 	.word	0x50000b00
 8000a3c:	50000900 	.word	0x50000900

				//xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
				//xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
			}
		}
		else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT) {
 8000a40:	6a3b      	ldr	r3, [r7, #32]
 8000a42:	0c5b      	lsrs	r3, r3, #17
 8000a44:	f003 030f 	and.w	r3, r3, #15
 8000a48:	2b06      	cmp	r3, #6
 8000a4a:	d106      	bne.n	8000a5a <_ZN3USB19USBInterruptHandlerEv+0x79a>
			USB_ReadPacket(xfer_buff, 8U);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	330c      	adds	r3, #12
 8000a50:	2208      	movs	r2, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f000 fa5b 	bl	8000f10 <_ZN3USB14USB_ReadPacketEPmt>
			//xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
		}

		USB_OTG_FS->GINTMSK |= USB_OTG_GINTSTS_RXFLVL;
 8000a5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f043 0310 	orr.w	r3, r3, #16
 8000a68:	6193      	str	r3, [r2, #24]
	}

	/////////////////////////////////////////////// 8 SOF
	// Handle SOF Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_SOF))
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 fe45 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d007      	beq.n	8000a88 <_ZN3USB19USBInterruptHandlerEv+0x7c8>
	{
		// Doesn't seem to do anything
		//HAL_PCD_SOFCallback(hpcd);

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_SOF;
 8000a78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	6153      	str	r3, [r2, #20]
	}

	/* Handle Incomplete ISO IN Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_IISOIXFR))
 8000a88:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 fe35 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d007      	beq.n	8000aa8 <_ZN3USB19USBInterruptHandlerEv+0x7e8>
	{
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_IISOIXFR;
 8000a98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa6:	6153      	str	r3, [r2, #20]
	}

	/* Handle Incomplete ISO OUT Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000aa8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 fe25 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d007      	beq.n	8000ac8 <_ZN3USB19USBInterruptHandlerEv+0x808>
	{
		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_PXFR_INCOMPISOOUT;
 8000ab8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000abc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac6:	6153      	str	r3, [r2, #20]
	}

	/////////////////////////////////////////////// 40000000 SRQINT
	// Handle Connection event Interrupt
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_SRQINT))
 8000ac8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 fe15 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d007      	beq.n	8000ae8 <_ZN3USB19USBInterruptHandlerEv+0x828>
	{
		//HAL_PCD_ConnectCallback(hpcd);		// this doesn't seem to do anything

		USB_OTG_FS->GINTSTS &= USB_OTG_GINTSTS_SRQINT;
 8000ad8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000adc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000ae6:	6153      	str	r3, [r2, #20]
	}

	/* Handle Disconnection event Interrupt */
	if (USB_ReadInterrupts(USB_OTG_GINTSTS_OTGINT))
 8000ae8:	2104      	movs	r1, #4
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f000 fe06 	bl	80016fc <_ZN3USB18USB_ReadInterruptsEm>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00d      	beq.n	8000b12 <_ZN3USB19USBInterruptHandlerEv+0x852>
	{
		uint32_t temp = USB_OTG_FS->GOTGINT;
 8000af6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	61fb      	str	r3, [r7, #28]
		if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
		{
			//HAL_PCD_DisconnectCallback(hpcd);
			//pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
		}
		USB_OTG_FS->GOTGINT |= temp;
 8000afe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000b02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	604b      	str	r3, [r1, #4]
 8000b0e:	e000      	b.n	8000b12 <_ZN3USB19USBInterruptHandlerEv+0x852>
		return;
 8000b10:	bf00      	nop
		}
	}
#endif
	 */

}
 8000b12:	3748      	adds	r7, #72	; 0x48
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_ZN3USB7InitUSBEv>:



void USB::InitUSB()
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	// *********************  HAL_PCD_MspInit() in /Src/usbd_conf.c

	// USB_OTG_FS GPIO Configuration: PA8: USB_OTG_FS_SOF; PA9: USB_OTG_FS_VBUS; PA10: USB_OTG_FS_ID; PA11: USB_OTG_FS_DM; PA12: USB_OTG_FS_DP
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000b20:	4ab1      	ldr	r2, [pc, #708]	; (8000de8 <_ZN3USB7InitUSBEv+0x2d0>)
 8000b22:	4bb1      	ldr	r3, [pc, #708]	; (8000de8 <_ZN3USB7InitUSBEv+0x2d0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30

	// PA8, PA10, PA11, PA12 (NB PA9 - VBUS uses default values)
	GPIOA->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1 | GPIO_MODER_MODER12_1;					// 10: Alternate function mode
 8000b2c:	4aaf      	ldr	r2, [pc, #700]	; (8000dec <_ZN3USB7InitUSBEv+0x2d4>)
 8000b2e:	4baf      	ldr	r3, [pc, #700]	; (8000dec <_ZN3USB7InitUSBEv+0x2d4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f043 7328 	orr.w	r3, r3, #44040192	; 0x2a00000
 8000b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR10 | GPIO_OSPEEDER_OSPEEDR11 | GPIO_OSPEEDER_OSPEEDR12;		// 11: High speed
 8000b3c:	4aab      	ldr	r2, [pc, #684]	; (8000dec <_ZN3USB7InitUSBEv+0x2d4>)
 8000b3e:	4bab      	ldr	r3, [pc, #684]	; (8000dec <_ZN3USB7InitUSBEv+0x2d4>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f043 737c 	orr.w	r3, r3, #66060288	; 0x3f00000
 8000b46:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000b4a:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[1] |= (10 << 0) | (10 << 8) | (10 << 12) | (10 << 16);															// Alternate Function 10 is OTG_FS
 8000b4c:	4aa7      	ldr	r2, [pc, #668]	; (8000dec <_ZN3USB7InitUSBEv+0x2d4>)
 8000b4e:	4ba7      	ldr	r3, [pc, #668]	; (8000dec <_ZN3USB7InitUSBEv+0x2d4>)
 8000b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b52:	f043 130a 	orr.w	r3, r3, #655370	; 0xa000a
 8000b56:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000b5a:	6253      	str	r3, [r2, #36]	; 0x24

	RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN;				// USB OTG FS clock enable
 8000b5c:	4aa2      	ldr	r2, [pc, #648]	; (8000de8 <_ZN3USB7InitUSBEv+0x2d0>)
 8000b5e:	4ba2      	ldr	r3, [pc, #648]	; (8000de8 <_ZN3USB7InitUSBEv+0x2d0>)
 8000b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b66:	6353      	str	r3, [r2, #52]	; 0x34
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;				// Enable system configuration clock: used to manage external interrupt line connection to GPIOs
 8000b68:	4a9f      	ldr	r2, [pc, #636]	; (8000de8 <_ZN3USB7InitUSBEv+0x2d0>)
 8000b6a:	4b9f      	ldr	r3, [pc, #636]	; (8000de8 <_ZN3USB7InitUSBEv+0x2d0>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b72:	6453      	str	r3, [r2, #68]	; 0x44

	NVIC_SetPriority(OTG_FS_IRQn, 0);
 8000b74:	2100      	movs	r1, #0
 8000b76:	2043      	movs	r0, #67	; 0x43
 8000b78:	f7ff fb5e 	bl	8000238 <NVIC_SetPriority>
	NVIC_EnableIRQ(OTG_FS_IRQn);
 8000b7c:	2043      	movs	r0, #67	; 0x43
 8000b7e:	f7ff fb41 	bl	8000204 <NVIC_EnableIRQ>

	// *********************  HAL_PCD_Init() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd.c
	USB_OTG_FS->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;		// Disable global interrupts
 8000b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f023 0301 	bic.w	r3, r3, #1
 8000b90:	6093      	str	r3, [r2, #8]

	// *********************  USB_CoreInit in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;		// Select FS interface (embedded Phy)
 8000b92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba0:	60d3      	str	r3, [r2, #12]

	// *********************  USB_CoreReset() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	// Reset the USB Core (needed after USB clock settings change)
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8000ba2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	0fdb      	lsrs	r3, r3, #31
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d000      	beq.n	8000bb4 <_ZN3USB7InitUSBEv+0x9c>
 8000bb2:	e7f6      	b.n	8000ba2 <_ZN3USB7InitUSBEv+0x8a>
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;		// Core Soft Reset
 8000bb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6113      	str	r3, [r2, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8000bc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d000      	beq.n	8000bde <_ZN3USB7InitUSBEv+0xc6>
 8000bdc:	e7f2      	b.n	8000bc4 <_ZN3USB7InitUSBEv+0xac>


	// *********************  USB_CoreInit() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GCCFG |= USB_OTG_GCCFG_PWRDWN;			// Activate the transceiver in transmission/reception. When reset, the transceiver is kept in power-down. 0 = USB FS transceiver disabled; 1 = USB FS transceiver enabled
 8000bde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000be2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bec:	6393      	str	r3, [r2, #56]	; 0x38

	// *********************  USB_SetCurrentMode() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;		// Force USB device mode
 8000bee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000bfc:	60d3      	str	r3, [r2, #12]

	// Not really sure what this is doing?
	// OTG device IN endpoint transmit FIFO size register	(OTG_DIEPTXFx) (x = 1..5[FS] /8[HS], where x is the	FIFO number)
	// Bits 31:16 INEPTXFD[15:0]: IN endpoint Tx FIFO depth
	// Bits 15:0 INEPTXSA[15:0]: IN endpoint FIFOx transmit RAM start address
	for (uint8_t i = 0U; i < 15U; i++) {
 8000bfe:	2300      	movs	r3, #0
 8000c00:	75fb      	strb	r3, [r7, #23]
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
 8000c04:	2b0e      	cmp	r3, #14
 8000c06:	d80b      	bhi.n	8000c20 <_ZN3USB7InitUSBEv+0x108>
		USB_OTG_FS->DIEPTXF[i] = 0U;
 8000c08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	3340      	adds	r3, #64	; 0x40
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0U; i < 15U; i++) {
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	75fb      	strb	r3, [r7, #23]
 8000c1e:	e7f0      	b.n	8000c02 <_ZN3USB7InitUSBEv+0xea>
	}


	USB_OTG_FS->GCCFG |= USB_OTG_GCCFG_VBDEN; 			// Enable HW VBUS sensing
 8000c20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2e:	6393      	str	r3, [r2, #56]	; 0x38
	*((uint32_t *)USB_OTG_FS + USB_OTG_PCGCCTL_BASE) &= ~USB_OTG_PCGCCTL_STOPCLK;		// peripheral register not in header - should be something like OTG_FS_PWRCLK->FS_PCGCCTL
 8000c30:	4a6f      	ldr	r2, [pc, #444]	; (8000df0 <_ZN3USB7InitUSBEv+0x2d8>)
 8000c32:	4b6f      	ldr	r3, [pc, #444]	; (8000df0 <_ZN3USB7InitUSBEv+0x2d8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f023 0301 	bic.w	r3, r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_PFIVL;			// default 00: 80% of the frame interval: Indicates time within frame at which application must be notified using end of periodic frame interrupt. This can be used to determine if all the isochronous traffic for that frame is complete.
 8000c3c:	4a6d      	ldr	r2, [pc, #436]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c3e:	4b6d      	ldr	r3, [pc, #436]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000c46:	6013      	str	r3, [r2, #0]

	// *********************  USB_SetDevSpeed() in  Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USBx_DEVICE->DCFG |= USB_OTG_DCFG_DSPD;				// 11: Full speed using internal FS PHY
 8000c48:	4a6a      	ldr	r2, [pc, #424]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c4a:	4b6a      	ldr	r3, [pc, #424]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f043 0303 	orr.w	r3, r3, #3
 8000c52:	6013      	str	r3, [r2, #0]

	// *********************  USB_FlushTxFifo() and USB_FlushRxFifo() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_TXFNUM_4;	// Select buffers to flush. 10000: Flush all the transmit FIFOs in device or host mode
 8000c54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c62:	6113      	str	r3, [r2, #16]
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;		// Flush the TX buffers
 8000c64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	f043 0320 	orr.w	r3, r3, #32
 8000c72:	6113      	str	r3, [r2, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8000c74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	f003 0320 	and.w	r3, r3, #32
 8000c7e:	2b20      	cmp	r3, #32
 8000c80:	bf0c      	ite	eq
 8000c82:	2301      	moveq	r3, #1
 8000c84:	2300      	movne	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d000      	beq.n	8000c8e <_ZN3USB7InitUSBEv+0x176>
 8000c8c:	e7f2      	b.n	8000c74 <_ZN3USB7InitUSBEv+0x15c>

	USB_OTG_FS->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8000c8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c92:	2210      	movs	r2, #16
 8000c94:	611a      	str	r2, [r3, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8000c96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	2b10      	cmp	r3, #16
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2301      	moveq	r3, #1
 8000ca6:	2300      	movne	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d000      	beq.n	8000cb0 <_ZN3USB7InitUSBEv+0x198>
 8000cae:	e7f2      	b.n	8000c96 <_ZN3USB7InitUSBEv+0x17e>

	// ********************* continues USB_DevInit() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	/* Clear all pending Device Interrupts */
	USBx_DEVICE->DIEPMSK = 0U;
 8000cb0:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
	USBx_DEVICE->DOEPMSK = 0U;
 8000cb6:	4b4f      	ldr	r3, [pc, #316]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
	USBx_DEVICE->DAINTMSK = 0U;
 8000cbc:	4b4d      	ldr	r3, [pc, #308]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]

	// Note these following commands do not visibly change anything - some of these appear to affect other registers (see p 1177)
	for (int i = 0U; i < 6; i++) {						// 6 = cfg.dev_endpoints
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	2b05      	cmp	r3, #5
 8000cca:	dc1c      	bgt.n	8000d06 <_ZN3USB7InitUSBEv+0x1ee>
		USBx_INEP(i)->DIEPCTL = 0U;						// shown in SFRs as FS_DIEPCTL0, DIEPCTL1, DIEPCTL2, DIEPCTL3 (??DIEPCTL4/5 not shown in SFR)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000cd2:	3348      	adds	r3, #72	; 0x48
 8000cd4:	015b      	lsls	r3, r3, #5
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	6013      	str	r3, [r2, #0]
		USBx_INEP(i)->DIEPTSIZ = 0U;
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000ce2:	3348      	adds	r3, #72	; 0x48
 8000ce4:	015b      	lsls	r3, r3, #5
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	2300      	movs	r3, #0
 8000cea:	6113      	str	r3, [r2, #16]
		USBx_INEP(i)->DIEPINT  = 0xFB7FU;				// OTG device IN endpoint x interrupt register
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000cf2:	3348      	adds	r3, #72	; 0x48
 8000cf4:	015b      	lsls	r3, r3, #5
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000cfc:	6093      	str	r3, [r2, #8]
	for (int i = 0U; i < 6; i++) {						// 6 = cfg.dev_endpoints
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	3301      	adds	r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	e7df      	b.n	8000cc6 <_ZN3USB7InitUSBEv+0x1ae>
	}

	for (int i = 0U; i < 6; i++) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2b05      	cmp	r3, #5
 8000d0e:	dc1c      	bgt.n	8000d4a <_ZN3USB7InitUSBEv+0x232>
		USBx_OUTEP(i)->DOEPCTL = 0U;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000d16:	3358      	adds	r3, #88	; 0x58
 8000d18:	015b      	lsls	r3, r3, #5
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	6013      	str	r3, [r2, #0]
		USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000d26:	3358      	adds	r3, #88	; 0x58
 8000d28:	015b      	lsls	r3, r3, #5
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000d36:	3358      	adds	r3, #88	; 0x58
 8000d38:	015b      	lsls	r3, r3, #5
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000d40:	6093      	str	r3, [r2, #8]
	for (int i = 0U; i < 6; i++) {
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e7df      	b.n	8000d0a <_ZN3USB7InitUSBEv+0x1f2>
	}

	USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);	// NB bit does not appear to be shown in the SFR
 8000d4a:	4a2a      	ldr	r2, [pc, #168]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d54:	6113      	str	r3, [r2, #16]

	USB_OTG_FS->GINTMSK = 0U;							// Disable all interrupts.
 8000d56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
	USB_OTG_FS->GINTSTS = 0xBFFFFFFFU;					// Clear any pending interrupts
 8000d5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d62:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8000d66:	615a      	str	r2, [r3, #20]
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;		// Enable the Global interrupt: Receive FIFO non-empty mask
 8000d68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	6193      	str	r3, [r2, #24]

	// Enable interrupts matching to the Device mode ONLY
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |	// USB suspend; USB reset
			USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |					// Enumeration done; IN endpoints interrupt
			USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |				// OUT endpoints interrupt; Incomplete isochronous IN transfer
			USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;				// Incomplete isochronous OUT transfer; Resume/remote wakeup detected
 8000d78:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000d7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d80:	699a      	ldr	r2, [r3, #24]
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <_ZN3USB7InitUSBEv+0x2e0>)
 8000d84:	4313      	orrs	r3, r2
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |	// USB suspend; USB reset
 8000d86:	618b      	str	r3, [r1, #24]

	//USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_SOFM;								// Start of frame
	USB_OTG_FS->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);	// Session request/new session detected; OTG interrupt
 8000d88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]

	// ********************* USB_DevDisconnect() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
	// As long as this bit is set, the host does not see that the device is connected, and the device does not receive signals on the USB.
	USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;				// Soft disconnect (not needed: already set by RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN)
 8000d9c:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	6053      	str	r3, [r2, #4]
	//HAL_Delay(3U);

	// ********************* HAL_PCDEx_SetRxFiFo() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c
	USB_OTG_FS->GRXFSIZ = 128;		 					// RxFIFO depth
 8000da8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24

	// ********************* HAL_PCDEx_SetTxFiFo() in /Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c
	// OTG_FS non-periodic transmit FIFO size register (Device mode) (FS_GNPTXFSIZ_Device in SFR)
	USB_OTG_FS->DIEPTXF0_HNPTXFSIZ = ((uint32_t)64 << USB_OTG_TX0FD_Pos) |		// Endpoint 0 TxFIFO depth
 8000db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000db4:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <_ZN3USB7InitUSBEv+0x2e4>)
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
			((uint32_t)128 << USB_OTG_TX0FSA_Pos);								// Endpoint 0 transmit RAM start  address

    // Multiply Tx_Size by 2 to get higher performance
    USB_OTG_FS->DIEPTXF[0] = ((uint32_t)128 << USB_OTG_DIEPTXF_INEPTXFD_Pos) |	// IN endpoint TxFIFO depth
 8000db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dbc:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <_ZN3USB7InitUSBEv+0x2e8>)
 8000dbe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		int8_t (* OutEvent)      (uint8_t event_idx, uint8_t state);
	} USBD_CUSTOM_HID_ItfTypeDef;
	*/

    // *********************  USB_DevConnect() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
    USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <_ZN3USB7InitUSBEv+0x2dc>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f023 0302 	bic.w	r3, r3, #2
 8000dcc:	6053      	str	r3, [r2, #4]

    // *********************  USB_EnableGlobalInt() in Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c
    USB_OTG_FS->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8000dce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6093      	str	r3, [r2, #8]
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000
 8000df0:	50003800 	.word	0x50003800
 8000df4:	50000800 	.word	0x50000800
 8000df8:	803c3800 	.word	0x803c3800
 8000dfc:	00400080 	.word	0x00400080
 8000e00:	008000c0 	.word	0x008000c0

08000e04 <_ZN3USB20USB_ActivateEndpointEmbh>:


void USB::USB_ActivateEndpoint(uint32_t epnum, bool is_in, uint8_t eptype)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	461a      	mov	r2, r3
 8000e12:	460b      	mov	r3, r1
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	4613      	mov	r3, r2
 8000e18:	71bb      	strb	r3, [r7, #6]
	uint8_t maxpktsize = (epnum == 0 ? ep0_maxPacket : ep_maxPacket);
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <_ZN3USB20USB_ActivateEndpointEmbh+0x22>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	7a1b      	ldrb	r3, [r3, #8]
 8000e24:	e001      	b.n	8000e2a <_ZN3USB20USB_ActivateEndpointEmbh+0x26>
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	7a5b      	ldrb	r3, [r3, #9]
 8000e2a:	75fb      	strb	r3, [r7, #23]

	if (is_in) {
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d034      	beq.n	8000e9c <_ZN3USB20USB_ActivateEndpointEmbh+0x98>
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (epnum & EP_ADDR_MSK));
 8000e32:	4936      	ldr	r1, [pc, #216]	; (8000f0c <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000e34:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000e36:	69da      	ldr	r2, [r3, #28]
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	2001      	movs	r0, #1
 8000e40:	fa00 f303 	lsl.w	r3, r0, r3
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61cb      	str	r3, [r1, #28]

		if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e50:	3348      	adds	r3, #72	; 0x48
 8000e52:	015b      	lsls	r3, r3, #5
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	bf0c      	ite	eq
 8000e5e:	2301      	moveq	r3, #1
 8000e60:	2300      	movne	r3, #0
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d04a      	beq.n	8000efe <_ZN3USB20USB_ActivateEndpointEmbh+0xfa>
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
					((uint32_t)eptype << 18) | (epnum << 22) |
					USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
					USB_OTG_DIEPCTL_USBAEP;
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e6e:	3348      	adds	r3, #72	; 0x48
 8000e70:	015b      	lsls	r3, r3, #5
 8000e72:	4618      	mov	r0, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000e7a:	3348      	adds	r3, #72	; 0x48
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	681a      	ldr	r2, [r3, #0]
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
 8000e80:	7df9      	ldrb	r1, [r7, #23]
					((uint32_t)eptype << 18) | (epnum << 22) |
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	049b      	lsls	r3, r3, #18
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
 8000e86:	4319      	orrs	r1, r3
					((uint32_t)eptype << 18) | (epnum << 22) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	059b      	lsls	r3, r3, #22
 8000e8c:	430b      	orrs	r3, r1
					USB_OTG_DIEPCTL_USBAEP;
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			USBx_INEP(epnum)->DIEPCTL |= (maxpktsize & USB_OTG_DIEPCTL_MPSIZ) |
 8000e98:	6003      	str	r3, [r0, #0]
					USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
					USB_OTG_DOEPCTL_USBAEP;
		}
	}

}
 8000e9a:	e030      	b.n	8000efe <_ZN3USB20USB_ActivateEndpointEmbh+0xfa>
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (epnum & EP_ADDR_MSK)) << 16);
 8000e9c:	491b      	ldr	r1, [pc, #108]	; (8000f0c <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <_ZN3USB20USB_ActivateEndpointEmbh+0x108>)
 8000ea0:	69da      	ldr	r2, [r3, #28]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	f003 030f 	and.w	r3, r3, #15
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f303 	lsl.w	r3, r0, r3
 8000eae:	041b      	lsls	r3, r3, #16
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61cb      	str	r3, [r1, #28]
		if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000eba:	3358      	adds	r3, #88	; 0x58
 8000ebc:	015b      	lsls	r3, r3, #5
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bf0c      	ite	eq
 8000ec8:	2301      	moveq	r3, #1
 8000eca:	2300      	movne	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d015      	beq.n	8000efe <_ZN3USB20USB_ActivateEndpointEmbh+0xfa>
					USB_OTG_DOEPCTL_USBAEP;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000ed8:	3358      	adds	r3, #88	; 0x58
 8000eda:	015b      	lsls	r3, r3, #5
 8000edc:	4618      	mov	r0, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8000ee4:	3358      	adds	r3, #88	; 0x58
 8000ee6:	015b      	lsls	r3, r3, #5
 8000ee8:	681a      	ldr	r2, [r3, #0]
			USBx_OUTEP(epnum)->DOEPCTL |= (maxpktsize & USB_OTG_DOEPCTL_MPSIZ) |
 8000eea:	7df9      	ldrb	r1, [r7, #23]
					((uint32_t)eptype << 18) |
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	049b      	lsls	r3, r3, #18
			USBx_OUTEP(epnum)->DOEPCTL |= (maxpktsize & USB_OTG_DOEPCTL_MPSIZ) |
 8000ef0:	430b      	orrs	r3, r1
					USB_OTG_DOEPCTL_USBAEP;
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			USBx_OUTEP(epnum)->DOEPCTL |= (maxpktsize & USB_OTG_DOEPCTL_MPSIZ) |
 8000efc:	6003      	str	r3, [r0, #0]
}
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	50000800 	.word	0x50000800

08000f10 <_ZN3USB14USB_ReadPacketEPmt>:

// USB_ReadPacket : read a packet from the RX FIFO
void USB::USB_ReadPacket(uint32_t *dest, uint16_t len)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	80fb      	strh	r3, [r7, #6]
	uint32_t *pDest = (uint32_t *)dest;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	61fb      	str	r3, [r7, #28]
	uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	3303      	adds	r3, #3
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	617b      	str	r3, [r7, #20]

	for (uint32_t i = 0; i < count32b; i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d20a      	bcs.n	8000f4c <_ZN3USB14USB_ReadPacketEPmt+0x3c>
	{
		*pDest = USBx_DFIFO(0U);
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_ZN3USB14USB_ReadPacketEPmt+0x48>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	601a      	str	r2, [r3, #0]
		pDest++;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < count32b; i++)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	3301      	adds	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	e7f0      	b.n	8000f2e <_ZN3USB14USB_ReadPacketEPmt+0x1e>
	}

	//return ((void *)pDest);
}
 8000f4c:	bf00      	nop
 8000f4e:	3724      	adds	r7, #36	; 0x24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	50001000 	.word	0x50001000

08000f5c <_ZN3USB15USB_WritePacketEPhmt>:

void USB::USB_WritePacket(uint8_t *src, uint32_t ch_ep_num, uint16_t len)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	807b      	strh	r3, [r7, #2]
	uint32_t *pSrc = (uint32_t *)src;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	61fb      	str	r3, [r7, #28]
	uint32_t count32b, i;

	count32b = ((uint32_t)len + 3U) / 4U;
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	3303      	adds	r3, #3
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	617b      	str	r3, [r7, #20]
	for (i = 0; i < count32b; i++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d20f      	bcs.n	8000fa2 <_ZN3USB15USB_WritePacketEPhmt+0x46>
		USBx_DFIFO(ch_ep_num) = *pSrc;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8000f88:	3301      	adds	r3, #1
 8000f8a:	031b      	lsls	r3, r3, #12
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6013      	str	r3, [r2, #0]
		pSrc++;
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	3304      	adds	r3, #4
 8000f98:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < count32b; i++) {
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	e7eb      	b.n	8000f7a <_ZN3USB15USB_WritePacketEPhmt+0x1e>
	}


}
 8000fa2:	bf00      	nop
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_ZSt3minImERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d201      	bcs.n	8000fc8 <_ZSt3minImERKT_S2_S2_+0x1a>
	return __b;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	e000      	b.n	8000fca <_ZSt3minImERKT_S2_S2_+0x1c>
      return __a;
 8000fc8:	687b      	ldr	r3, [r7, #4]
    }
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <_ZN3USB18USBD_GetDescriptorE10usbRequest>:


// Descriptors in usbd_desc.c
void USB::USBD_GetDescriptor(usbRequest req)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	e883 0006 	stmia.w	r3, {r1, r2}
	uint16_t len;
	uint8_t *pbuf;
	uint32_t deviceserial0, deviceserial1, deviceserial2;

	if (usbEventNo >= 115) {
 8000fe6:	4b9b      	ldr	r3, [pc, #620]	; (8001254 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x27c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b72      	cmp	r3, #114	; 0x72
 8000fec:	dd01      	ble.n	8000ff2 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1a>
		int susp = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	switch (req.Value >> 8)
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	121b      	asrs	r3, r3, #8
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	2b0e      	cmp	r3, #14
 8000ffa:	f200 8126 	bhi.w	800124a <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x272>
 8000ffe:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x2c>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	08001041 	.word	0x08001041
 8001008:	08001057 	.word	0x08001057
 800100c:	08001083 	.word	0x08001083
 8001010:	0800124b 	.word	0x0800124b
 8001014:	0800124b 	.word	0x0800124b
 8001018:	080011ad 	.word	0x080011ad
 800101c:	0800124b 	.word	0x0800124b
 8001020:	0800124b 	.word	0x0800124b
 8001024:	0800124b 	.word	0x0800124b
 8001028:	0800124b 	.word	0x0800124b
 800102c:	0800124b 	.word	0x0800124b
 8001030:	0800124b 	.word	0x0800124b
 8001034:	0800124b 	.word	0x0800124b
 8001038:	0800124b 	.word	0x0800124b
 800103c:	0800106d 	.word	0x0800106d
	{
	case USB_DESC_TYPE_DEVICE:
		//pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
		outBuff = USBD_FS_DeviceDesc;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		outBuffSize = sizeof(USBD_FS_DeviceDesc);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2212      	movs	r2, #18
 8001050:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		break;
 8001054:	e0cc      	b.n	80011f0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x218>

	case USB_DESC_TYPE_CONFIGURATION:

		outBuff = USBD_CUSTOM_HID_CfgFSDesc;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		outBuffSize = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2229      	movs	r2, #41	; 0x29
 8001066:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		//pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
		//pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
		break;
 800106a:	e0c1      	b.n	80011f0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x218>

	case USB_DESC_TYPE_BOS:

		outBuff = USBD_FS_BOSDesc;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f103 02e1 	add.w	r2, r3, #225	; 0xe1
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		outBuffSize = sizeof(USBD_FS_BOSDesc);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	220c      	movs	r2, #12
 800107c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

		//pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
		break;
 8001080:	e0b6      	b.n	80011f0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x218>

	case USB_DESC_TYPE_STRING:
		switch ((uint8_t)(req.Value)) {
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b05      	cmp	r3, #5
 8001088:	d86c      	bhi.n	8001164 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x18c>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0xb8>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010a9 	.word	0x080010a9
 8001094:	080010bf 	.word	0x080010bf
 8001098:	080010e5 	.word	0x080010e5
 800109c:	0800110b 	.word	0x0800110b
 80010a0:	080011a9 	.word	0x080011a9
 80010a4:	080011a9 	.word	0x080011a9
		case USBD_IDX_LANGID_STR:
			outBuff = USBD_LangIDDesc;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f203 1207 	addw	r2, r3, #263	; 0x107
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			outBuffSize = sizeof(USBD_LangIDDesc);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2204      	movs	r2, #4
 80010b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			//pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
			break;
 80010bc:	e075      	b.n	80011aa <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1d2>
		case USBD_IDX_MFC_STR:
			outBuffSize = USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f203 130b 	addw	r3, r3, #267	; 0x10b
 80010c4:	461a      	mov	r2, r3
 80010c6:	4964      	ldr	r1, [pc, #400]	; (8001258 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x280>)
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 f8cf 	bl	800126c <_ZN3USB14USBD_GetStringEPhS0_>
 80010ce:	4602      	mov	r2, r0
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			outBuff = USBD_StrDesc;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f203 120b 	addw	r2, r3, #267	; 0x10b
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			//pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
			break;
 80010e2:	e062      	b.n	80011aa <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1d2>
		case USBD_IDX_PRODUCT_STR:
			outBuffSize = USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f203 130b 	addw	r3, r3, #267	; 0x10b
 80010ea:	461a      	mov	r2, r3
 80010ec:	495b      	ldr	r1, [pc, #364]	; (800125c <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x284>)
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f8bc 	bl	800126c <_ZN3USB14USBD_GetStringEPhS0_>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			outBuff = USBD_StrDesc;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f203 120b 	addw	r2, r3, #267	; 0x10b
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			//pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
			break;
 8001108:	e04f      	b.n	80011aa <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1d2>
		case USBD_IDX_SERIAL_STR:
			// STM32 unique device ID (96 bit number starting at UID_BASE)
			deviceserial0 = *(uint32_t *) UID_BASE;
 800110a:	4b55      	ldr	r3, [pc, #340]	; (8001260 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x288>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	623b      	str	r3, [r7, #32]
			deviceserial1 = *(uint32_t *) UID_BASE + 4;
 8001110:	4b53      	ldr	r3, [pc, #332]	; (8001260 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x288>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3304      	adds	r3, #4
 8001116:	61fb      	str	r3, [r7, #28]
			deviceserial2 = *(uint32_t *) UID_BASE + 8;
 8001118:	4b51      	ldr	r3, [pc, #324]	; (8001260 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x288>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3308      	adds	r3, #8
 800111e:	61bb      	str	r3, [r7, #24]
			deviceserial0 += deviceserial2;
 8001120:	6a3a      	ldr	r2, [r7, #32]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4413      	add	r3, r2
 8001126:	623b      	str	r3, [r7, #32]

			if (deviceserial0 != 0)
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00f      	beq.n	800114e <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x176>
			{
				IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f103 02ef 	add.w	r2, r3, #239	; 0xef
 8001134:	2308      	movs	r3, #8
 8001136:	6a39      	ldr	r1, [r7, #32]
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 f8c7 	bl	80012cc <_ZN3USB12IntToUnicodeEmPhh>
				IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8001144:	2304      	movs	r3, #4
 8001146:	69f9      	ldr	r1, [r7, #28]
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f000 f8bf 	bl	80012cc <_ZN3USB12IntToUnicodeEmPhh>
			}
			outBuff = USBD_StringSerial;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f103 02ed 	add.w	r2, r3, #237	; 0xed
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			outBuffSize = sizeof(USBD_StringSerial);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	221a      	movs	r2, #26
 800115e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			//pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
			break;
 8001162:	e022      	b.n	80011aa <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x1d2>
		default:
#if (USBD_SUPPORT_USER_STRING == 1U)
			//pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
			break;
#else
			USBx_INEP(0)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8001164:	4a3f      	ldr	r2, [pc, #252]	; (8001264 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x28c>)
 8001166:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x28c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800116e:	6013      	str	r3, [r2, #0]

			USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001170:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001176:	4a3c      	ldr	r2, [pc, #240]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001178:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001180:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8001182:	4a39      	ldr	r2, [pc, #228]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001184:	4b38      	ldr	r3, [pc, #224]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	f043 0318 	orr.w	r3, r3, #24
 800118c:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800118e:	4a36      	ldr	r2, [pc, #216]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001198:	6113      	str	r3, [r2, #16]

			USBx_OUTEP(0)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800119a:	4a33      	ldr	r2, [pc, #204]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a4:	6013      	str	r3, [r2, #0]
			return;
 80011a6:	e051      	b.n	800124c <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x274>
			break;
 80011a8:	bf00      	nop
#endif
		}
		break;
 80011aa:	e021      	b.n	80011f0 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x218>
		case USB_DESC_TYPE_DEVICE_QUALIFIER:
			//USBD_CtlError(pdev , req);
			USBx_INEP(0)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80011ac:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x28c>)
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x28c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b6:	6013      	str	r3, [r2, #0]

			USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80011be:	4a2a      	ldr	r2, [pc, #168]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011c8:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80011ca:	4a27      	ldr	r2, [pc, #156]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f043 0318 	orr.w	r3, r3, #24
 80011d4:	6113      	str	r3, [r2, #16]
			USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80011d6:	4a24      	ldr	r2, [pc, #144]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80011e0:	6113      	str	r3, [r2, #16]

			USBx_OUTEP(0)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80011e2:	4a21      	ldr	r2, [pc, #132]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x290>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ec:	6013      	str	r3, [r2, #0]

			return;
 80011ee:	e02d      	b.n	800124c <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x274>
		default:
			//USBD_CtlError(pdev , req);
			return;
	}

	if ((outBuffSize != 0U) && (req.Length != 0U)) {
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d01d      	beq.n	8001236 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x25e>
 80011fa:	897b      	ldrh	r3, [r7, #10]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d01a      	beq.n	8001236 <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x25e>
		ep0_state = USBD_EP0_DATA_IN;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2202      	movs	r2, #2
 8001204:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		outBuffSize = std::min(outBuffSize, (uint32_t)req.Length);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3398      	adds	r3, #152	; 0x98
 800120c:	897a      	ldrh	r2, [r7, #10]
 800120e:	617a      	str	r2, [r7, #20]
 8001210:	f107 0214 	add.w	r2, r7, #20
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fec9 	bl	8000fae <_ZSt3minImERKT_S2_S2_>
 800121c:	4603      	mov	r3, r0
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		USB_EP0StartXfer(DIR_IN, 0, outBuffSize);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800122c:	2200      	movs	r2, #0
 800122e:	2101      	movs	r1, #1
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f907 	bl	8001444 <_ZN3USB16USB_EP0StartXferEbhm>
	}

	if (req.Length == 0U) {
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x274>
		USB_EP0StartXfer(DIR_IN, 0, 0);
 800123c:	2300      	movs	r3, #0
 800123e:	2200      	movs	r2, #0
 8001240:	2101      	movs	r1, #1
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f8fe 	bl	8001444 <_ZN3USB16USB_EP0StartXferEbhm>
 8001248:	e000      	b.n	800124c <_ZN3USB18USBD_GetDescriptorE10usbRequest+0x274>
			return;
 800124a:	bf00      	nop
	}
}
 800124c:	3728      	adds	r7, #40	; 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200006a8 	.word	0x200006a8
 8001258:	08001d44 	.word	0x08001d44
 800125c:	08001d50 	.word	0x08001d50
 8001260:	1fff7a10 	.word	0x1fff7a10
 8001264:	50000900 	.word	0x50000900
 8001268:	50000b00 	.word	0x50000b00

0800126c <_ZN3USB14USBD_GetStringEPhS0_>:

uint32_t USB::USBD_GetString(uint8_t *desc, uint8_t *unicode)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
	uint32_t idx = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	617b      	str	r3, [r7, #20]

	if (desc != NULL)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01d      	beq.n	80012be <_ZN3USB14USBD_GetStringEPhS0_+0x52>
	{
		while (*desc != '\0') {
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d011      	beq.n	80012ae <_ZN3USB14USBD_GetStringEPhS0_+0x42>
			unicode[idx++] = *desc++;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	617a      	str	r2, [r7, #20]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	441a      	add	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1c59      	adds	r1, r3, #1
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	7013      	strb	r3, [r2, #0]
			unicode[idx++] =  0U;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	617a      	str	r2, [r7, #20]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
		while (*desc != '\0') {
 80012ac:	e7e9      	b.n	8001282 <_ZN3USB14USBD_GetStringEPhS0_+0x16>
		}
		unicode[0] = idx;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	701a      	strb	r2, [r3, #0]
		unicode[1] = USB_DESC_TYPE_STRING;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3301      	adds	r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	701a      	strb	r2, [r3, #0]
	}
	return idx;
 80012be:	697b      	ldr	r3, [r7, #20]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_ZN3USB12IntToUnicodeEmPhh>:

void USB::IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	70fb      	strb	r3, [r7, #3]

	for (uint8_t idx = 0; idx < len; idx++) {
 80012da:	2300      	movs	r3, #0
 80012dc:	75fb      	strb	r3, [r7, #23]
 80012de:	7dfa      	ldrb	r2, [r7, #23]
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	da28      	bge.n	8001338 <_ZN3USB12IntToUnicodeEmPhh+0x6c>
		if (((value >> 28)) < 0xA) {
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	0f1b      	lsrs	r3, r3, #28
 80012ea:	2b09      	cmp	r3, #9
 80012ec:	d80b      	bhi.n	8001306 <_ZN3USB12IntToUnicodeEmPhh+0x3a>
			pbuf[2 * idx] = (value >> 28) + '0';
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	461a      	mov	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	0f12      	lsrs	r2, r2, #28
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	3230      	adds	r2, #48	; 0x30
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	e00a      	b.n	800131c <_ZN3USB12IntToUnicodeEmPhh+0x50>
		} else {
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	0f12      	lsrs	r2, r2, #28
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	3237      	adds	r2, #55	; 0x37
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]
		}

		value = value << 4;
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	60bb      	str	r3, [r7, #8]

		pbuf[2 * idx + 1] = 0;
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	3301      	adds	r3, #1
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
	for (uint8_t idx = 0; idx < len; idx++) {
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	3301      	adds	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
 8001336:	e7d2      	b.n	80012de <_ZN3USB12IntToUnicodeEmPhh+0x12>
	}
}
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_ZN3USB14USBD_StdDevReqE10usbRequest>:

void USB::USBD_StdDevReq(usbRequest req)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	e883 0006 	stmia.w	r3, {r1, r2}

	uint8_t dev_addr;
	switch (req.mRequest & USB_REQ_TYPE_MASK)
 8001352:	793b      	ldrb	r3, [r7, #4]
 8001354:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001358:	2b20      	cmp	r3, #32
 800135a:	d06b      	beq.n	8001434 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf0>
 800135c:	2b40      	cmp	r3, #64	; 0x40
 800135e:	d069      	beq.n	8001434 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf0>
 8001360:	2b00      	cmp	r3, #0
 8001362:	d000      	beq.n	8001366 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x22>
		}
		break;

		default:
			//USBD_CtlError(pdev, req);
			break;
 8001364:	e067      	b.n	8001436 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf2>
		switch (req.Request)
 8001366:	797b      	ldrb	r3, [r7, #5]
 8001368:	2b09      	cmp	r3, #9
 800136a:	d861      	bhi.n	8001430 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xec>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <_ZN3USB14USBD_StdDevReqE10usbRequest+0x30>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001431 	.word	0x08001431
 8001378:	08001431 	.word	0x08001431
 800137c:	08001431 	.word	0x08001431
 8001380:	08001431 	.word	0x08001431
 8001384:	08001431 	.word	0x08001431
 8001388:	080013ab 	.word	0x080013ab
 800138c:	0800139d 	.word	0x0800139d
 8001390:	08001431 	.word	0x08001431
 8001394:	08001431 	.word	0x08001431
 8001398:	080013e9 	.word	0x080013e9
			USBD_GetDescriptor(req);
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff fe18 	bl	8000fd8 <_ZN3USB18USBD_GetDescriptorE10usbRequest>
			break;
 80013a8:	e043      	b.n	8001432 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xee>
			dev_addr = (uint8_t)(req.Value) & 0x7FU;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013b2:	75fb      	strb	r3, [r7, #23]
			USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80013b4:	4a22      	ldr	r2, [pc, #136]	; (8001440 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xfc>)
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xfc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013be:	6013      	str	r3, [r2, #0]
			USBx_DEVICE->DCFG |= ((uint32_t)dev_addr << 4) & USB_OTG_DCFG_DAD;
 80013c0:	491f      	ldr	r1, [pc, #124]	; (8001440 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xfc>)
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xfc>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
			ep0_state = USBD_EP0_STATUS_IN;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2204      	movs	r2, #4
 80013d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			USB_EP0StartXfer(DIR_IN, 0, 0);
 80013da:	2300      	movs	r3, #0
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 f82f 	bl	8001444 <_ZN3USB16USB_EP0StartXferEbhm>
			break;
 80013e6:	e024      	b.n	8001432 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xee>
			dev_state = USBD_STATE_CONFIGURED;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2203      	movs	r2, #3
 80013ec:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			USB_ActivateEndpoint(req.Value, true, USBD_EP_TYPE_INTR);		// Activate in endpoint
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	4619      	mov	r1, r3
 80013f4:	2303      	movs	r3, #3
 80013f6:	2201      	movs	r2, #1
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff fd03 	bl	8000e04 <_ZN3USB20USB_ActivateEndpointEmbh>
			USB_ActivateEndpoint(req.Value, false, USBD_EP_TYPE_INTR);		// Activate out endpoint
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4619      	mov	r1, r3
 8001402:	2303      	movs	r3, #3
 8001404:	2200      	movs	r2, #0
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7ff fcfc 	bl	8000e04 <_ZN3USB20USB_ActivateEndpointEmbh>
			USB_EP0StartXfer(DIR_OUT, req.Value, 2);		// FIXME maxpacket is 2 for EP 1: CUSTOM_HID_EPIN_SIZE
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	2302      	movs	r3, #2
 8001412:	2100      	movs	r1, #0
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 f815 	bl	8001444 <_ZN3USB16USB_EP0StartXferEbhm>
			ep0_state = USBD_EP0_STATUS_IN;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2204      	movs	r2, #4
 800141e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			USB_EP0StartXfer(DIR_IN, 0, 0);
 8001422:	2300      	movs	r3, #0
 8001424:	2200      	movs	r2, #0
 8001426:	2101      	movs	r1, #1
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 f80b 	bl	8001444 <_ZN3USB16USB_EP0StartXferEbhm>
			break;
 800142e:	e000      	b.n	8001432 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xee>
			break;
 8001430:	bf00      	nop
		break;
 8001432:	e000      	b.n	8001436 <_ZN3USB14USBD_StdDevReqE10usbRequest+0xf2>
		break;
 8001434:	bf00      	nop
	}

}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	50000800 	.word	0x50000800

08001444 <_ZN3USB16USB_EP0StartXferEbhm>:

void USB::USB_EP0StartXfer(bool is_in, uint8_t epnum, uint32_t xfer_len)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	72fb      	strb	r3, [r7, #11]
 8001452:	4613      	mov	r3, r2
 8001454:	72bb      	strb	r3, [r7, #10]

	// IN endpoint
	if (is_in)
 8001456:	7afb      	ldrb	r3, [r7, #11]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a6 	beq.w	80015aa <_ZN3USB16USB_EP0StartXferEbhm+0x166>
	{
		// Zero Length Packet?
		if (xfer_len == 0U) {
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d12f      	bne.n	80014c4 <_ZN3USB16USB_EP0StartXferEbhm+0x80>
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001464:	7abb      	ldrb	r3, [r7, #10]
 8001466:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800146a:	3348      	adds	r3, #72	; 0x48
 800146c:	015b      	lsls	r3, r3, #5
 800146e:	461a      	mov	r2, r3
 8001470:	7abb      	ldrb	r3, [r7, #10]
 8001472:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001476:	3348      	adds	r3, #72	; 0x48
 8001478:	015b      	lsls	r3, r3, #5
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001480:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8001484:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001486:	7abb      	ldrb	r3, [r7, #10]
 8001488:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800148c:	3348      	adds	r3, #72	; 0x48
 800148e:	015b      	lsls	r3, r3, #5
 8001490:	461a      	mov	r2, r3
 8001492:	7abb      	ldrb	r3, [r7, #10]
 8001494:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001498:	3348      	adds	r3, #72	; 0x48
 800149a:	015b      	lsls	r3, r3, #5
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014a2:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80014a4:	7abb      	ldrb	r3, [r7, #10]
 80014a6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014aa:	3348      	adds	r3, #72	; 0x48
 80014ac:	015b      	lsls	r3, r3, #5
 80014ae:	461a      	mov	r2, r3
 80014b0:	7abb      	ldrb	r3, [r7, #10]
 80014b2:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014b6:	3348      	adds	r3, #72	; 0x48
 80014b8:	015b      	lsls	r3, r3, #5
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	0cdb      	lsrs	r3, r3, #19
 80014be:	04db      	lsls	r3, r3, #19
 80014c0:	6113      	str	r3, [r2, #16]
 80014c2:	e054      	b.n	800156e <_ZN3USB16USB_EP0StartXferEbhm+0x12a>
		} else {
			int maxPacket = (epnum == 0 ? ep0_maxPacket : ep_maxPacket);
 80014c4:	7abb      	ldrb	r3, [r7, #10]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <_ZN3USB16USB_EP0StartXferEbhm+0x8c>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	7a1b      	ldrb	r3, [r3, #8]
 80014ce:	e001      	b.n	80014d4 <_ZN3USB16USB_EP0StartXferEbhm+0x90>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	7a5b      	ldrb	r3, [r3, #9]
 80014d4:	617b      	str	r3, [r7, #20]
			// Program the transfer size and packet count as follows: xfersize = N * maxpacket + short_packet pktcnt = N + (short_packet exist ? 1 : 0)
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80014d6:	7abb      	ldrb	r3, [r7, #10]
 80014d8:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014dc:	3348      	adds	r3, #72	; 0x48
 80014de:	015b      	lsls	r3, r3, #5
 80014e0:	461a      	mov	r2, r3
 80014e2:	7abb      	ldrb	r3, [r7, #10]
 80014e4:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014e8:	3348      	adds	r3, #72	; 0x48
 80014ea:	015b      	lsls	r3, r3, #5
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	0cdb      	lsrs	r3, r3, #19
 80014f0:	04db      	lsls	r3, r3, #19
 80014f2:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80014f4:	7abb      	ldrb	r3, [r7, #10]
 80014f6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80014fa:	3348      	adds	r3, #72	; 0x48
 80014fc:	015b      	lsls	r3, r3, #5
 80014fe:	461a      	mov	r2, r3
 8001500:	7abb      	ldrb	r3, [r7, #10]
 8001502:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001506:	3348      	adds	r3, #72	; 0x48
 8001508:	015b      	lsls	r3, r3, #5
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001510:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8001514:	6113      	str	r3, [r2, #16]

			if (xfer_len > maxPacket) {		// currently set to 0x40
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	429a      	cmp	r2, r3
 800151c:	d907      	bls.n	800152e <_ZN3USB16USB_EP0StartXferEbhm+0xea>
				xfer_rem = xfer_len - maxPacket;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	1ad2      	subs	r2, r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				xfer_len = maxPacket;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	607b      	str	r3, [r7, #4]
			}

			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800152e:	7abb      	ldrb	r3, [r7, #10]
 8001530:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001534:	3348      	adds	r3, #72	; 0x48
 8001536:	015b      	lsls	r3, r3, #5
 8001538:	461a      	mov	r2, r3
 800153a:	7abb      	ldrb	r3, [r7, #10]
 800153c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001540:	3348      	adds	r3, #72	; 0x48
 8001542:	015b      	lsls	r3, r3, #5
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800154a:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & xfer_len);
 800154c:	7abb      	ldrb	r3, [r7, #10]
 800154e:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001552:	3348      	adds	r3, #72	; 0x48
 8001554:	015b      	lsls	r3, r3, #5
 8001556:	4619      	mov	r1, r3
 8001558:	7abb      	ldrb	r3, [r7, #10]
 800155a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800155e:	3348      	adds	r3, #72	; 0x48
 8001560:	015b      	lsls	r3, r3, #5
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800156a:	4313      	orrs	r3, r2
 800156c:	610b      	str	r3, [r1, #16]
		}

		/* EP enable, IN data in FIFO */
		USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800156e:	7abb      	ldrb	r3, [r7, #10]
 8001570:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001574:	3348      	adds	r3, #72	; 0x48
 8001576:	015b      	lsls	r3, r3, #5
 8001578:	461a      	mov	r2, r3
 800157a:	7abb      	ldrb	r3, [r7, #10]
 800157c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001580:	3348      	adds	r3, #72	; 0x48
 8001582:	015b      	lsls	r3, r3, #5
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800158a:	6013      	str	r3, [r2, #0]

		/* Enable the Tx FIFO Empty Interrupt for this EP */
		if (xfer_len > 0U) {
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d05a      	beq.n	8001648 <_ZN3USB16USB_EP0StartXferEbhm+0x204>
			USBx_DEVICE->DIEPEMPMSK |= 1UL << (epnum & EP_ADDR_MSK);
 8001592:	4930      	ldr	r1, [pc, #192]	; (8001654 <_ZN3USB16USB_EP0StartXferEbhm+0x210>)
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <_ZN3USB16USB_EP0StartXferEbhm+0x210>)
 8001596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001598:	7abb      	ldrb	r3, [r7, #10]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	2001      	movs	r0, #1
 80015a0:	fa00 f303 	lsl.w	r3, r0, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	634b      	str	r3, [r1, #52]	; 0x34

		/* EP enable */
		USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
	}

}
 80015a8:	e04e      	b.n	8001648 <_ZN3USB16USB_EP0StartXferEbhm+0x204>
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80015aa:	7abb      	ldrb	r3, [r7, #10]
 80015ac:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015b0:	3358      	adds	r3, #88	; 0x58
 80015b2:	015b      	lsls	r3, r3, #5
 80015b4:	461a      	mov	r2, r3
 80015b6:	7abb      	ldrb	r3, [r7, #10]
 80015b8:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015bc:	3358      	adds	r3, #88	; 0x58
 80015be:	015b      	lsls	r3, r3, #5
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	0cdb      	lsrs	r3, r3, #19
 80015c4:	04db      	lsls	r3, r3, #19
 80015c6:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80015c8:	7abb      	ldrb	r3, [r7, #10]
 80015ca:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015ce:	3358      	adds	r3, #88	; 0x58
 80015d0:	015b      	lsls	r3, r3, #5
 80015d2:	461a      	mov	r2, r3
 80015d4:	7abb      	ldrb	r3, [r7, #10]
 80015d6:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015da:	3358      	adds	r3, #88	; 0x58
 80015dc:	015b      	lsls	r3, r3, #5
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80015e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80015e8:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80015ea:	7abb      	ldrb	r3, [r7, #10]
 80015ec:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015f0:	3358      	adds	r3, #88	; 0x58
 80015f2:	015b      	lsls	r3, r3, #5
 80015f4:	461a      	mov	r2, r3
 80015f6:	7abb      	ldrb	r3, [r7, #10]
 80015f8:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80015fc:	3358      	adds	r3, #88	; 0x58
 80015fe:	015b      	lsls	r3, r3, #5
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001606:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & xfer_len);
 8001608:	7abb      	ldrb	r3, [r7, #10]
 800160a:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800160e:	3358      	adds	r3, #88	; 0x58
 8001610:	015b      	lsls	r3, r3, #5
 8001612:	4619      	mov	r1, r3
 8001614:	7abb      	ldrb	r3, [r7, #10]
 8001616:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800161a:	3358      	adds	r3, #88	; 0x58
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001626:	4313      	orrs	r3, r2
 8001628:	610b      	str	r3, [r1, #16]
		USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800162a:	7abb      	ldrb	r3, [r7, #10]
 800162c:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001630:	3358      	adds	r3, #88	; 0x58
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	461a      	mov	r2, r3
 8001636:	7abb      	ldrb	r3, [r7, #10]
 8001638:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800163c:	3358      	adds	r3, #88	; 0x58
 800163e:	015b      	lsls	r3, r3, #5
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	371c      	adds	r7, #28
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	50000800 	.word	0x50000800

08001658 <_ZN3USB14USB_EPSetStallEh>:


void USB::USB_EPSetStall(uint8_t epnum) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
	if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U)) {	//
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800166a:	3348      	adds	r3, #72	; 0x48
 800166c:	015b      	lsls	r3, r3, #5
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db04      	blt.n	800167e <_ZN3USB14USB_EPSetStallEh+0x26>
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <_ZN3USB14USB_EPSetStallEh+0x26>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <_ZN3USB14USB_EPSetStallEh+0x28>
 800167e:	2300      	movs	r3, #0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00e      	beq.n	80016a2 <_ZN3USB14USB_EPSetStallEh+0x4a>
		USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 800168a:	3348      	adds	r3, #72	; 0x48
 800168c:	015b      	lsls	r3, r3, #5
 800168e:	461a      	mov	r2, r3
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 8001696:	3348      	adds	r3, #72	; 0x48
 8001698:	015b      	lsls	r3, r3, #5
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80016a0:	6013      	str	r3, [r2, #0]
	}
	USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80016a8:	3348      	adds	r3, #72	; 0x48
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	461a      	mov	r2, r3
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	f103 7320 	add.w	r3, r3, #41943040	; 0x2800000
 80016b4:	3348      	adds	r3, #72	; 0x48
 80016b6:	015b      	lsls	r3, r3, #5
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016be:	6013      	str	r3, [r2, #0]

	// FIXME - cleared in USB_EP0StartXfer?
	//USB_EP0_OutStart
	USBx_OUTEP(0U)->DOEPTSIZ = 0U;			// USB_EP0_OutStart - set STUPCNT=3; PKTCNT=1; XFRSIZ=0x18
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80016c6:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016d0:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	f043 0318 	orr.w	r3, r3, #24
 80016dc:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80016de:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <_ZN3USB14USB_EPSetStallEh+0xa0>)
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80016e8:	6113      	str	r3, [r2, #16]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	50000b00 	.word	0x50000b00

080016fc <_ZN3USB18USB_ReadInterruptsEm>:


bool USB::USB_ReadInterrupts(uint32_t interrupt){
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]

	if (((USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK) & interrupt) == interrupt && usbEventNo < 200) {
 8001706:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	401a      	ands	r2, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	401a      	ands	r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d105      	bne.n	800172a <_ZN3USB18USB_ReadInterruptsEm+0x2e>
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2bc7      	cmp	r3, #199	; 0xc7
 8001724:	dc01      	bgt.n	800172a <_ZN3USB18USB_ReadInterruptsEm+0x2e>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <_ZN3USB18USB_ReadInterruptsEm+0x30>
 800172a:	2300      	movs	r3, #0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d012      	beq.n	8001756 <_ZN3USB18USB_ReadInterruptsEm+0x5a>
		usbEvents[usbEventNo] = USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <_ZN3USB18USB_ReadInterruptsEm+0x88>)
 8001746:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		usbEventNo++;
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <_ZN3USB18USB_ReadInterruptsEm+0x84>)
 8001754:	701a      	strb	r2, [r3, #0]
	}

	return ((USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK) & interrupt) == interrupt;
 8001756:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	401a      	ands	r2, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	401a      	ands	r2, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	bf0c      	ite	eq
 800176e:	2301      	moveq	r3, #1
 8001770:	2300      	movne	r3, #0
 8001772:	b2db      	uxtb	r3, r3
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	200006a8 	.word	0x200006a8
 8001784:	20000388 	.word	0x20000388

08001788 <_ZN3USB10SendReportEPht>:

void USB::SendReport(uint8_t *report, uint16_t len) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	4613      	mov	r3, r2
 8001794:	80fb      	strh	r3, [r7, #6]
	if (dev_state == USBD_STATE_CONFIGURED) {
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800179c:	2b03      	cmp	r3, #3
 800179e:	d116      	bne.n	80017ce <_ZN3USB10SendReportEPht+0x46>
		if (hid_state == CUSTOM_HID_IDLE) {
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d111      	bne.n	80017ce <_ZN3USB10SendReportEPht+0x46>
			hid_state = CUSTOM_HID_BUSY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			outBuff = report;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			outBuffSize = len;
 80017ba:	88fa      	ldrh	r2, [r7, #6]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			USB_EP0StartXfer(DIR_IN, 1, len);
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	2201      	movs	r2, #1
 80017c6:	2101      	movs	r1, #1
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f7ff fe3b 	bl	8001444 <_ZN3USB16USB_EP0StartXferEbhm>
		}
	}
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <_Z18SystemClock_Configv>:
#define PLL_M 4
#define PLL_N 144
#define PLL_P 2		//  Main PLL (PLL) division factor for main system clock can be 2 (PLL_P = 0), 4 (PLL_P = 1), 6 (PLL_P = 2), 8 (PLL_P = 3)
#define PLL_Q 6

void SystemClock_Config(void) {
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;			// Enable Power Control clock
 80017dc:	4a35      	ldr	r2, [pc, #212]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 80017de:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS_0;					// Enable VOS voltage scaling - allows maximum clock speed
 80017e8:	4a33      	ldr	r2, [pc, #204]	; (80018b8 <_Z18SystemClock_Configv+0xe0>)
 80017ea:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <_Z18SystemClock_Configv+0xe0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f2:	6013      	str	r3, [r2, #0]

	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));// CPACR register: set full access privileges for coprocessors
 80017f4:	4a31      	ldr	r2, [pc, #196]	; (80018bc <_Z18SystemClock_Configv+0xe4>)
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <_Z18SystemClock_Configv+0xe4>)
 80017f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

#ifdef USE_HSE
	RCC->CR |= RCC_CR_HSEON;					// HSE ON
 8001804:	4a2b      	ldr	r2, [pc, #172]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180e:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0);		// Wait till HSE is ready
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d000      	beq.n	8001828 <_Z18SystemClock_Configv+0x50>
 8001826:	e7f3      	b.n	8001810 <_Z18SystemClock_Configv+0x38>
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 800182a:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <_Z18SystemClock_Configv+0xe8>)
 800182c:	605a      	str	r2, [r3, #4]
	RCC->CR |= RCC_CR_HSION;					// HSI ON
	while((RCC->CR & RCC_CR_HSIRDY) == 0);		// Wait till HSI is ready
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);
#endif

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;			// HCLK = SYSCLK / 1
 800182e:	4a21      	ldr	r2, [pc, #132]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;			// PCLK2 = HCLK / 2
 8001836:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001840:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;			// PCLK1 = HCLK / 4
 8001842:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800184c:	6093      	str	r3, [r2, #8]
	RCC->CR |= RCC_CR_PLLON;					// Enable the main PLL
 800184e:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001858:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);		// Wait till the main PLL is ready
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf0c      	ite	eq
 8001866:	2301      	moveq	r3, #1
 8001868:	2300      	movne	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d000      	beq.n	8001872 <_Z18SystemClock_Configv+0x9a>
 8001870:	e7f3      	b.n	800185a <_Z18SystemClock_Configv+0x82>

	// Configure Flash prefetch, Instruction cache, Data cache and wait state
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <_Z18SystemClock_Configv+0xec>)
 8001874:	f240 7205 	movw	r2, #1797	; 0x705
 8001878:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 800187c:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f023 0303 	bic.w	r3, r3, #3
 8001884:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6093      	str	r3, [r2, #8]

	// Wait till the main PLL is used as system clock source
	while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_Z18SystemClock_Configv+0xdc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b08      	cmp	r3, #8
 800189c:	bf14      	ite	ne
 800189e:	2301      	movne	r3, #1
 80018a0:	2300      	moveq	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d000      	beq.n	80018aa <_Z18SystemClock_Configv+0xd2>
 80018a8:	e7f3      	b.n	8001892 <_Z18SystemClock_Configv+0xba>

}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000
 80018bc:	e000ed00 	.word	0xe000ed00
 80018c0:	06402404 	.word	0x06402404
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <_Z10InitBtnLEDv>:

void InitBtnLED()
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;			// reset and clock control - advanced high performance bus - GPIO port B
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <_Z10InitBtnLEDv+0x40>)
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <_Z10InitBtnLEDv+0x40>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;			// reset and clock control - advanced high performance bus - GPIO port C
 80018d8:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <_Z10InitBtnLEDv+0x40>)
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <_Z10InitBtnLEDv+0x40>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30

	// configure PC13 blue button
	//GPIOC->PUPDR |= GPIO_PUPDR_PUPDR13_0;			// Set pin to pull up:  01 Pull-up; 10 Pull-down; 11 Reserved

	// PB7 is LD2 Blue
	GPIOB->MODER |= GPIO_MODER_MODER7_0;			// Set to output
 80018e4:	4a09      	ldr	r2, [pc, #36]	; (800190c <_Z10InitBtnLEDv+0x44>)
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <_Z10InitBtnLEDv+0x44>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ee:	6013      	str	r3, [r2, #0]

	// PB14 is LD3 Red
	GPIOB->MODER |= GPIO_MODER_MODER14_0;			// Set to output
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <_Z10InitBtnLEDv+0x44>)
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <_Z10InitBtnLEDv+0x44>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40020400 	.word	0x40020400

08001910 <_ZN3USBC1Ev>:
	CUSTOM_HID_IDLE = 0U,
	CUSTOM_HID_BUSY,
}
CUSTOM_HID_StateTypeDef;

class USB {
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2240      	movs	r2, #64	; 0x40
 800191c:	721a      	strb	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	725a      	strb	r2, [r3, #9]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a23      	ldr	r2, [pc, #140]	; (80019b4 <_ZN3USBC1Ev+0xa4>)
 8001928:	f103 05a6 	add.w	r5, r3, #166	; 0xa6
 800192c:	4614      	mov	r4, r2
 800192e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001930:	6028      	str	r0, [r5, #0]
 8001932:	6069      	str	r1, [r5, #4]
 8001934:	60aa      	str	r2, [r5, #8]
 8001936:	60eb      	str	r3, [r5, #12]
 8001938:	8823      	ldrh	r3, [r4, #0]
 800193a:	822b      	strh	r3, [r5, #16]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <_ZN3USBC1Ev+0xa8>)
 8001940:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8001944:	4615      	mov	r5, r2
 8001946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800194c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001952:	c403      	stmia	r4!, {r0, r1}
 8001954:	7022      	strb	r2, [r4, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <_ZN3USBC1Ev+0xac>)
 800195a:	f103 04e1 	add.w	r4, r3, #225	; 0xe1
 800195e:	4613      	mov	r3, r2
 8001960:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001962:	6020      	str	r0, [r4, #0]
 8001964:	6061      	str	r1, [r4, #4]
 8001966:	60a2      	str	r2, [r4, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	33ed      	adds	r3, #237	; 0xed
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	615a      	str	r2, [r3, #20]
 800197a:	831a      	strh	r2, [r3, #24]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	221a      	movs	r2, #26
 8001980:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2203      	movs	r2, #3
 8001988:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <_ZN3USBC1Ev+0xb0>)
 8001990:	f203 1307 	addw	r3, r3, #263	; 0x107
 8001994:	6810      	ldr	r0, [r2, #0]
 8001996:	6018      	str	r0, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <_ZN3USBC1Ev+0xb4>)
 800199c:	f203 330b 	addw	r3, r3, #779	; 0x30b
 80019a0:	4611      	mov	r1, r2
 80019a2:	224a      	movs	r2, #74	; 0x4a
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 f9b5 	bl	8001d14 <memcpy>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bdb0      	pop	{r4, r5, r7, pc}
 80019b4:	08001d70 	.word	0x08001d70
 80019b8:	08001d84 	.word	0x08001d84
 80019bc:	08001db0 	.word	0x08001db0
 80019c0:	08001dbc 	.word	0x08001dbc
 80019c4:	08001dc0 	.word	0x08001dc0

080019c8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	usb.USBInterruptHandler();
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <OTG_FS_IRQHandler+0x10>)
 80019ce:	f7fe fc77 	bl	80002c0 <_ZN3USB19USBInterruptHandlerEv>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000030 	.word	0x20000030

080019dc <NMI_Handler>:

void NMI_Handler(void) {}
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HardFault_Handler>:

void HardFault_Handler(void) {
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
	while (1) {}
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:
}

void MemManage_Handler(void) {
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	while (1) {}
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler+0x4>

080019f6 <BusFault_Handler>:
}

void BusFault_Handler(void) {
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
	while (1) {}
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
	while (1) {}
 8001a00:	e7fe      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a02 <SVC_Handler>:
}

void SVC_Handler(void) {}
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

void PendSV_Handler(void) {}
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Handler>:

void SysTick_Handler(void) {}
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <main>:
}


extern uint32_t SystemCoreClock;
int main(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
	SystemInit();							// Activates floating point coprocessor and resets clock
 8001a42:	f000 f891 	bl	8001b68 <SystemInit>
	SystemClock_Config();					// Configure the clock and PLL - NB Currently done in SystemInit but will need updating for production board
 8001a46:	f7ff fec7 	bl	80017d8 <_Z18SystemClock_Configv>
	SystemCoreClockUpdate();				// Update SystemCoreClock (system clock frequency) derived from settings of oscillators, prescalers and PLL
 8001a4a:	f000 f8c3 	bl	8001bd4 <SystemCoreClockUpdate>
	InitBtnLED();							// PC13 blue button; PB7 is LD2 Blue; PB14 is LD3 Red
 8001a4e:	f7ff ff3b 	bl	80018c8 <_Z10InitBtnLEDv>
	usb.InitUSB();
 8001a52:	481c      	ldr	r0, [pc, #112]	; (8001ac4 <main+0x88>)
 8001a54:	f7ff f860 	bl	8000b18 <_ZN3USB7InitUSBEv>

	int i = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]

	while (1)
	{
		if (GPIOC->IDR & GPIO_IDR_IDR_13) {
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <main+0x8c>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf14      	ite	ne
 8001a68:	2301      	movne	r3, #1
 8001a6a:	2300      	moveq	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d009      	beq.n	8001a86 <main+0x4a>
			GPIOB->BSRR |= GPIO_BSRR_BS_7;
 8001a72:	4a16      	ldr	r2, [pc, #88]	; (8001acc <main+0x90>)
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <main+0x90>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	6193      	str	r3, [r2, #24]
			usbReady = true;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <main+0x94>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	e005      	b.n	8001a92 <main+0x56>
//			GPIOB->BSRR |= GPIO_BSRR_BS_14;
		}
		else
			GPIOB->BSRR |= GPIO_BSRR_BR_7;
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <main+0x90>)
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <main+0x90>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a90:	6193      	str	r3, [r2, #24]

		mouseBuffer[0] = (GPIOC->IDR & GPIO_IDR_IDR_13) ? 2 : 0;
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <main+0x8c>)
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <main+0x66>
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	e000      	b.n	8001aa4 <main+0x68>
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <main+0x98>)
 8001aa6:	701a      	strb	r2, [r3, #0]

		if (usbReady) 		usb.SendReport (mouseBuffer, 4);
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <main+0x94>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <main+0x7e>
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <main+0x98>)
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <main+0x88>)
 8001ab6:	f7ff fe67 	bl	8001788 <_ZN3USB10SendReportEPht>
		i++;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3301      	adds	r3, #1
 8001abe:	607b      	str	r3, [r7, #4]
		if (GPIOC->IDR & GPIO_IDR_IDR_13) {
 8001ac0:	e7cc      	b.n	8001a5c <main+0x20>
 8001ac2:	bf00      	nop
 8001ac4:	20000030 	.word	0x20000030
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	200006b0 	.word	0x200006b0
 8001ad4:	200006ac 	.word	0x200006ac

08001ad8 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d107      	bne.n	8001af8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d102      	bne.n	8001af8 <_Z41__static_initialization_and_destruction_0ii+0x20>
USB usb;
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001af4:	f7ff ff0c 	bl	8001910 <_ZN3USBC1Ev>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000030 	.word	0x20000030

08001b04 <_GLOBAL__sub_I_usb>:
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff ffe3 	bl	8001ad8 <_Z41__static_initialization_and_destruction_0ii>
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b1a:	e003      	b.n	8001b24 <LoopCopyDataInit>

08001b1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b22:	3104      	adds	r1, #4

08001b24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b2c:	d3f6      	bcc.n	8001b1c <CopyDataInit>
  ldr  r2, =_sbss
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b30:	e002      	b.n	8001b38 <LoopFillZerobss>

08001b32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b34:	f842 3b04 	str.w	r3, [r2], #4

08001b38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b3c:	d3f9      	bcc.n	8001b32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b3e:	f000 f813 	bl	8001b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f000 f8c3 	bl	8001ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff ff79 	bl	8001a3c <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b50:	08001e18 	.word	0x08001e18
  ldr  r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b58:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001b5c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001b60:	200006b4 	.word	0x200006b4

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>
	...

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <SystemInit+0x60>)
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <SystemInit+0x60>)
 8001b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b7c:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <SystemInit+0x64>)
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <SystemInit+0x64>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <SystemInit+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <SystemInit+0x64>)
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <SystemInit+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <SystemInit+0x64>)
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <SystemInit+0x68>)
 8001ba2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ba4:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <SystemInit+0x64>)
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <SystemInit+0x64>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <SystemInit+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SystemInit+0x60>)
 8001bb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bbc:	609a      	str	r2, [r3, #8]
#endif
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	24003010 	.word	0x24003010

08001bd4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	2302      	movs	r3, #2
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	2302      	movs	r3, #2
 8001bec:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001bee:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <SystemCoreClockUpdate+0xe4>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d007      	beq.n	8001c0e <SystemCoreClockUpdate+0x3a>
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d009      	beq.n	8001c16 <SystemCoreClockUpdate+0x42>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d13d      	bne.n	8001c82 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001c06:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <SystemCoreClockUpdate+0xe8>)
 8001c08:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <SystemCoreClockUpdate+0xec>)
 8001c0a:	601a      	str	r2, [r3, #0]
      break;
 8001c0c:	e03d      	b.n	8001c8a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <SystemCoreClockUpdate+0xe8>)
 8001c10:	4a2c      	ldr	r2, [pc, #176]	; (8001cc4 <SystemCoreClockUpdate+0xf0>)
 8001c12:	601a      	str	r2, [r3, #0]
      break;
 8001c14:	e039      	b.n	8001c8a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <SystemCoreClockUpdate+0xe4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0d9b      	lsrs	r3, r3, #22
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <SystemCoreClockUpdate+0xe4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c2a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00c      	beq.n	8001c4c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c32:	4a24      	ldr	r2, [pc, #144]	; (8001cc4 <SystemCoreClockUpdate+0xf0>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <SystemCoreClockUpdate+0xe4>)
 8001c3c:	6852      	ldr	r2, [r2, #4]
 8001c3e:	0992      	lsrs	r2, r2, #6
 8001c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c44:	fb02 f303 	mul.w	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e00b      	b.n	8001c64 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c4c:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <SystemCoreClockUpdate+0xec>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <SystemCoreClockUpdate+0xe4>)
 8001c56:	6852      	ldr	r2, [r2, #4]
 8001c58:	0992      	lsrs	r2, r2, #6
 8001c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <SystemCoreClockUpdate+0xe4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <SystemCoreClockUpdate+0xe8>)
 8001c7e:	6013      	str	r3, [r2, #0]
      break;
 8001c80:	e003      	b.n	8001c8a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <SystemCoreClockUpdate+0xe8>)
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <SystemCoreClockUpdate+0xec>)
 8001c86:	601a      	str	r2, [r3, #0]
      break;
 8001c88:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <SystemCoreClockUpdate+0xe4>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <SystemCoreClockUpdate+0xf4>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <SystemCoreClockUpdate+0xe8>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <SystemCoreClockUpdate+0xe8>)
 8001ca8:	6013      	str	r3, [r2, #0]
}
 8001caa:	bf00      	nop
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	00f42400 	.word	0x00f42400
 8001cc4:	007a1200 	.word	0x007a1200
 8001cc8:	20000004 	.word	0x20000004

08001ccc <__libc_init_array>:
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	4e0d      	ldr	r6, [pc, #52]	; (8001d04 <__libc_init_array+0x38>)
 8001cd0:	4c0d      	ldr	r4, [pc, #52]	; (8001d08 <__libc_init_array+0x3c>)
 8001cd2:	1ba4      	subs	r4, r4, r6
 8001cd4:	10a4      	asrs	r4, r4, #2
 8001cd6:	2500      	movs	r5, #0
 8001cd8:	42a5      	cmp	r5, r4
 8001cda:	d109      	bne.n	8001cf0 <__libc_init_array+0x24>
 8001cdc:	4e0b      	ldr	r6, [pc, #44]	; (8001d0c <__libc_init_array+0x40>)
 8001cde:	4c0c      	ldr	r4, [pc, #48]	; (8001d10 <__libc_init_array+0x44>)
 8001ce0:	f000 f824 	bl	8001d2c <_init>
 8001ce4:	1ba4      	subs	r4, r4, r6
 8001ce6:	10a4      	asrs	r4, r4, #2
 8001ce8:	2500      	movs	r5, #0
 8001cea:	42a5      	cmp	r5, r4
 8001cec:	d105      	bne.n	8001cfa <__libc_init_array+0x2e>
 8001cee:	bd70      	pop	{r4, r5, r6, pc}
 8001cf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cf4:	4798      	blx	r3
 8001cf6:	3501      	adds	r5, #1
 8001cf8:	e7ee      	b.n	8001cd8 <__libc_init_array+0xc>
 8001cfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cfe:	4798      	blx	r3
 8001d00:	3501      	adds	r5, #1
 8001d02:	e7f2      	b.n	8001cea <__libc_init_array+0x1e>
 8001d04:	08001e0c 	.word	0x08001e0c
 8001d08:	08001e0c 	.word	0x08001e0c
 8001d0c:	08001e0c 	.word	0x08001e0c
 8001d10:	08001e14 	.word	0x08001e14

08001d14 <memcpy>:
 8001d14:	b510      	push	{r4, lr}
 8001d16:	1e43      	subs	r3, r0, #1
 8001d18:	440a      	add	r2, r1
 8001d1a:	4291      	cmp	r1, r2
 8001d1c:	d100      	bne.n	8001d20 <memcpy+0xc>
 8001d1e:	bd10      	pop	{r4, pc}
 8001d20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d28:	e7f7      	b.n	8001d1a <memcpy+0x6>
	...

08001d2c <_init>:
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2e:	bf00      	nop
 8001d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d32:	bc08      	pop	{r3}
 8001d34:	469e      	mov	lr, r3
 8001d36:	4770      	bx	lr

08001d38 <_fini>:
 8001d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3a:	bf00      	nop
 8001d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d3e:	bc08      	pop	{r3}
 8001d40:	469e      	mov	lr, r3
 8001d42:	4770      	bx	lr
